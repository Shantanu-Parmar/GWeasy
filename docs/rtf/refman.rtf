{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\info 
{\title {\comment GWeasy  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
v3.0.1 \par
}}GWeasy}
{\comment Generated by doxygen 1.13.2.}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt GWeasy}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version v3.0.1\par\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Index\par \pard\plain 
{\tc \v Namespace Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Package List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the packages with brief descriptions (if available):}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b GWeasy} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Hierarchical Index\par \pard\plain 
{\tc \v Hierarchical Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class Hierarchy\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This inheritance list is sorted roughly, but not completely, alphabetically:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
GWeasy.Application\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
GWeasy.FFT\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
tk.Frame
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
GWeasy.TerminalFrame\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
GWeasy.GravfetchApp\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
GWeasy.GWOSCApp\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
GWeasy.OmicronApp\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
GWeasy.Omiviz\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
GWeasy.PSDs\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
GWeasy.Spectrogram\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
GWeasy.TimeSrswaveform\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b GWeasy.Application} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b GWeasy.FFT} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b GWeasy.GravfetchApp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b GWeasy.GWOSCApp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b GWeasy.OmicronApp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b GWeasy.Omiviz} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b GWeasy.PSDs} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b GWeasy.Spectrogram} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b GWeasy.TerminalFrame} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b GWeasy.TimeSrswaveform} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b C:/Users/HP/Desktop/docs/GWeasy/{\b GWeasy.py} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Documentation\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GWeasy Namespace Reference\par \pard\plain 
{\tc\tcl2 \v GWeasy}
{\xe \v GWeasy}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Application}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b FFT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b GravfetchApp}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b GWOSCApp}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b OmicronApp}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Omiviz}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b PSDs}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Spectrogram}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b TerminalFrame}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b TimeSrswaveform}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b filename}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b level}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b format}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
str {\b HISTORY_FILE} = "gravfetch_history.json"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b root} = tk.Tk()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b app} = {\b Application}({\b root})\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v app\:GWeasy}
{\xe \v GWeasy\:app}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.app = {\b Application}({\b root})}}
\par
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2316} of file {\b GWeasy.py}.}\par
}
{\xe \v filename\:GWeasy}
{\xe \v GWeasy\:filename}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.filename}}
\par
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 27} of file {\b GWeasy.py}.}\par
}
{\xe \v format\:GWeasy}
{\xe \v GWeasy\:format}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.format}}
\par
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 29} of file {\b GWeasy.py}.}\par
}
{\xe \v HISTORY_FILE\:GWeasy}
{\xe \v GWeasy\:HISTORY_FILE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
str GWeasy.HISTORY_FILE = "gravfetch_history.json"}}
\par
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 31} of file {\b GWeasy.py}.}\par
}
{\xe \v level\:GWeasy}
{\xe \v GWeasy\:level}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.level}}
\par
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 28} of file {\b GWeasy.py}.}\par
}
{\xe \v root\:GWeasy}
{\xe \v GWeasy\:root}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.root = tk.Tk()}}
\par
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2315} of file {\b GWeasy.py}.}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GWeasy.Application Class Reference\par \pard\plain 
{\tc\tcl2 \v GWeasy.Application}
{\xe \v GWeasy.Application}
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b __init__} (self, {\b root})\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b root} = root\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b notebook} = ttk.Notebook(self.root)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b gwosc_tab} = ttk.Frame(self.notebook)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b gravfetch_tab} = ttk.Frame(self.notebook)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b omicron_tab} = ttk.Frame(self.notebook)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b omiviz_tab} = ttk.Frame(self.notebook)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TimeSeriesWav} = ttk.Frame(self.notebook)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b FFT} = ttk.Frame(self.notebook)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b PSDs} = ttk.Frame(self.notebook)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Spectrogram} = ttk.Frame(self.notebook)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b gravfetch_app} = {\b GravfetchApp}(self.gravfetch_tab)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b omicron_app} = {\b OmicronApp}(self.omicron_tab)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b omiviz_app} = {\b Omiviz}(self.omiviz_tab)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TimeSeriesWav_app} = {\b TimeSrswaveform}(self.TimeSeriesWav)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 34} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v __init__\:GWeasy.Application}
{\xe \v GWeasy.Application\:__init__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Application.__init__ ( self,  root)}}
\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 36} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v FFT\:GWeasy.Application}
{\xe \v GWeasy.Application\:FFT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Application.FFT = ttk.Frame(self.notebook)}}
\par
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 65} of file {\b GWeasy.py}.}\par
}
{\xe \v gravfetch_app\:GWeasy.Application}
{\xe \v GWeasy.Application\:gravfetch_app}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Application.gravfetch_app = {\b GravfetchApp}(self.gravfetch_tab)}}
\par
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 75} of file {\b GWeasy.py}.}\par
}
{\xe \v gravfetch_tab\:GWeasy.Application}
{\xe \v GWeasy.Application\:gravfetch_tab}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Application.gravfetch_tab = ttk.Frame(self.notebook)}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 51} of file {\b GWeasy.py}.}\par
}
{\xe \v gwosc_tab\:GWeasy.Application}
{\xe \v GWeasy.Application\:gwosc_tab}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Application.gwosc_tab = ttk.Frame(self.notebook)}}
\par
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 47} of file {\b GWeasy.py}.}\par
}
{\xe \v notebook\:GWeasy.Application}
{\xe \v GWeasy.Application\:notebook}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Application.notebook = ttk.Notebook(self.root)}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 41} of file {\b GWeasy.py}.}\par
}
{\xe \v omicron_app\:GWeasy.Application}
{\xe \v GWeasy.Application\:omicron_app}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Application.omicron_app = {\b OmicronApp}(self.omicron_tab)}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 76} of file {\b GWeasy.py}.}\par
}
{\xe \v omicron_tab\:GWeasy.Application}
{\xe \v GWeasy.Application\:omicron_tab}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Application.omicron_tab = ttk.Frame(self.notebook)}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 55} of file {\b GWeasy.py}.}\par
}
{\xe \v omiviz_app\:GWeasy.Application}
{\xe \v GWeasy.Application\:omiviz_app}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Application.omiviz_app = {\b Omiviz}(self.omiviz_tab)}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 77} of file {\b GWeasy.py}.}\par
}
{\xe \v omiviz_tab\:GWeasy.Application}
{\xe \v GWeasy.Application\:omiviz_tab}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Application.omiviz_tab = ttk.Frame(self.notebook)}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 59} of file {\b GWeasy.py}.}\par
}
{\xe \v PSDs\:GWeasy.Application}
{\xe \v GWeasy.Application\:PSDs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Application.PSDs = ttk.Frame(self.notebook)}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 68} of file {\b GWeasy.py}.}\par
}
{\xe \v root\:GWeasy.Application}
{\xe \v GWeasy.Application\:root}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Application.root = root}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 37} of file {\b GWeasy.py}.}\par
}
{\xe \v Spectrogram\:GWeasy.Application}
{\xe \v GWeasy.Application\:Spectrogram}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Application.Spectrogram = ttk.Frame(self.notebook)}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 71} of file {\b GWeasy.py}.}\par
}
{\xe \v TimeSeriesWav\:GWeasy.Application}
{\xe \v GWeasy.Application\:TimeSeriesWav}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Application.TimeSeriesWav = ttk.Frame(self.notebook)}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 62} of file {\b GWeasy.py}.}\par
}
{\xe \v TimeSeriesWav_app\:GWeasy.Application}
{\xe \v GWeasy.Application\:TimeSeriesWav_app}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Application.TimeSeriesWav_app = {\b TimeSrswaveform}(self.TimeSeriesWav)}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 78} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/HP/Desktop/docs/GWeasy/{\b GWeasy.py}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GWeasy.FFT Class Reference\par \pard\plain 
{\tc\tcl2 \v GWeasy.FFT}
{\xe \v GWeasy.FFT}
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b __init__} (self, {\b root})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b copy_url} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b prefetch_data} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fetch_events} (self, event=None)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fetch_event_details} (self, event=None)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b update_urls} (self, event=None)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b toggle_mode} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b convert_time} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b save_params} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fft} (self, event_name, detectors, gps_start, gps_end)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b root} = root\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b canvas} = tk.Canvas({\b root})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b scroll_y} = ttk.Scrollbar({\b root}, orient="vertical", command=self.canvas.yview)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b scroll_x} = ttk.Scrollbar({\b root}, orient="horizontal", command=self.canvas.xview)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b frame} = ttk.Frame(self.canvas)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b catalog_dropdown} = ttk.Combobox(input_frame, state="readonly")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fetch_events} = "ew")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b event_dropdown} = ttk.Combobox(input_frame, state="readonly")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fetch_event_details} = "ew")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b run_dropdown} = ttk.Combobox(input_frame, state="readonly")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b detector_listbox} = tk.Listbox(input_frame, selectmode="multiple", exportselection=False, height=3)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b gps_start_entry} = ttk.Entry(input_frame, width=20)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b gps_end_entry} = ttk.Entry(input_frame, width=20)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b mode} = tk.StringVar(value="gps_to_utc")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b convert_entry} = ttk.Entry(conversion_frame, width=20)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b convert_button} = ttk.Button(conversion_frame, text="Convert", command=self.convert_time)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b result_label} = ttk.Label(conversion_frame, text="Result: ")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b toggle_button} = ttk.Button(conversion_frame, text="Switch to UTC \'E2\'86\'92 GPS", command=self.toggle_mode)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b url_dropdown} = ttk.Combobox(url_frame, state="readonly")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b copy_button} = ttk.Button(url_frame, text="Copy URL", command=self.copy_url)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b save_button} = ttk.Button(input_frame, text="Save Parameters", command=self.save_params)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b plot_frame} = ttk.Frame(self.frame)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fft_button}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 1515} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v __init__\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:__init__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.__init__ ( self,  root)}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1516} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v convert_time\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:convert_time}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.convert_time ( self)}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1693} of file {\b GWeasy.py}.}\par
}
{\xe \v copy_url\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:copy_url}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.copy_url ( self)}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1611} of file {\b GWeasy.py}.}\par
}
{\xe \v fetch_event_details\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:fetch_event_details}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.fetch_event_details ( self,  event = {\f2 None})}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1654} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "de/db4/class_g_weasy_1_1_f_f_t_a60b35fb4ce2c845ae171b5581826db22_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v fetch_events\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:fetch_events}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.fetch_events ( self,  event = {\f2 None})}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1638} of file {\b GWeasy.py}.}\par
}
{\xe \v fft\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:fft}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.fft ( self,  event_name,  detectors,  gps_start,  gps_end)}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1743} of file {\b GWeasy.py}.}\par
}
{\xe \v prefetch_data\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:prefetch_data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.prefetch_data ( self)}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1622} of file {\b GWeasy.py}.}\par
}
{\xe \v save_params\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:save_params}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.save_params ( self)}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Overwrite 'gwfparams.csv' with the latest input values, including headers.}
 \par
}{
Definition at line {\b 1713} of file {\b GWeasy.py}.}\par
}
{\xe \v toggle_mode\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:toggle_mode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.toggle_mode ( self)}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1684} of file {\b GWeasy.py}.}\par
}
{\xe \v update_urls\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:update_urls}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.update_urls ( self,  event = {\f2 None})}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1669} of file {\b GWeasy.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "de/db4/class_g_weasy_1_1_f_f_t_ad0cea468e600b484c31d52688bbdae6b_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v canvas\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:canvas}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.canvas = tk.Canvas({\b root})}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1522} of file {\b GWeasy.py}.}\par
}
{\xe \v catalog_dropdown\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:catalog_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.catalog_dropdown = ttk.Combobox(input_frame, state="readonly")}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1542} of file {\b GWeasy.py}.}\par
}
{\xe \v convert_button\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:convert_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.convert_button = ttk.Button(conversion_frame, text="Convert", command=self.convert_time)}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1582} of file {\b GWeasy.py}.}\par
}
{\xe \v convert_entry\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:convert_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.convert_entry = ttk.Entry(conversion_frame, width=20)}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1579} of file {\b GWeasy.py}.}\par
}
{\xe \v copy_button\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:copy_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.copy_button = ttk.Button(url_frame, text="Copy URL", command=self.copy_url)}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1598} of file {\b GWeasy.py}.}\par
}
{\xe \v detector_listbox\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:detector_listbox}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.detector_listbox = tk.Listbox(input_frame, selectmode="multiple", exportselection=False, height=3)}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1559} of file {\b GWeasy.py}.}\par
}
{\xe \v event_dropdown\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:event_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.event_dropdown = ttk.Combobox(input_frame, state="readonly")}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1548} of file {\b GWeasy.py}.}\par
}
{\xe \v fetch_event_details\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:fetch_event_details}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.fetch_event_details = "ew")}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1550} of file {\b GWeasy.py}.}\par
}
{\xe \v fetch_events\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:fetch_events}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.fetch_events = "ew")}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1544} of file {\b GWeasy.py}.}\par
}
{\xe \v fft_button\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:fft_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.fft_button}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid =  tk.Button(root, text={\cf22 "Run FFT"}, command={\cf17 lambda}: self.fft(\par
        self.catalog_dropdown.get(),[self.detector_listbox.get(i) {\cf19 for} i {\cf19 in} self.detector_listbox.curselection()],float(self.gps_start_entry.get()),float(self.gps_end_entry.get())))\par
}
{
Definition at line {\b 1607} of file {\b GWeasy.py}.}\par
}
{\xe \v frame\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:frame}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.frame = ttk.Frame(self.canvas)}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1528} of file {\b GWeasy.py}.}\par
}
{\xe \v gps_end_entry\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:gps_end_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.gps_end_entry = ttk.Entry(input_frame, width=20)}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1571} of file {\b GWeasy.py}.}\par
}
{\xe \v gps_start_entry\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:gps_start_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.gps_start_entry = ttk.Entry(input_frame, width=20)}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1567} of file {\b GWeasy.py}.}\par
}
{\xe \v mode\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:mode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.mode = tk.StringVar(value="gps_to_utc")}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1575} of file {\b GWeasy.py}.}\par
}
{\xe \v plot_frame\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:plot_frame}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.plot_frame = ttk.Frame(self.frame)}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1604} of file {\b GWeasy.py}.}\par
}
{\xe \v result_label\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:result_label}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.result_label = ttk.Label(conversion_frame, text="Result: ")}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1585} of file {\b GWeasy.py}.}\par
}
{\xe \v root\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:root}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.root = root}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1517} of file {\b GWeasy.py}.}\par
}
{\xe \v run_dropdown\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:run_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.run_dropdown = ttk.Combobox(input_frame, state="readonly")}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1554} of file {\b GWeasy.py}.}\par
}
{\xe \v save_button\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:save_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.save_button = ttk.Button(input_frame, text="Save Parameters", command=self.save_params)}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1602} of file {\b GWeasy.py}.}\par
}
{\xe \v scroll_x\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:scroll_x}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.scroll_x = ttk.Scrollbar({\b root}, orient="horizontal", command=self.canvas.xview)}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1524} of file {\b GWeasy.py}.}\par
}
{\xe \v scroll_y\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:scroll_y}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.scroll_y = ttk.Scrollbar({\b root}, orient="vertical", command=self.canvas.yview)}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1523} of file {\b GWeasy.py}.}\par
}
{\xe \v toggle_button\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:toggle_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.toggle_button = ttk.Button(conversion_frame, text="Switch to UTC \'E2\'86\'92 GPS", command=self.toggle_mode)}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1588} of file {\b GWeasy.py}.}\par
}
{\xe \v url_dropdown\:GWeasy.FFT}
{\xe \v GWeasy.FFT\:url_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.FFT.url_dropdown = ttk.Combobox(url_frame, state="readonly")}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1595} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/HP/Desktop/docs/GWeasy/{\b GWeasy.py}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GWeasy.GravfetchApp Class Reference\par \pard\plain 
{\tc\tcl2 \v GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp}
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b __init__} (self, {\b root})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b setup_execution_tab} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b select_time_csv} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b select_channel_csv} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b select_gwfout_dir} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b toggle_execution} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b run_gravfetch_script} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b append_output} (self, text)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b save_channel_history} (self)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b root} = root\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
str {\b time_csv_file} = ""\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
str {\b channel_csv_file} = ""\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b execution_running} = False\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b process} = None\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
str {\b gwfout_path} = "./gwfout/"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
list {\b loaded_channels} = []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b terminal} = {\b TerminalFrame}(self.root, row=5, column=0, columnspan=2, height=20, width=80)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b status_bar_frame} = tk.Frame(self.root, bg="lightgray")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b status_label} = tk.Label(self.status_bar_frame, text="Idle", fg="black", bg="lightgray", anchor="w")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b time_button} = tk.Button(self.root, text="Select Time CSV", command=self.select_time_csv)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b channel_button} = tk.Button(self.root, text="Select Channel CSV", command=self.select_channel_csv)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b gwf_button} = tk.Button(self.root, text="Select Output (GWF) Dir", command=self.select_gwfout_dir)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b start_stop_button} = tk.Button(self.root, text="Start Execution", command=self.toggle_execution)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b execution_thread} = threading.Thread(target=self.run_gravfetch_script, daemon=True)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 605} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v __init__\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:__init__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.__init__ ( self,  root)}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 606} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v append_output\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:append_output}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.append_output ( self,  text)}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Send output to the terminal}
 \par
}{
Definition at line {\b 797} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d8/d0c/class_g_weasy_1_1_gravfetch_app_adf57acd65707f23f01b3ee1befc3135c_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d8/d0c/class_g_weasy_1_1_gravfetch_app_adf57acd65707f23f01b3ee1befc3135c_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v run_gravfetch_script\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:run_gravfetch_script}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.run_gravfetch_script ( self)}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Runs the Gravfetch script logic directly within the GUI.}
 \par
}{
Definition at line {\b 700} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d8/d0c/class_g_weasy_1_1_gravfetch_app_a2cab8f0e263b51a261dfb2adbae351da_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v save_channel_history\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:save_channel_history}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.save_channel_history ( self)}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Save the selected channels to a JSON file for persistence.}
 \par
}{
Definition at line {\b 800} of file {\b GWeasy.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d8/d0c/class_g_weasy_1_1_gravfetch_app_acfa44583609e84bd3e99546a767fe119_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v select_channel_csv\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:select_channel_csv}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.select_channel_csv ( self)}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Open file dialog for channel CSV file.}
 \par
}{
Definition at line {\b 660} of file {\b GWeasy.py}.}\par
}
{\xe \v select_gwfout_dir\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:select_gwfout_dir}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.select_gwfout_dir ( self)}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Open file dialog for output dir (folder) selection.}
 \par
}{
Definition at line {\b 665} of file {\b GWeasy.py}.}\par
}
{\xe \v select_time_csv\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:select_time_csv}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.select_time_csv ( self)}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Open file dialog for time CSV file.}
 \par
}{
Definition at line {\b 655} of file {\b GWeasy.py}.}\par
}
{\xe \v setup_execution_tab\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:setup_execution_tab}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.setup_execution_tab ( self)}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Sets up the Execution tab with buttons, output terminal, etc.}
 \par
}{
Definition at line {\b 630} of file {\b GWeasy.py}.}\par
}
{\xe \v toggle_execution\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:toggle_execution}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.toggle_execution ( self)}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Start or stop the execution of the Gravfetch script.}
 \par
}{
Definition at line {\b 675} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d8/d0c/class_g_weasy_1_1_gravfetch_app_aebdd5211a656bd3befb663b60f92e3e2_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v channel_button\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:channel_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.channel_button = tk.Button(self.root, text="Select Channel CSV", command=self.select_channel_csv)}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 643} of file {\b GWeasy.py}.}\par
}
{\xe \v channel_csv_file\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:channel_csv_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
str GWeasy.GravfetchApp.channel_csv_file = ""}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 609} of file {\b GWeasy.py}.}\par
}
{\xe \v execution_running\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:execution_running}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool GWeasy.GravfetchApp.execution_running = False}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 610} of file {\b GWeasy.py}.}\par
}
{\xe \v execution_thread\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:execution_thread}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.execution_thread = threading.Thread(target=self.run_gravfetch_script, daemon=True)}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 697} of file {\b GWeasy.py}.}\par
}
{\xe \v gwf_button\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:gwf_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.gwf_button = tk.Button(self.root, text="Select Output (GWF) Dir", command=self.select_gwfout_dir)}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 645} of file {\b GWeasy.py}.}\par
}
{\xe \v gwfout_path\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:gwfout_path}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.gwfout_path = "./gwfout/"}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 612} of file {\b GWeasy.py}.}\par
}
{\xe \v loaded_channels\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:loaded_channels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
list GWeasy.GravfetchApp.loaded_channels = []}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 613} of file {\b GWeasy.py}.}\par
}
{\xe \v process\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:process}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.process = None}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 611} of file {\b GWeasy.py}.}\par
}
{\xe \v root\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:root}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.root = root}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 607} of file {\b GWeasy.py}.}\par
}
{\xe \v start_stop_button\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:start_stop_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.start_stop_button = tk.Button(self.root, text="Start Execution", command=self.toggle_execution)}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 649} of file {\b GWeasy.py}.}\par
}
{\xe \v status_bar_frame\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:status_bar_frame}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.status_bar_frame = tk.Frame(self.root, bg="lightgray")}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 633} of file {\b GWeasy.py}.}\par
}
{\xe \v status_label\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:status_label}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.status_label = tk.Label(self.status_bar_frame, text="Idle", fg="black", bg="lightgray", anchor="w")}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 637} of file {\b GWeasy.py}.}\par
}
{\xe \v terminal\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:terminal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.terminal = {\b TerminalFrame}(self.root, row=5, column=0, columnspan=2, height=20, width=80)}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 628} of file {\b GWeasy.py}.}\par
}
{\xe \v time_button\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:time_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GravfetchApp.time_button = tk.Button(self.root, text="Select Time CSV", command=self.select_time_csv)}}
\par
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 641} of file {\b GWeasy.py}.}\par
}
{\xe \v time_csv_file\:GWeasy.GravfetchApp}
{\xe \v GWeasy.GravfetchApp\:time_csv_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
str GWeasy.GravfetchApp.time_csv_file = ""}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 608} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/HP/Desktop/docs/GWeasy/{\b GWeasy.py}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GWeasy.GWOSCApp Class Reference\par \pard\plain 
{\tc\tcl2 \v GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp}
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b __init__} (self, {\b master}, {\b root})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b init_cef} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b create_browser} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b cef_loop} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b on_resize} (self, event=None)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b go_back} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b go_forward} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b reload_page} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b load_url} (self, event=None)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b master} = master\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b root} = root\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b browser} = None\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b navbar} = tk.Frame({\b master}, bg="gray", height=40)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b back_btn} = Button(self.navbar, text="\'E2\'97\'80", command=self.go_back)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b forward_btn} = Button(self.navbar, text="\'E2\'96\'B6", command=self.go_forward)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b reload_btn} = Button(self.navbar, text="\'F0\'9F\'94\'84", command=self.reload_page)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b url_entry} = Entry(self.navbar, width=50)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b load_url} = True)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b browser_frame} = tk.Frame({\b master}, bg="black")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b init_cef} = True)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b on_resize}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b create_browser}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b cef_loop}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 810} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v __init__\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:__init__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.__init__ ( self,  master,  root)}}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 811} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v cef_loop\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:cef_loop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.cef_loop ( self)}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Runs CEF's message loop inside Tkinter's event loop.}
 \par
}{
Definition at line {\b 861} of file {\b GWeasy.py}.}\par
}
{\xe \v create_browser\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:create_browser}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.create_browser ( self)}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Embeds the browser inside the GWOSCRef tab.}
 \par
}{
Definition at line {\b 853} of file {\b GWeasy.py}.}\par
}
{\xe \v go_back\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:go_back}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.go_back ( self)}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 874} of file {\b GWeasy.py}.}\par
}
{\xe \v go_forward\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:go_forward}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.go_forward ( self)}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 878} of file {\b GWeasy.py}.}\par
}
{\xe \v init_cef\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:init_cef}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.init_cef ( self)}}
\par
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Initializes CEF and creates the browser.}
 \par
}{
Definition at line {\b 842} of file {\b GWeasy.py}.}\par
}
{\xe \v load_url\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:load_url}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.load_url ( self,  event = {\f2 None})}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 886} of file {\b GWeasy.py}.}\par
}
{\xe \v on_resize\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:on_resize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.on_resize ( self,  event = {\f2 None})}}
\par
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Handles resizing the browser when the window changes.}
 \par
}{
Definition at line {\b 866} of file {\b GWeasy.py}.}\par
}
{\xe \v reload_page\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:reload_page}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.reload_page ( self)}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 882} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v back_btn\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:back_btn}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.back_btn = Button(self.navbar, text="\'E2\'97\'80", command=self.go_back)}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 820} of file {\b GWeasy.py}.}\par
}
{\xe \v browser\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:browser}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.browser = None}}
\par
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 814} of file {\b GWeasy.py}.}\par
}
{\xe \v browser_frame\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:browser_frame}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.browser_frame = tk.Frame({\b master}, bg="black")}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 834} of file {\b GWeasy.py}.}\par
}
{\xe \v cef_loop\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:cef_loop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.cef_loop}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 851} of file {\b GWeasy.py}.}\par
}
{\xe \v create_browser\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:create_browser}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.create_browser}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 848} of file {\b GWeasy.py}.}\par
}
{\xe \v forward_btn\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:forward_btn}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.forward_btn = Button(self.navbar, text="\'E2\'96\'B6", command=self.go_forward)}}
\par
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 823} of file {\b GWeasy.py}.}\par
}
{\xe \v init_cef\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:init_cef}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.init_cef = True)}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 838} of file {\b GWeasy.py}.}\par
}
{\xe \v load_url\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:load_url}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.load_url = True)}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 831} of file {\b GWeasy.py}.}\par
}
{\xe \v master\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:master}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.master = master}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 812} of file {\b GWeasy.py}.}\par
}
{\xe \v navbar\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:navbar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.navbar = tk.Frame({\b master}, bg="gray", height=40)}}
\par
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 817} of file {\b GWeasy.py}.}\par
}
{\xe \v on_resize\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:on_resize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.on_resize}}
\par
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 839} of file {\b GWeasy.py}.}\par
}
{\xe \v reload_btn\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:reload_btn}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.reload_btn = Button(self.navbar, text="\'F0\'9F\'94\'84", command=self.reload_page)}}
\par
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 826} of file {\b GWeasy.py}.}\par
}
{\xe \v root\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:root}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.root = root}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 813} of file {\b GWeasy.py}.}\par
}
{\xe \v url_entry\:GWeasy.GWOSCApp}
{\xe \v GWeasy.GWOSCApp\:url_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.GWOSCApp.url_entry = Entry(self.navbar, width=50)}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 829} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/HP/Desktop/docs/GWeasy/{\b GWeasy.py}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GWeasy.OmicronApp Class Reference\par \pard\plain 
{\tc\tcl2 \v GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp}
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b __init__} (self, {\b root})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b create_widgets} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b create_entry} (self, label, key, frame=None, row=0, col=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b create_double_entry} (self, label, key, frame=None, row=0, col=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b create_file_selector} (self, label, key, is_directory=False, frame=None, row=0, column=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b create_folder_selector} (self, label, key, is_directory=False, frame=None, row=0, column=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b create_output_products_selection} (self, frame=None, row=0, column=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b create_dropdown} (self, label, key, options, frame=None, row=0, column=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b create_editable_dropdown} (self, label, key, options, frame=None, row=0, column=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b create_slider} (self, label, key, min_val, max_val, frame=None, row=0, column=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b create_channel_dropdown} (self, row=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b select_file} (self, var, is_directory=False)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b load_config} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b save_config} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b run_omicron_script} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b start_omicron_process} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b append_output} (self, text)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b open_custom_segs_dialog} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b generate_fin_ffl} (self, channel_dir, selected_segments)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b root} = root\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
str {\b config_path} = "config.txt"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
dict {\b config_data} = \{\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
dict {\b entries} = \{\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
dict {\b output_products} = \{\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
dict {\b ui_elements} = \{\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b project_dir} = os.getcwd().replace("\\\\", "/")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
str {\b wsl_project_dir} = f"/mnt/\{self.project_dir[0].lower()\}/\{self.project_dir[2:]\}"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
str {\b GWFOUT_DIRECTORY} = "./gwfout"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b canvas} = tk.Canvas({\b root})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b scrollbar} = ttk.Scrollbar({\b root}, orient="vertical", command=self.canvas.yview)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b scrollable_frame} = ttk.Frame(self.canvas)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b window_frame} = self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b terminal} = {\b TerminalFrame}(self.root, row=4, column=0, columnspan=2, height=10, width=80)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b custom_segs_btn} = tk.Button(button_frame, text="Custom Segs", command=self.open_custom_segs_dialog)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b save_button} = tk.Button(button_frame, text="Save Config", command=self.save_config)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b start_button} = tk.Button(button_frame, text="Start OMICRON", command=self.run_omicron_script)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b channel_dropdown}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 106} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v __init__\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:__init__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.__init__ ( self,  root)}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 107} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v append_output\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:append_output}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.append_output ( self,  text)}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Append output to the shared terminal frame.}
 \par
}{
Definition at line {\b 513} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/d74/class_g_weasy_1_1_omicron_app_a636cf0031aba5421ec9a6b61ed6a095c_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/d74/class_g_weasy_1_1_omicron_app_a636cf0031aba5421ec9a6b61ed6a095c_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v create_channel_dropdown\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:create_channel_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.create_channel_dropdown ( self,  row = {\f2 0})}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Creates an editable dropdown for selecting a channel, updating dynamically in the background.}
 \par
}{
Definition at line {\b 307} of file {\b GWeasy.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/d74/class_g_weasy_1_1_omicron_app_a5a8aeaaafbb31662a0235e5c6f6ad67e_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v create_double_entry\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:create_double_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.create_double_entry ( self,  label,  key,  frame = {\f2 None},  row = {\f2 0},  col = {\f2 0})}}
\par
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 190} of file {\b GWeasy.py}.}\par
}
{\xe \v create_dropdown\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:create_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.create_dropdown ( self,  label,  key,  options,  frame = {\f2 None},  row = {\f2 0},  column = {\f2 0})}}
\par
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Creates a dropdown menu inside a given frame.}
 \par
}{
Definition at line {\b 275} of file {\b GWeasy.py}.}\par
}
{\xe \v create_editable_dropdown\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:create_editable_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.create_editable_dropdown ( self,  label,  key,  options,  frame = {\f2 None},  row = {\f2 0},  column = {\f2 0})}}
\par
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Creates an editable dropdown menu inside a given frame.}
 \par
}{
Definition at line {\b 284} of file {\b GWeasy.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/d74/class_g_weasy_1_1_omicron_app_aac69064ecb2f45d9f1116cd1f2746cab_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v create_entry\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:create_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.create_entry ( self,  label,  key,  frame = {\f2 None},  row = {\f2 0},  col = {\f2 0})}}
\par
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 182} of file {\b GWeasy.py}.}\par
}
{\xe \v create_file_selector\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:create_file_selector}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.create_file_selector ( self,  label,  key,  is_directory = {\f2 False},  frame = {\f2 None},  row = {\f2 0},  column = {\f2 0})}}
\par
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Creates a file/directory selector inside the given frame (or default to scrollable_frame).}
 \par
}{
Definition at line {\b 203} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/d74/class_g_weasy_1_1_omicron_app_ad79ecd68c00f609dbed2b5983d7a505b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/d74/class_g_weasy_1_1_omicron_app_ad79ecd68c00f609dbed2b5983d7a505b_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v create_folder_selector\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:create_folder_selector}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.create_folder_selector ( self,  label,  key,  is_directory = {\f2 False},  frame = {\f2 None},  row = {\f2 0},  column = {\f2 0})}}
\par
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Creates a file/directory selector inside the given frame (or default to scrollable_frame).\par
Ensures paths are relative to the current working directory and creates the directory if missing.\par
Returns the selected relative path.\par
}
 \par
}{
Definition at line {\b 214} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/d74/class_g_weasy_1_1_omicron_app_a608de44f4b3e008aede61fa0a60ef748_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v create_output_products_selection\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:create_output_products_selection}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.create_output_products_selection ( self,  frame = {\f2 None},  row = {\f2 0},  column = {\f2 0})}}
\par
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Creates checkboxes for selecting output products inside a given frame.}
 \par
}{
Definition at line {\b 262} of file {\b GWeasy.py}.}\par
}
{\xe \v create_slider\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:create_slider}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.create_slider ( self,  label,  key,  min_val,  max_val,  frame = {\f2 None},  row = {\f2 0},  column = {\f2 0})}}
\par
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Creates a slider for selecting a numerical value.}
 \par
}{
Definition at line {\b 298} of file {\b GWeasy.py}.}\par
}
{\xe \v create_widgets\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:create_widgets}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.create_widgets ( self)}}
\par
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 143} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/d74/class_g_weasy_1_1_omicron_app_a133ad86bd2a05c92d5bc8bc7d3feeab8_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v generate_fin_ffl\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:generate_fin_ffl}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.generate_fin_ffl ( self,  channel_dir,  selected_segments)}}
\par
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  Generates fin.ffl file with correctly formatted paths and timestamps, then preselects it in the UI. }
 \par
}{
Definition at line {\b 582} of file {\b GWeasy.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/d74/class_g_weasy_1_1_omicron_app_a05489b453fa5815ad0a62bc11fb14df4_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v load_config\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:load_config}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.load_config ( self)}}
\par
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 392} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/d74/class_g_weasy_1_1_omicron_app_ac2f22a8cf066970416111ec3fa1106ef_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v open_custom_segs_dialog\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:open_custom_segs_dialog}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.open_custom_segs_dialog ( self)}}
\par
{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Opens a GUI window to select a channel and time segments with scrolling and dynamic layout.}
 \par
}{
Definition at line {\b 517} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/d74/class_g_weasy_1_1_omicron_app_ab2b3c69f76e7fb912821086703715181_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v run_omicron_script\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:run_omicron_script}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.run_omicron_script ( self)}}
\par
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Start the OMICRON script in a separate process and update the output in real-time.}
 \par
}{
Definition at line {\b 449} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/d74/class_g_weasy_1_1_omicron_app_ad6012b814f749f97f159aa12c4f890fd_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v save_config\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:save_config}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.save_config ( self)}}
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 402} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/d74/class_g_weasy_1_1_omicron_app_a24cfec42c637ae285edeb8ec620c8a5f_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v select_file\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:select_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.select_file ( self,  var,  is_directory = {\f2 False})}}
\par
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 385} of file {\b GWeasy.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/d74/class_g_weasy_1_1_omicron_app_acd9fc2c2cd113522c4e336bd8225ca94_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v start_omicron_process\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:start_omicron_process}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.start_omicron_process ( self)}}
\par
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Run the OMICRON command dynamically in WSL.}
 \par
}{
Definition at line {\b 457} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/d74/class_g_weasy_1_1_omicron_app_aa183952e874b5e197a29473d77871a3f_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/d74/class_g_weasy_1_1_omicron_app_aa183952e874b5e197a29473d77871a3f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v canvas\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:canvas}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.canvas = tk.Canvas({\b root})}}
\par
{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 121} of file {\b GWeasy.py}.}\par
}
{\xe \v channel_dropdown\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:channel_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.channel_dropdown}}
\par
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid =  ttk.Combobox(\par
            self.scrollable_frame,\par
            textvariable=self.ui_elements[{\cf22 "DATA CHANNELS"}],\par
            values=[],  {\cf20 # Start empty, will be populated dynamically}\par
            state={\cf22 "normal"}  {\cf20 # Allows manual input}\par
        )\par
}
{
Definition at line {\b 317} of file {\b GWeasy.py}.}\par
}
{\xe \v config_data\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:config_data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
dict GWeasy.OmicronApp.config_data = \{\}}}
\par
{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 110} of file {\b GWeasy.py}.}\par
}
{\xe \v config_path\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:config_path}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.config_path = "config.txt"}}
\par
{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 109} of file {\b GWeasy.py}.}\par
}
{\xe \v custom_segs_btn\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:custom_segs_btn}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.custom_segs_btn = tk.Button(button_frame, text="Custom Segs", command=self.open_custom_segs_dialog)}}
\par
{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 156} of file {\b GWeasy.py}.}\par
}
{\xe \v entries\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:entries}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
dict GWeasy.OmicronApp.entries = \{\}}}
\par
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 111} of file {\b GWeasy.py}.}\par
}
{\xe \v GWFOUT_DIRECTORY\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:GWFOUT_DIRECTORY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
str GWeasy.OmicronApp.GWFOUT_DIRECTORY = "./gwfout"}}
\par
{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 118} of file {\b GWeasy.py}.}\par
}
{\xe \v output_products\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:output_products}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
dict GWeasy.OmicronApp.output_products = \{\}}}
\par
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 112} of file {\b GWeasy.py}.}\par
}
{\xe \v project_dir\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:project_dir}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.project_dir = os.getcwd().replace("\\\\", "/")}}
\par
{\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 115} of file {\b GWeasy.py}.}\par
}
{\xe \v root\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:root}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.root = root}}
\par
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 108} of file {\b GWeasy.py}.}\par
}
{\xe \v save_button\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:save_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.save_button = tk.Button(button_frame, text="Save Config", command=self.save_config)}}
\par
{\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 158} of file {\b GWeasy.py}.}\par
}
{\xe \v scrollable_frame\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:scrollable_frame}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.scrollable_frame = ttk.Frame(self.canvas)}}
\par
{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 123} of file {\b GWeasy.py}.}\par
}
{\xe \v scrollbar\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:scrollbar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.scrollbar = ttk.Scrollbar({\b root}, orient="vertical", command=self.canvas.yview)}}
\par
{\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 122} of file {\b GWeasy.py}.}\par
}
{\xe \v start_button\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:start_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.start_button = tk.Button(button_frame, text="Start OMICRON", command=self.run_omicron_script)}}
\par
{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 160} of file {\b GWeasy.py}.}\par
}
{\xe \v terminal\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:terminal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.terminal = {\b TerminalFrame}(self.root, row=4, column=0, columnspan=2, height=10, width=80)}}
\par
{\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 139} of file {\b GWeasy.py}.}\par
}
{\xe \v ui_elements\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:ui_elements}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
dict GWeasy.OmicronApp.ui_elements = \{\}}}
\par
{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 113} of file {\b GWeasy.py}.}\par
}
{\xe \v window_frame\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:window_frame}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.OmicronApp.window_frame = self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")}}
\par
{\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 130} of file {\b GWeasy.py}.}\par
}
{\xe \v wsl_project_dir\:GWeasy.OmicronApp}
{\xe \v GWeasy.OmicronApp\:wsl_project_dir}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
str GWeasy.OmicronApp.wsl_project_dir = f"/mnt/\{self.project_dir[0].lower()\}/\{self.project_dir[2:]\}"}}
\par
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 116} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/HP/Desktop/docs/GWeasy/{\b GWeasy.py}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GWeasy.Omiviz Class Reference\par \pard\plain 
{\tc\tcl2 \v GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz}
{\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b __init__} (self, {\b root})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b start_loading} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b stop_loading} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b update_progress} (self, text)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b show_previous_plot} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b show_next_plot} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b update_navigation_buttons} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b create_widgets} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b valent} (self, label, key, frame=None, row=0, col=0, editable=True)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b create_output_path_selector} (self, label, key, frame=None, row=0, column=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b select_output_folder} (self, var)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b create_file_selector} (self, label, key, frame=None, row=0, column=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b select_file_or_folder} (self, var)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b run_omicron_plot} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b execute_command} (self, command, gps_start, gps_end, output_folder)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b show_plot} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b load_plots} (self, folder)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b root} = root\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
dict {\b config_data} = \{\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
dict {\b ui_elements} = \{\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
list {\b plot_files} = []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b current_plot_index} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b canvas} = tk.Canvas({\b root})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b scrollbar} = ttk.Scrollbar({\b root}, orient="vertical", command=self.canvas.yview)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b scrollable_frame} = ttk.Frame(self.canvas)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b window_frame} = self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b run_button} = tk.Button(button_frame, text="Run Omicron Plot", command=self.run_omicron_plot)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b image_frame} = tk.Frame(self.scrollable_frame)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b image_label} = tk.Label(self.image_frame, text="No Plot Available", width=50, height=25, bg="gray")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b prev_button} = tk.Button(nav_frame, text="\'E2\'AC\'85 Previous", command=self.show_previous_plot, state=tk.DISABLED)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b next_button} = tk.Button(nav_frame, text="Next \'E2\'9E\'A1", command=self.show_next_plot, state=tk.DISABLED)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b progress} = ttk.Progressbar(self.scrollable_frame, orient="horizontal", length=300, mode="indeterminate")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b wsl_project_dir} = output_folder\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b photo} = ImageTk.PhotoImage(image)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 892} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v __init__\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:__init__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.__init__ ( self,  root)}}
\par
{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 893} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v create_file_selector\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:create_file_selector}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.create_file_selector ( self,  label,  key,  frame = {\f2 None},  row = {\f2 0},  column = {\f2 0})}}
\par
{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Allows selecting either a single file or a folder containing `.root` files.}
 \par
}{
Definition at line {\b 1017} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "da/da4/class_g_weasy_1_1_omiviz_afe5b5ed7d3c8ac2eb212ee8b13b4b4f9_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "da/da4/class_g_weasy_1_1_omiviz_afe5b5ed7d3c8ac2eb212ee8b13b4b4f9_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v create_output_path_selector\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:create_output_path_selector}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.create_output_path_selector ( self,  label,  key,  frame = {\f2 None},  row = {\f2 0},  column = {\f2 0})}}
\par
{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Allows selecting an output folder.}
 \par
}{
Definition at line {\b 998} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "da/da4/class_g_weasy_1_1_omiviz_a458e270d3ea14516f84e77ec74b55bcc_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "da/da4/class_g_weasy_1_1_omiviz_a458e270d3ea14516f84e77ec74b55bcc_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v create_widgets\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:create_widgets}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.create_widgets ( self)}}
\par
{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 953} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "da/da4/class_g_weasy_1_1_omiviz_ac25ba894e63d6addfb816a28fb9615d0_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_command\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:execute_command}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.execute_command ( self,  command,  gps_start,  gps_end,  output_folder)}}
\par
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Runs the Omicron plot command inside a full WSL shell session with logging.}
 \par
}{
Definition at line {\b 1130} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "da/da4/class_g_weasy_1_1_omiviz_aac58d816df8df0bff000113f500c38f0_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v load_plots\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:load_plots}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.load_plots ( self,  folder)}}
\par
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Loads the plots from WSL and updates the GUI.}
 \par
}{
Definition at line {\b 1205} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "da/da4/class_g_weasy_1_1_omiviz_ad356caaa70d952c12d4661bd0715c969_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "da/da4/class_g_weasy_1_1_omiviz_ad356caaa70d952c12d4661bd0715c969_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v run_omicron_plot\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:run_omicron_plot}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.run_omicron_plot ( self)}}
\par
{\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1068} of file {\b GWeasy.py}.}\par
}
{\xe \v select_file_or_folder\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:select_file_or_folder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.select_file_or_folder ( self,  var)}}
\par
{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Allows selecting a folder (grabs all `.root` files) or an individual file.}
 \par
}{
Definition at line {\b 1030} of file {\b GWeasy.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "da/da4/class_g_weasy_1_1_omiviz_afa0801404d631921e5d212ee675ad32a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v select_output_folder\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:select_output_folder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.select_output_folder ( self,  var)}}
\par
{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Allows selecting an output folder.}
 \par
}{
Definition at line {\b 1011} of file {\b GWeasy.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "da/da4/class_g_weasy_1_1_omiviz_ade2bd10cac8ce57726871553b88241e7_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v show_next_plot\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:show_next_plot}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.show_next_plot ( self)}}
\par
{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Scrolls forward through the plots.}
 \par
}{
Definition at line {\b 940} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "da/da4/class_g_weasy_1_1_omiviz_ae7a0ad2a1b444d30fe6769555a7113bc_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v show_plot\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:show_plot}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.show_plot ( self)}}
\par
{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Displays the current plot in the GUI.}
 \par
}{
Definition at line {\b 1166} of file {\b GWeasy.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "da/da4/class_g_weasy_1_1_omiviz_ae394ef0c843904de3cb2195e777d1629_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v show_previous_plot\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:show_previous_plot}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.show_previous_plot ( self)}}
\par
{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Scrolls backward through the plots.}
 \par
}{
Definition at line {\b 933} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "da/da4/class_g_weasy_1_1_omiviz_a00290848b4f49fa8fed9dca6bb47ec2f_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v start_loading\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:start_loading}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.start_loading ( self)}}
\par
{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Start the loading animation.}
 \par
}{
Definition at line {\b 920} of file {\b GWeasy.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "da/da4/class_g_weasy_1_1_omiviz_a5927086beaab150b73ee9fe248920864_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v stop_loading\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:stop_loading}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.stop_loading ( self)}}
\par
{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Stop the loading animation.}
 \par
}{
Definition at line {\b 924} of file {\b GWeasy.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "da/da4/class_g_weasy_1_1_omiviz_a940521e496d5867e69a6e9e835875eec_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v update_navigation_buttons\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:update_navigation_buttons}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.update_navigation_buttons ( self)}}
\par
{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Updates the state of navigation buttons.}
 \par
}{
Definition at line {\b 947} of file {\b GWeasy.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "da/da4/class_g_weasy_1_1_omiviz_a28528940b4c8998eca58e6ca71d2d24a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v update_progress\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:update_progress}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.update_progress ( self,  text)}}
\par
{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Update progress based on Omicron output.}
 \par
}{
Definition at line {\b 928} of file {\b GWeasy.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "da/da4/class_g_weasy_1_1_omiviz_a0ca93a57b9356b0242c9c7b1ba79de98_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v valent\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:valent}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.valent ( self,  label,  key,  frame = {\f2 None},  row = {\f2 0},  col = {\f2 0},  editable = {\f2 True})}}
\par
{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 990} of file {\b GWeasy.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "da/da4/class_g_weasy_1_1_omiviz_a957f6e8833cee2c4f431ac4f1ee8b1cc_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v canvas\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:canvas}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.canvas = tk.Canvas({\b root})}}
\par
{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 901} of file {\b GWeasy.py}.}\par
}
{\xe \v config_data\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:config_data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
dict GWeasy.Omiviz.config_data = \{\}}}
\par
{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 895} of file {\b GWeasy.py}.}\par
}
{\xe \v current_plot_index\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:current_plot_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int GWeasy.Omiviz.current_plot_index = 0}}
\par
{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 898} of file {\b GWeasy.py}.}\par
}
{\xe \v image_frame\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:image_frame}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.image_frame = tk.Frame(self.scrollable_frame)}}
\par
{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 972} of file {\b GWeasy.py}.}\par
}
{\xe \v image_label\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:image_label}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.image_label = tk.Label(self.image_frame, text="No Plot Available", width=50, height=25, bg="gray")}}
\par
{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 975} of file {\b GWeasy.py}.}\par
}
{\xe \v next_button\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:next_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.next_button = tk.Button(nav_frame, text="Next \'E2\'9E\'A1", command=self.show_next_plot, state=tk.DISABLED)}}
\par
{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 985} of file {\b GWeasy.py}.}\par
}
{\xe \v photo\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:photo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.photo = ImageTk.PhotoImage(image)}}
\par
{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1191} of file {\b GWeasy.py}.}\par
}
{\xe \v plot_files\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:plot_files}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.plot_files = []}}
\par
{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 897} of file {\b GWeasy.py}.}\par
}
{\xe \v prev_button\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:prev_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.prev_button = tk.Button(nav_frame, text="\'E2\'AC\'85 Previous", command=self.show_previous_plot, state=tk.DISABLED)}}
\par
{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 982} of file {\b GWeasy.py}.}\par
}
{\xe \v progress\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:progress}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.progress = ttk.Progressbar(self.scrollable_frame, orient="horizontal", length=300, mode="indeterminate")}}
\par
{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 987} of file {\b GWeasy.py}.}\par
}
{\xe \v root\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:root}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.root = root}}
\par
{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 894} of file {\b GWeasy.py}.}\par
}
{\xe \v run_button\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:run_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.run_button = tk.Button(button_frame, text="Run Omicron Plot", command=self.run_omicron_plot)}}
\par
{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 968} of file {\b GWeasy.py}.}\par
}
{\xe \v scrollable_frame\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:scrollable_frame}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.scrollable_frame = ttk.Frame(self.canvas)}}
\par
{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 903} of file {\b GWeasy.py}.}\par
}
{\xe \v scrollbar\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:scrollbar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.scrollbar = ttk.Scrollbar({\b root}, orient="vertical", command=self.canvas.yview)}}
\par
{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 902} of file {\b GWeasy.py}.}\par
}
{\xe \v ui_elements\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:ui_elements}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
dict GWeasy.Omiviz.ui_elements = \{\}}}
\par
{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 896} of file {\b GWeasy.py}.}\par
}
{\xe \v window_frame\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:window_frame}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.window_frame = self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")}}
\par
{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 910} of file {\b GWeasy.py}.}\par
}
{\xe \v wsl_project_dir\:GWeasy.Omiviz}
{\xe \v GWeasy.Omiviz\:wsl_project_dir}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Omiviz.wsl_project_dir = output_folder}}
\par
{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1117} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/HP/Desktop/docs/GWeasy/{\b GWeasy.py}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GWeasy.PSDs Class Reference\par \pard\plain 
{\tc\tcl2 \v GWeasy.PSDs}
{\xe \v GWeasy.PSDs}
{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b __init__} (self, {\b root})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b copy_url} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b prefetch_data} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fetch_events} (self, event=None)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fetch_event_details} (self, event=None)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b update_urls} (self, event=None)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b toggle_mode} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b convert_time} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b save_params} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b psds} (self, event_name, detectors, gps_start, gps_end, fftlengths, methods)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b root} = root\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b canvas} = tk.Canvas({\b root})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b scroll_y} = ttk.Scrollbar({\b root}, orient="vertical", command=self.canvas.yview)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b scroll_x} = ttk.Scrollbar({\b root}, orient="horizontal", command=self.canvas.xview)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b frame} = ttk.Frame(self.canvas)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b catalog_dropdown} = ttk.Combobox(input_frame, state="readonly")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fetch_events} = "ew")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b event_dropdown} = ttk.Combobox(input_frame, state="readonly")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fetch_event_details} = "ew")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b run_dropdown} = ttk.Combobox(input_frame, state="readonly")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b detector_dropdown} = tk.Listbox(input_frame, selectmode="multiple", height=3)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b update_urls} = "ew")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b gps_start_entry} = ttk.Entry(input_frame, width=20)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b gps_end_entry} = ttk.Entry(input_frame, width=20)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fft_length_entry} = ttk.Entry(input_frame, width=10)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b method_entry} = ttk.Combobox(input_frame, width=10, values=["median", "welch"], state="readonly")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b mode} = tk.StringVar(value="gps_to_utc")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b convert_entry} = ttk.Entry(conversion_frame, width=20)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b convert_button} = ttk.Button(conversion_frame, text="Convert", command=self.convert_time)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b result_label} = ttk.Label(conversion_frame, text="Result: ")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b toggle_button} = ttk.Button(conversion_frame, text="Switch to UTC \'E2\'86\'92 GPS", command=self.toggle_mode)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b url_dropdown} = ttk.Combobox(url_frame, state="readonly")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b copy_button} = ttk.Button(url_frame, text="Copy URL", command=self.copy_url)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b save_button} = ttk.Button(input_frame, text="Save Parameters", command=self.save_params)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b plot_frame} = ttk.Frame(self.frame)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b plot_button} = tk.Button({\b root}, text="Plot TimeSeries", command=lambda: self.psds(self.catalog_dropdown.get(),[self.detector_dropdown.get(idx) for idx in self.detector_dropdown.curselection()],float(self.gps_start_entry.get()),float(self.gps_end_entry.get()),int(self.fft_length_entry.get()),self.method_entry.get()))\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 1791} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v __init__\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:__init__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.__init__ ( self,  root)}}
\par
{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1792} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v convert_time\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:convert_time}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.convert_time ( self)}}
\par
{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1980} of file {\b GWeasy.py}.}\par
}
{\xe \v copy_url\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:copy_url}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.copy_url ( self)}}
\par
{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1896} of file {\b GWeasy.py}.}\par
}
{\xe \v fetch_event_details\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:fetch_event_details}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.fetch_event_details ( self,  event = {\f2 None})}}
\par
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1939} of file {\b GWeasy.py}.}\par
}
{\xe \v fetch_events\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:fetch_events}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.fetch_events ( self,  event = {\f2 None})}}
\par
{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1923} of file {\b GWeasy.py}.}\par
}
{\xe \v prefetch_data\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:prefetch_data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.prefetch_data ( self)}}
\par
{\bkmkstart AAAAAAAAHH}
{\bkmkend AAAAAAAAHH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1907} of file {\b GWeasy.py}.}\par
}
{\xe \v psds\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:psds}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.psds ( self,  event_name,  detectors,  gps_start,  gps_end,  fftlengths,  methods)}}
\par
{\bkmkstart AAAAAAAAHI}
{\bkmkend AAAAAAAAHI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Plot Power Spectral Densities (PSDs) for multiple detectors in Tkinter.\par
\par
Parameters:\par
- event_name: Name of the gravitational wave event\par
- detectors: List of detector names (e.g., ['H1', 'L1', 'V1'])\par
- gps_start: GPS start time\par
- gps_end: GPS end time\par
- fftlengths: List of FFT lengths (same length as detectors)\par
- methods: List of ASD computation methods (same length as detectors)\par
}
 \par
}{
Definition at line {\b 2030} of file {\b GWeasy.py}.}\par
}
{\xe \v save_params\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:save_params}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.save_params ( self)}}
\par
{\bkmkstart AAAAAAAAHJ}
{\bkmkend AAAAAAAAHJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Overwrite 'gwfparams.csv' with the latest input values, including headers.}
 \par
}{
Definition at line {\b 2000} of file {\b GWeasy.py}.}\par
}
{\xe \v toggle_mode\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:toggle_mode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.toggle_mode ( self)}}
\par
{\bkmkstart AAAAAAAAHK}
{\bkmkend AAAAAAAAHK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1971} of file {\b GWeasy.py}.}\par
}
{\xe \v update_urls\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:update_urls}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.update_urls ( self,  event = {\f2 None})}}
\par
{\bkmkstart AAAAAAAAHL}
{\bkmkend AAAAAAAAHL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1954} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v canvas\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:canvas}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.canvas = tk.Canvas({\b root})}}
\par
{\bkmkstart AAAAAAAAHM}
{\bkmkend AAAAAAAAHM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1798} of file {\b GWeasy.py}.}\par
}
{\xe \v catalog_dropdown\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:catalog_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.catalog_dropdown = ttk.Combobox(input_frame, state="readonly")}}
\par
{\bkmkstart AAAAAAAAHN}
{\bkmkend AAAAAAAAHN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1818} of file {\b GWeasy.py}.}\par
}
{\xe \v convert_button\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:convert_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.convert_button = ttk.Button(conversion_frame, text="Convert", command=self.convert_time)}}
\par
{\bkmkstart AAAAAAAAHO}
{\bkmkend AAAAAAAAHO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1866} of file {\b GWeasy.py}.}\par
}
{\xe \v convert_entry\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:convert_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.convert_entry = ttk.Entry(conversion_frame, width=20)}}
\par
{\bkmkstart AAAAAAAAHP}
{\bkmkend AAAAAAAAHP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1863} of file {\b GWeasy.py}.}\par
}
{\xe \v copy_button\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:copy_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.copy_button = ttk.Button(url_frame, text="Copy URL", command=self.copy_url)}}
\par
{\bkmkstart AAAAAAAAHQ}
{\bkmkend AAAAAAAAHQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1882} of file {\b GWeasy.py}.}\par
}
{\xe \v detector_dropdown\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:detector_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.detector_dropdown = tk.Listbox(input_frame, selectmode="multiple", height=3)}}
\par
{\bkmkstart AAAAAAAAHR}
{\bkmkend AAAAAAAAHR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1835} of file {\b GWeasy.py}.}\par
}
{\xe \v event_dropdown\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:event_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.event_dropdown = ttk.Combobox(input_frame, state="readonly")}}
\par
{\bkmkstart AAAAAAAAHS}
{\bkmkend AAAAAAAAHS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1824} of file {\b GWeasy.py}.}\par
}
{\xe \v fetch_event_details\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:fetch_event_details}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.fetch_event_details = "ew")}}
\par
{\bkmkstart AAAAAAAAHT}
{\bkmkend AAAAAAAAHT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1826} of file {\b GWeasy.py}.}\par
}
{\xe \v fetch_events\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:fetch_events}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.fetch_events = "ew")}}
\par
{\bkmkstart AAAAAAAAHU}
{\bkmkend AAAAAAAAHU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1820} of file {\b GWeasy.py}.}\par
}
{\xe \v fft_length_entry\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:fft_length_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.fft_length_entry = ttk.Entry(input_frame, width=10)}}
\par
{\bkmkstart AAAAAAAAHV}
{\bkmkend AAAAAAAAHV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1851} of file {\b GWeasy.py}.}\par
}
{\xe \v frame\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:frame}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.frame = ttk.Frame(self.canvas)}}
\par
{\bkmkstart AAAAAAAAHW}
{\bkmkend AAAAAAAAHW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1804} of file {\b GWeasy.py}.}\par
}
{\xe \v gps_end_entry\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:gps_end_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.gps_end_entry = ttk.Entry(input_frame, width=20)}}
\par
{\bkmkstart AAAAAAAAHX}
{\bkmkend AAAAAAAAHX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1847} of file {\b GWeasy.py}.}\par
}
{\xe \v gps_start_entry\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:gps_start_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.gps_start_entry = ttk.Entry(input_frame, width=20)}}
\par
{\bkmkstart AAAAAAAAHY}
{\bkmkend AAAAAAAAHY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1843} of file {\b GWeasy.py}.}\par
}
{\xe \v method_entry\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:method_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.method_entry = ttk.Combobox(input_frame, width=10, values=["median", "welch"], state="readonly")}}
\par
{\bkmkstart AAAAAAAAHZ}
{\bkmkend AAAAAAAAHZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1855} of file {\b GWeasy.py}.}\par
}
{\xe \v mode\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:mode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.mode = tk.StringVar(value="gps_to_utc")}}
\par
{\bkmkstart AAAAAAAAIA}
{\bkmkend AAAAAAAAIA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1859} of file {\b GWeasy.py}.}\par
}
{\xe \v plot_button\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:plot_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.plot_button = tk.Button({\b root}, text="Plot TimeSeries", command=lambda: self.psds(self.catalog_dropdown.get(),[self.detector_dropdown.get(idx) for idx in self.detector_dropdown.curselection()],float(self.gps_start_entry.get()),float(self.gps_end_entry.get()),int(self.fft_length_entry.get()),self.method_entry.get()))}}
\par
{\bkmkstart AAAAAAAAIB}
{\bkmkend AAAAAAAAIB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1892} of file {\b GWeasy.py}.}\par
}
{\xe \v plot_frame\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:plot_frame}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.plot_frame = ttk.Frame(self.frame)}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1888} of file {\b GWeasy.py}.}\par
}
{\xe \v result_label\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:result_label}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.result_label = ttk.Label(conversion_frame, text="Result: ")}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1869} of file {\b GWeasy.py}.}\par
}
{\xe \v root\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:root}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.root = root}}
\par
{\bkmkstart AAAAAAAAIE}
{\bkmkend AAAAAAAAIE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1793} of file {\b GWeasy.py}.}\par
}
{\xe \v run_dropdown\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:run_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.run_dropdown = ttk.Combobox(input_frame, state="readonly")}}
\par
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1830} of file {\b GWeasy.py}.}\par
}
{\xe \v save_button\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:save_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.save_button = ttk.Button(input_frame, text="Save Parameters", command=self.save_params)}}
\par
{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1886} of file {\b GWeasy.py}.}\par
}
{\xe \v scroll_x\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:scroll_x}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.scroll_x = ttk.Scrollbar({\b root}, orient="horizontal", command=self.canvas.xview)}}
\par
{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1800} of file {\b GWeasy.py}.}\par
}
{\xe \v scroll_y\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:scroll_y}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.scroll_y = ttk.Scrollbar({\b root}, orient="vertical", command=self.canvas.yview)}}
\par
{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1799} of file {\b GWeasy.py}.}\par
}
{\xe \v toggle_button\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:toggle_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.toggle_button = ttk.Button(conversion_frame, text="Switch to UTC \'E2\'86\'92 GPS", command=self.toggle_mode)}}
\par
{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1872} of file {\b GWeasy.py}.}\par
}
{\xe \v update_urls\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:update_urls}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.update_urls = "ew")}}
\par
{\bkmkstart AAAAAAAAIK}
{\bkmkend AAAAAAAAIK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1839} of file {\b GWeasy.py}.}\par
}
{\xe \v url_dropdown\:GWeasy.PSDs}
{\xe \v GWeasy.PSDs\:url_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.PSDs.url_dropdown = ttk.Combobox(url_frame, state="readonly")}}
\par
{\bkmkstart AAAAAAAAIL}
{\bkmkend AAAAAAAAIL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1879} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/HP/Desktop/docs/GWeasy/{\b GWeasy.py}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GWeasy.Spectrogram Class Reference\par \pard\plain 
{\tc\tcl2 \v GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram}
{\bkmkstart AAAAAAAAIM}
{\bkmkend AAAAAAAAIM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b __init__} (self, {\b root})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b prefetch_data} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fetch_events} (self, event=None)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fetch_event_details} (self, event=None)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b toggle_mode} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b convert_time} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b specgrams} (self, detectors, gps_start, gps_end, fftlengths, window, overlap)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b root} = root\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b canvas} = tk.Canvas({\b root})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b scroll_y} = ttk.Scrollbar({\b root}, orient="vertical", command=self.canvas.yview)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b scroll_x} = ttk.Scrollbar({\b root}, orient="horizontal", command=self.canvas.xview)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b frame} = ttk.Frame(self.canvas)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b catalog_dropdown} = ttk.Combobox(input_frame, state="readonly")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fetch_events} = "ew")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b event_dropdown} = ttk.Combobox(input_frame, state="readonly")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fetch_event_details} = "ew")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b detector_dropdown} = tk.Listbox(input_frame, selectmode="multiple", height=3)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b gps_start_entry} = ttk.Entry(input_frame, width=20)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b gps_end_entry} = ttk.Entry(input_frame, width=20)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fft_length_entry} = ttk.Entry(input_frame, width=10)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b window_entry} = ttk.Combobox(input_frame, width=10, values=["hann", "option2"], state="readonly")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b overlap_entry} = ttk.Entry(input_frame, width=20)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b mode} = tk.StringVar(value="gps_to_utc")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b convert_entry} = ttk.Entry(conversion_frame, width=20)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b convert_button} = ttk.Button(conversion_frame, text="Convert", command=self.convert_time)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b result_label} = ttk.Label(conversion_frame, text="Result: ")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b toggle_button} = ttk.Button(conversion_frame, text="Switch to UTC \'E2\'86\'92 GPS", command=self.toggle_mode)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b plot_button} = tk.Button({\b root}, text="Plot TimeSeries", command=lambda: self.specgrams([self.detector_dropdown.get(idx) for idx in self.detector_dropdown.curselection()],gps_start=float(self.gps_start_entry.get()),gps_end = float(self.gps_end_entry.get()),fftlengths=int(self.fft_length_entry.get()),window=self.window_entry.get(),overlap=self.overlap_entry.get()))\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 2107} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v __init__\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:__init__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.__init__ ( self,  root)}}
\par
{\bkmkstart AAAAAAAAIN}
{\bkmkend AAAAAAAAIN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2108} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v convert_time\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:convert_time}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.convert_time ( self)}}
\par
{\bkmkstart AAAAAAAAIO}
{\bkmkend AAAAAAAAIO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2248} of file {\b GWeasy.py}.}\par
}
{\xe \v fetch_event_details\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:fetch_event_details}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.fetch_event_details ( self,  event = {\f2 None})}}
\par
{\bkmkstart AAAAAAAAIP}
{\bkmkend AAAAAAAAIP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2224} of file {\b GWeasy.py}.}\par
}
{\xe \v fetch_events\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:fetch_events}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.fetch_events ( self,  event = {\f2 None})}}
\par
{\bkmkstart AAAAAAAAIQ}
{\bkmkend AAAAAAAAIQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2209} of file {\b GWeasy.py}.}\par
}
{\xe \v prefetch_data\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:prefetch_data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.prefetch_data ( self)}}
\par
{\bkmkstart AAAAAAAAIR}
{\bkmkend AAAAAAAAIR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2198} of file {\b GWeasy.py}.}\par
}
{\xe \v specgrams\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:specgrams}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.specgrams ( self,  detectors,  gps_start,  gps_end,  fftlengths,  window,  overlap)}}
\par
{\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2267} of file {\b GWeasy.py}.}\par
}
{\xe \v toggle_mode\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:toggle_mode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.toggle_mode ( self)}}
\par
{\bkmkstart AAAAAAAAIT}
{\bkmkend AAAAAAAAIT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2239} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v canvas\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:canvas}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.canvas = tk.Canvas({\b root})}}
\par
{\bkmkstart AAAAAAAAIU}
{\bkmkend AAAAAAAAIU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2114} of file {\b GWeasy.py}.}\par
}
{\xe \v catalog_dropdown\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:catalog_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.catalog_dropdown = ttk.Combobox(input_frame, state="readonly")}}
\par
{\bkmkstart AAAAAAAAIV}
{\bkmkend AAAAAAAAIV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2134} of file {\b GWeasy.py}.}\par
}
{\xe \v convert_button\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:convert_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.convert_button = ttk.Button(conversion_frame, text="Convert", command=self.convert_time)}}
\par
{\bkmkstart AAAAAAAAIW}
{\bkmkend AAAAAAAAIW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2183} of file {\b GWeasy.py}.}\par
}
{\xe \v convert_entry\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:convert_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.convert_entry = ttk.Entry(conversion_frame, width=20)}}
\par
{\bkmkstart AAAAAAAAIX}
{\bkmkend AAAAAAAAIX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2180} of file {\b GWeasy.py}.}\par
}
{\xe \v detector_dropdown\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:detector_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.detector_dropdown = tk.Listbox(input_frame, selectmode="multiple", height=3)}}
\par
{\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2146} of file {\b GWeasy.py}.}\par
}
{\xe \v event_dropdown\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:event_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.event_dropdown = ttk.Combobox(input_frame, state="readonly")}}
\par
{\bkmkstart AAAAAAAAIZ}
{\bkmkend AAAAAAAAIZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2140} of file {\b GWeasy.py}.}\par
}
{\xe \v fetch_event_details\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:fetch_event_details}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.fetch_event_details = "ew")}}
\par
{\bkmkstart AAAAAAAAJA}
{\bkmkend AAAAAAAAJA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2142} of file {\b GWeasy.py}.}\par
}
{\xe \v fetch_events\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:fetch_events}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.fetch_events = "ew")}}
\par
{\bkmkstart AAAAAAAAJB}
{\bkmkend AAAAAAAAJB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2136} of file {\b GWeasy.py}.}\par
}
{\xe \v fft_length_entry\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:fft_length_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.fft_length_entry = ttk.Entry(input_frame, width=10)}}
\par
{\bkmkstart AAAAAAAAJC}
{\bkmkend AAAAAAAAJC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2163} of file {\b GWeasy.py}.}\par
}
{\xe \v frame\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:frame}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.frame = ttk.Frame(self.canvas)}}
\par
{\bkmkstart AAAAAAAAJD}
{\bkmkend AAAAAAAAJD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2120} of file {\b GWeasy.py}.}\par
}
{\xe \v gps_end_entry\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:gps_end_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.gps_end_entry = ttk.Entry(input_frame, width=20)}}
\par
{\bkmkstart AAAAAAAAJE}
{\bkmkend AAAAAAAAJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2158} of file {\b GWeasy.py}.}\par
}
{\xe \v gps_start_entry\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:gps_start_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.gps_start_entry = ttk.Entry(input_frame, width=20)}}
\par
{\bkmkstart AAAAAAAAJF}
{\bkmkend AAAAAAAAJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2154} of file {\b GWeasy.py}.}\par
}
{\xe \v mode\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:mode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.mode = tk.StringVar(value="gps_to_utc")}}
\par
{\bkmkstart AAAAAAAAJG}
{\bkmkend AAAAAAAAJG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2176} of file {\b GWeasy.py}.}\par
}
{\xe \v overlap_entry\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:overlap_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.overlap_entry = ttk.Entry(input_frame, width=20)}}
\par
{\bkmkstart AAAAAAAAJH}
{\bkmkend AAAAAAAAJH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2172} of file {\b GWeasy.py}.}\par
}
{\xe \v plot_button\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:plot_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.plot_button = tk.Button({\b root}, text="Plot TimeSeries", command=lambda: self.specgrams([self.detector_dropdown.get(idx) for idx in self.detector_dropdown.curselection()],gps_start=float(self.gps_start_entry.get()),gps_end = float(self.gps_end_entry.get()),fftlengths=int(self.fft_length_entry.get()),window=self.window_entry.get(),overlap=self.overlap_entry.get()))}}
\par
{\bkmkstart AAAAAAAAJI}
{\bkmkend AAAAAAAAJI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2194} of file {\b GWeasy.py}.}\par
}
{\xe \v result_label\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:result_label}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.result_label = ttk.Label(conversion_frame, text="Result: ")}}
\par
{\bkmkstart AAAAAAAAJJ}
{\bkmkend AAAAAAAAJJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2186} of file {\b GWeasy.py}.}\par
}
{\xe \v root\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:root}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.root = root}}
\par
{\bkmkstart AAAAAAAAJK}
{\bkmkend AAAAAAAAJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2109} of file {\b GWeasy.py}.}\par
}
{\xe \v scroll_x\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:scroll_x}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.scroll_x = ttk.Scrollbar({\b root}, orient="horizontal", command=self.canvas.xview)}}
\par
{\bkmkstart AAAAAAAAJL}
{\bkmkend AAAAAAAAJL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2116} of file {\b GWeasy.py}.}\par
}
{\xe \v scroll_y\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:scroll_y}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.scroll_y = ttk.Scrollbar({\b root}, orient="vertical", command=self.canvas.yview)}}
\par
{\bkmkstart AAAAAAAAJM}
{\bkmkend AAAAAAAAJM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2115} of file {\b GWeasy.py}.}\par
}
{\xe \v toggle_button\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:toggle_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.toggle_button = ttk.Button(conversion_frame, text="Switch to UTC \'E2\'86\'92 GPS", command=self.toggle_mode)}}
\par
{\bkmkstart AAAAAAAAJN}
{\bkmkend AAAAAAAAJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2189} of file {\b GWeasy.py}.}\par
}
{\xe \v window_entry\:GWeasy.Spectrogram}
{\xe \v GWeasy.Spectrogram\:window_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.Spectrogram.window_entry = ttk.Combobox(input_frame, width=10, values=["hann", "option2"], state="readonly")}}
\par
{\bkmkstart AAAAAAAAJO}
{\bkmkend AAAAAAAAJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 2167} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/HP/Desktop/docs/GWeasy/{\b GWeasy.py}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GWeasy.TerminalFrame Class Reference\par \pard\plain 
{\tc\tcl2 \v GWeasy.TerminalFrame}
{\xe \v GWeasy.TerminalFrame}
{\bkmkstart AAAAAAAAJP}
{\bkmkend AAAAAAAAJP}
Inheritance diagram for GWeasy.TerminalFrame:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d0/d2f/class_g_weasy_1_1_terminal_frame__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for GWeasy.TerminalFrame:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "dd/d3b/class_g_weasy_1_1_terminal_frame__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b __init__} (self, parent, row, column, rowspan=1, columnspan=1, height=15, width=100)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b append_output} (self, text, color="white")\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b output_text}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 84} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v __init__\:GWeasy.TerminalFrame}
{\xe \v GWeasy.TerminalFrame\:__init__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TerminalFrame.__init__ ( self,  parent,  row,  column,  rowspan = {\f2 1},  columnspan = {\f2 1},  height = {\f2 15},  width = {\f2 100})}}
\par
{\bkmkstart AAAAAAAAJQ}
{\bkmkend AAAAAAAAJQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 85} of file {\b GWeasy.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "dd/db1/class_g_weasy_1_1_terminal_frame_a95fe51eb7c7b6076404a16dd59f6ef7b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "dd/db1/class_g_weasy_1_1_terminal_frame_a95fe51eb7c7b6076404a16dd59f6ef7b_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v append_output\:GWeasy.TerminalFrame}
{\xe \v GWeasy.TerminalFrame\:append_output}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TerminalFrame.append_output ( self,  text,  color = {\f2 "white"})}}
\par
{\bkmkstart AAAAAAAAJR}
{\bkmkend AAAAAAAAJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Append text to the terminal and auto-scroll.}
 \par
}{
Definition at line {\b 98} of file {\b GWeasy.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "dd/db1/class_g_weasy_1_1_terminal_frame_a6c6f56116c93ef28c984f0541217a8be_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v output_text\:GWeasy.TerminalFrame}
{\xe \v GWeasy.TerminalFrame\:output_text}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TerminalFrame.output_text}}
\par
{\bkmkstart AAAAAAAAJS}
{\bkmkend AAAAAAAAJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid =  scrolledtext.ScrolledText(self, wrap=tk.WORD, \par
                                                     bg={\cf22 "black"}, fg={\cf22 "white"},\par
                                                     font=({\cf22 "Courier"}, 10),\par
                                                     height=height, width=width)\par
}
{
Definition at line {\b 89} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/HP/Desktop/docs/GWeasy/{\b GWeasy.py}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GWeasy.TimeSrswaveform Class Reference\par \pard\plain 
{\tc\tcl2 \v GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform}
{\bkmkstart AAAAAAAAJT}
{\bkmkend AAAAAAAAJT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b __init__} (self, {\b root})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b copy_url} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b prefetch_data} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fetch_events} (self, event=None)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fetch_event_details} (self, event=None)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b update_urls} (self, event=None)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b toggle_mode} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b convert_time} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b save_params} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b plot_gw_event} (self, event_name, detectors, gps_start, gps_end)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b root} = root\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b canvas} = tk.Canvas({\b root})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b scroll_y} = ttk.Scrollbar({\b root}, orient="vertical", command=self.canvas.yview)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b scroll_x} = ttk.Scrollbar({\b root}, orient="horizontal", command=self.canvas.xview)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b frame} = ttk.Frame(self.canvas)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b catalog_dropdown} = ttk.Combobox(input_frame, state="readonly")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fetch_events} = "ew")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b event_dropdown} = ttk.Combobox(input_frame, state="readonly")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fetch_event_details} = "ew")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b run_dropdown} = ttk.Combobox(input_frame, state="readonly")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b detector_dropdown} = tk.Listbox(input_frame, selectmode="multiple", height=3)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b update_urls} = "ew")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b gps_start_entry} = ttk.Entry(input_frame, width=20)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b gps_end_entry} = ttk.Entry(input_frame, width=20)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b mode} = tk.StringVar(value="gps_to_utc")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b convert_entry} = ttk.Entry(conversion_frame, width=20)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b convert_button} = ttk.Button(conversion_frame, text="Convert", command=self.convert_time)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b result_label} = ttk.Label(conversion_frame, text="Result: ")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b toggle_button} = ttk.Button(conversion_frame, text="Switch to UTC \'E2\'86\'92 GPS", command=self.toggle_mode)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b url_dropdown} = ttk.Combobox(url_frame, state="readonly")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b copy_button} = ttk.Button(url_frame, text="Copy URL", command=self.copy_url)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b save_button} = ttk.Button(input_frame, text="Save Parameters", command=self.save_params)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b plot_frame} = ttk.Frame(self.frame)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b plot_button} = tk.Button({\b root}, text="Plot TimeSeries", command=lambda: self.plot_gw_event(self.catalog_dropdown.get(),[self.detector_dropdown.get(idx) for idx in self.detector_dropdown.curselection()],float(self.gps_start_entry.get()),float(self.gps_end_entry.get())))\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 1231} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v __init__\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:__init__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.__init__ ( self,  root)}}
\par
{\bkmkstart AAAAAAAAJU}
{\bkmkend AAAAAAAAJU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1232} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v convert_time\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:convert_time}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.convert_time ( self)}}
\par
{\bkmkstart AAAAAAAAJV}
{\bkmkend AAAAAAAAJV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1412} of file {\b GWeasy.py}.}\par
}
{\xe \v copy_url\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:copy_url}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.copy_url ( self)}}
\par
{\bkmkstart AAAAAAAAJW}
{\bkmkend AAAAAAAAJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1328} of file {\b GWeasy.py}.}\par
}
{\xe \v fetch_event_details\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:fetch_event_details}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.fetch_event_details ( self,  event = {\f2 None})}}
\par
{\bkmkstart AAAAAAAAJX}
{\bkmkend AAAAAAAAJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1371} of file {\b GWeasy.py}.}\par
}
{\xe \v fetch_events\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:fetch_events}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.fetch_events ( self,  event = {\f2 None})}}
\par
{\bkmkstart AAAAAAAAJY}
{\bkmkend AAAAAAAAJY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1355} of file {\b GWeasy.py}.}\par
}
{\xe \v plot_gw_event\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:plot_gw_event}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.plot_gw_event ( self,  event_name,  detectors,  gps_start,  gps_end)}}
\par
{\bkmkstart AAAAAAAAJZ}
{\bkmkend AAAAAAAAJZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Plot gravitational wave event data for multiple detectors.}
 \par
}{
Definition at line {\b 1462} of file {\b GWeasy.py}.}\par
}
{\xe \v prefetch_data\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:prefetch_data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.prefetch_data ( self)}}
\par
{\bkmkstart AAAAAAAAKA}
{\bkmkend AAAAAAAAKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1339} of file {\b GWeasy.py}.}\par
}
{\xe \v save_params\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:save_params}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.save_params ( self)}}
\par
{\bkmkstart AAAAAAAAKB}
{\bkmkend AAAAAAAAKB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Overwrite 'gwfparams.csv' with the latest input values, including headers.}
 \par
}{
Definition at line {\b 1432} of file {\b GWeasy.py}.}\par
}
{\xe \v toggle_mode\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:toggle_mode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.toggle_mode ( self)}}
\par
{\bkmkstart AAAAAAAAKC}
{\bkmkend AAAAAAAAKC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1403} of file {\b GWeasy.py}.}\par
}
{\xe \v update_urls\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:update_urls}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.update_urls ( self,  event = {\f2 None})}}
\par
{\bkmkstart AAAAAAAAKD}
{\bkmkend AAAAAAAAKD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1386} of file {\b GWeasy.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d5/d54/class_g_weasy_1_1_time_srswaveform_a10ce0b68c09f43a0d9fbad1e3ae75d6b_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v canvas\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:canvas}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.canvas = tk.Canvas({\b root})}}
\par
{\bkmkstart AAAAAAAAKE}
{\bkmkend AAAAAAAAKE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1238} of file {\b GWeasy.py}.}\par
}
{\xe \v catalog_dropdown\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:catalog_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.catalog_dropdown = ttk.Combobox(input_frame, state="readonly")}}
\par
{\bkmkstart AAAAAAAAKF}
{\bkmkend AAAAAAAAKF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1258} of file {\b GWeasy.py}.}\par
}
{\xe \v convert_button\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:convert_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.convert_button = ttk.Button(conversion_frame, text="Convert", command=self.convert_time)}}
\par
{\bkmkstart AAAAAAAAKG}
{\bkmkend AAAAAAAAKG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1298} of file {\b GWeasy.py}.}\par
}
{\xe \v convert_entry\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:convert_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.convert_entry = ttk.Entry(conversion_frame, width=20)}}
\par
{\bkmkstart AAAAAAAAKH}
{\bkmkend AAAAAAAAKH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1295} of file {\b GWeasy.py}.}\par
}
{\xe \v copy_button\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:copy_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.copy_button = ttk.Button(url_frame, text="Copy URL", command=self.copy_url)}}
\par
{\bkmkstart AAAAAAAAKI}
{\bkmkend AAAAAAAAKI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1314} of file {\b GWeasy.py}.}\par
}
{\xe \v detector_dropdown\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:detector_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.detector_dropdown = tk.Listbox(input_frame, selectmode="multiple", height=3)}}
\par
{\bkmkstart AAAAAAAAKJ}
{\bkmkend AAAAAAAAKJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1275} of file {\b GWeasy.py}.}\par
}
{\xe \v event_dropdown\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:event_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.event_dropdown = ttk.Combobox(input_frame, state="readonly")}}
\par
{\bkmkstart AAAAAAAAKK}
{\bkmkend AAAAAAAAKK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1264} of file {\b GWeasy.py}.}\par
}
{\xe \v fetch_event_details\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:fetch_event_details}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.fetch_event_details = "ew")}}
\par
{\bkmkstart AAAAAAAAKL}
{\bkmkend AAAAAAAAKL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1266} of file {\b GWeasy.py}.}\par
}
{\xe \v fetch_events\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:fetch_events}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.fetch_events = "ew")}}
\par
{\bkmkstart AAAAAAAAKM}
{\bkmkend AAAAAAAAKM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1260} of file {\b GWeasy.py}.}\par
}
{\xe \v frame\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:frame}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.frame = ttk.Frame(self.canvas)}}
\par
{\bkmkstart AAAAAAAAKN}
{\bkmkend AAAAAAAAKN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1244} of file {\b GWeasy.py}.}\par
}
{\xe \v gps_end_entry\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:gps_end_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.gps_end_entry = ttk.Entry(input_frame, width=20)}}
\par
{\bkmkstart AAAAAAAAKO}
{\bkmkend AAAAAAAAKO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1287} of file {\b GWeasy.py}.}\par
}
{\xe \v gps_start_entry\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:gps_start_entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.gps_start_entry = ttk.Entry(input_frame, width=20)}}
\par
{\bkmkstart AAAAAAAAKP}
{\bkmkend AAAAAAAAKP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1283} of file {\b GWeasy.py}.}\par
}
{\xe \v mode\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:mode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.mode = tk.StringVar(value="gps_to_utc")}}
\par
{\bkmkstart AAAAAAAAKQ}
{\bkmkend AAAAAAAAKQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1291} of file {\b GWeasy.py}.}\par
}
{\xe \v plot_button\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:plot_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.plot_button = tk.Button({\b root}, text="Plot TimeSeries", command=lambda: self.plot_gw_event(self.catalog_dropdown.get(),[self.detector_dropdown.get(idx) for idx in self.detector_dropdown.curselection()],float(self.gps_start_entry.get()),float(self.gps_end_entry.get())))}}
\par
{\bkmkstart AAAAAAAAKR}
{\bkmkend AAAAAAAAKR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1324} of file {\b GWeasy.py}.}\par
}
{\xe \v plot_frame\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:plot_frame}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.plot_frame = ttk.Frame(self.frame)}}
\par
{\bkmkstart AAAAAAAAKS}
{\bkmkend AAAAAAAAKS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1320} of file {\b GWeasy.py}.}\par
}
{\xe \v result_label\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:result_label}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.result_label = ttk.Label(conversion_frame, text="Result: ")}}
\par
{\bkmkstart AAAAAAAAKT}
{\bkmkend AAAAAAAAKT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1301} of file {\b GWeasy.py}.}\par
}
{\xe \v root\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:root}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.root = root}}
\par
{\bkmkstart AAAAAAAAKU}
{\bkmkend AAAAAAAAKU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1233} of file {\b GWeasy.py}.}\par
}
{\xe \v run_dropdown\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:run_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.run_dropdown = ttk.Combobox(input_frame, state="readonly")}}
\par
{\bkmkstart AAAAAAAAKV}
{\bkmkend AAAAAAAAKV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1270} of file {\b GWeasy.py}.}\par
}
{\xe \v save_button\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:save_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.save_button = ttk.Button(input_frame, text="Save Parameters", command=self.save_params)}}
\par
{\bkmkstart AAAAAAAAKW}
{\bkmkend AAAAAAAAKW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1318} of file {\b GWeasy.py}.}\par
}
{\xe \v scroll_x\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:scroll_x}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.scroll_x = ttk.Scrollbar({\b root}, orient="horizontal", command=self.canvas.xview)}}
\par
{\bkmkstart AAAAAAAAKX}
{\bkmkend AAAAAAAAKX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1240} of file {\b GWeasy.py}.}\par
}
{\xe \v scroll_y\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:scroll_y}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.scroll_y = ttk.Scrollbar({\b root}, orient="vertical", command=self.canvas.yview)}}
\par
{\bkmkstart AAAAAAAAKY}
{\bkmkend AAAAAAAAKY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1239} of file {\b GWeasy.py}.}\par
}
{\xe \v toggle_button\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:toggle_button}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.toggle_button = ttk.Button(conversion_frame, text="Switch to UTC \'E2\'86\'92 GPS", command=self.toggle_mode)}}
\par
{\bkmkstart AAAAAAAAKZ}
{\bkmkend AAAAAAAAKZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1304} of file {\b GWeasy.py}.}\par
}
{\xe \v update_urls\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:update_urls}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.update_urls = "ew")}}
\par
{\bkmkstart AAAAAAAALA}
{\bkmkend AAAAAAAALA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1279} of file {\b GWeasy.py}.}\par
}
{\xe \v url_dropdown\:GWeasy.TimeSrswaveform}
{\xe \v GWeasy.TimeSrswaveform\:url_dropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GWeasy.TimeSrswaveform.url_dropdown = ttk.Combobox(url_frame, state="readonly")}}
\par
{\bkmkstart AAAAAAAALB}
{\bkmkend AAAAAAAALB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1311} of file {\b GWeasy.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/HP/Desktop/docs/GWeasy/{\b GWeasy.py}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/HP/Desktop/docs/GWeasy/GWeasy.py File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/HP/Desktop/docs/GWeasy/GWeasy.py}
{\xe \v C:/Users/HP/Desktop/docs/GWeasy/GWeasy.py}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b GWeasy.Application}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b GWeasy.TerminalFrame}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b GWeasy.OmicronApp}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b GWeasy.GravfetchApp}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b GWeasy.GWOSCApp}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b GWeasy.Omiviz}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b GWeasy.TimeSrswaveform}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b GWeasy.FFT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b GWeasy.PSDs}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b GWeasy.Spectrogram}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b GWeasy}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b GWeasy.filename}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b GWeasy.level}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b GWeasy.format}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
str {\b GWeasy.HISTORY_FILE} = "gravfetch_history.json"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b GWeasy.root} = tk.Tk()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b GWeasy.app} = {\b Application}({\b root})\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GWeasy.py\par \pard\plain 
{\tc\tcl2 \v C:/Users/HP/Desktop/docs/GWeasy/GWeasy.py}
{\xe \v C:/Users/HP/Desktop/docs/GWeasy/GWeasy.py}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf17 import} tkinter {\cf17 as} tk\par
00002 {\cf17 from} tkinter {\cf17 import} filedialog, scrolledtext, ttk,Canvas,messagebox,Entry, Button\par
00003 {\cf17 import} threading\par
00004 {\cf17 import} subprocess\par
00005 {\cf17 import} os\par
00006 {\cf17 from} PIL {\cf17 import} Image, ImageTk\par
00007 {\cf17 from} cefpython3 {\cf17 import} cefpython {\cf17 as} cef\par
00008 {\cf17 import} sys\par
00009 {\cf17 import} pandas {\cf17 as} pd\par
00010 {\cf17 from} gwpy.timeseries {\cf17 import} TimeSeries\par
00011 {\cf17 import} json\par
00012 {\cf17 import} logging\par
00013 {\cf17 from} PIL {\cf17 import} Image, ImageTk\par
00014 {\cf17 from} gwosc.datasets {\cf17 import} find_datasets, event_gps\par
00015 {\cf17 from} gwosc.locate {\cf17 import} get_event_urls\par
00016 {\cf17 from} gwpy {\cf17 import} time {\cf17 as} gp_time\par
00017 {\cf17 from} gwosc {\cf17 import} datasets\par
00018 {\cf17 from} datetime {\cf17 import} datetime\par
00019 {\cf17 from} gwpy.timeseries {\cf17 import} TimeSeries\par
00020 {\cf17 from} scipy.signal {\cf17 import} get_window\par
00021 {\cf17 import} matplotlib.pyplot {\cf17 as} plt\par
00022 {\cf17 from} matplotlib.backends.backend_tkagg {\cf17 import} FigureCanvasTkAgg, NavigationToolbar2Tk\par
00023 {\cf17 import} csv\par
00024 \par
00025 {\cf20 # Configure logging}\par
00026 logging.basicConfig(\par
00027     filename={\cf22 "omicron_plot.log"},\par
00028     level=logging.DEBUG,\par
00029     format={\cf22 "%(asctime)s - %(levelname)s - %(message)s"},\par
00030 )\par
00031 HISTORY_FILE = {\cf22 "gravfetch_history.json"}  {\cf20 # Define history file}\par
00032 \par
00033 \par
00034 {\cf17 class }Application:\par
00035     \par
00036     {\cf17 def }__init__(self, root):\par
00037         self.root = root\par
00038         self.root.title({\cf22 "GWEasy"})\par
00039         self.root.geometry({\cf22 "1024x768"})\par
00040         {\cf20 # Setup the main notebook (tab structure)}\par
00041         self.notebook = ttk.Notebook(self.root)\par
00042         self.notebook.grid(row=0, column=0, sticky={\cf22 "nsew"})\par
00043         \par
00044         {\cf20 # Configure root window to allow resizing}\par
00045         self.root.grid_rowconfigure(0, weight=1)\par
00046         self.root.grid_columnconfigure(0, weight=1)\par
00047         self.gwosc_tab = ttk.Frame(self.notebook)\par
00048         self.notebook.add(self.gwosc_tab, text={\cf22 "GWOSCRef"})\par
00049         self.gwosc_tab = GWOSCApp(self.gwosc_tab,self.root)\par
00050         {\cf20 # Add the first tab for script execution (Gravfetch)}\par
00051         self.gravfetch_tab = ttk.Frame(self.notebook)\par
00052         self.notebook.add(self.gravfetch_tab, text={\cf22 "Gravfetch"})\par
00053 \par
00054         {\cf20 # Add the second tab for OMICRON}\par
00055         self.omicron_tab = ttk.Frame(self.notebook)\par
00056         self.notebook.add(self.omicron_tab, text={\cf22 "OMICRON"})\par
00057         \par
00058         {\cf20 # Omiviz Tab (NEW)}\par
00059         self.omiviz_tab = ttk.Frame(self.notebook)\par
00060         self.notebook.add(self.omiviz_tab, text={\cf22 "Omiviz"})\par
00061      \par
00062         self.TimeSeriesWav = ttk.Frame(self.notebook)\par
00063         self.notebook.add(self.TimeSeriesWav, text={\cf22 "TimeSeriesWav"})\par
00064 \par
00065         self.FFT = ttk.Frame(self.notebook)\par
00066         self.notebook.add(self.FFT, text={\cf22 "FFT"})\par
00067 \par
00068         self.PSDs = ttk.Frame(self.notebook)\par
00069         self.notebook.add(self.PSDs, text={\cf22 "Power Spectral Density"})\par
00070 \par
00071         self.Spectrogram = ttk.Frame(self.notebook)\par
00072         self.notebook.add(self.Spectrogram, text={\cf22 "Spectrogram"})\par
00073 \par
00074         {\cf20 # Initialize both GUIs (Gravfetch and OMICRON) in their respective tabs}\par
00075         self.gravfetch_app = GravfetchApp(self.gravfetch_tab)\par
00076         self.omicron_app = OmicronApp(self.omicron_tab)\par
00077         self.omiviz_app = Omiviz(self.omiviz_tab)  {\cf20 # Add Omiviz GUI}\par
00078         self.TimeSeriesWav_app = TimeSrswaveform(self.TimeSeriesWav) \par
00079         self.FFT = FFT(self.FFT)\par
00080         self.PSDs = PSDs(self.PSDs)\par
00081         self.Spectrogram=Spectrogram(self.Spectrogram)\par
00082          \par
00083         \par
00084 {\cf17 class }TerminalFrame(tk.Frame):\par
00085     {\cf17 def }__init__(self, parent, row, column, rowspan=1, columnspan=1, height=15, width=100):\par
00086         super().__init__(parent)\par
00087 \par
00088         {\cf20 # Configure terminal output widget}\par
00089         self.output_text = scrolledtext.ScrolledText(self, wrap=tk.WORD, \par
00090                                                      bg={\cf22 "black"}, fg={\cf22 "white"},\par
00091                                                      font=({\cf22 "Courier"}, 10),\par
00092                                                      height=height, width=width)\par
00093         self.output_text.grid(row=0, column=0, sticky={\cf22 "nsew"}, padx=5, pady=5)\par
00094         self.output_text.config(state={\cf22 "disabled"})  {\cf20 # Prevent user editing}\par
00095         {\cf20 # Place frame using grid}\par
00096         self.grid(row=row, column=column, rowspan=rowspan, columnspan=columnspan, sticky={\cf22 "nsew"}, padx=10, pady=10)\par
00097 \par
00098     {\cf17 def }append_output(self, text, color="white"):\par
00099         {\cf22 """Append text to the terminal and auto-scroll."""}\par
00100         self.output_text.config(state={\cf22 "normal"})\par
00101         self.output_text.insert(tk.END, text + {\cf22 "\\n"})\par
00102         self.output_text.yview(tk.END)  {\cf20 # Auto-scroll to latest output}\par
00103         self.output_text.config(state={\cf22 "disabled"})\par
00104 \par
00105 \par
00106 {\cf17 class }OmicronApp:\par
00107     {\cf17 def }__init__(self, root):\par
00108         self.root = root\par
00109         self.config_path = {\cf22 "config.txt"}\par
00110         self.config_data = \{\}\par
00111         self.entries = \{\}\par
00112         self.output_products = \{\}\par
00113         self.ui_elements = \{\}\par
00114        \par
00115         self.project_dir = os.getcwd().replace({\cf22 "\\\\"}, {\cf22 "/"})  \par
00116         self.wsl_project_dir = f{\cf22 "/mnt/\{self.project_dir[0].lower()\}/\{self.project_dir[2:]\}"}  \par
00117         print(f{\cf22 "WSL Project Directory: \{self.wsl_project_dir\}"})  {\cf20 # Debugging output}\par
00118         self.GWFOUT_DIRECTORY = {\cf22 "./gwfout"}\par
00119    \par
00120         {\cf20 # Scrollable Frame}\par
00121         self.canvas = tk.Canvas(root)\par
00122         self.scrollbar = ttk.Scrollbar(root, orient={\cf22 "vertical"}, command=self.canvas.yview)\par
00123         self.scrollable_frame = ttk.Frame(self.canvas)\par
00124 \par
00125         self.scrollable_frame.bind(\par
00126             {\cf22 "<Configure>"},\par
00127             {\cf17 lambda} e: self.canvas.configure(scrollregion=self.canvas.bbox({\cf22 "all"}))\par
00128         )\par
00129 \par
00130         self.window_frame = self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor={\cf22 "nw"})\par
00131         self.canvas.configure(yscrollcommand=self.scrollbar.set)\par
00132         self.canvas.grid(row=0, column=0, sticky={\cf22 "nsew"})\par
00133         self.scrollbar.grid(row=0, column=1, sticky={\cf22 "ns"})\par
00134         self.root.grid_rowconfigure(0, weight=1)\par
00135         self.root.grid_columnconfigure(0, weight=1)\par
00136 \par
00137         {\cf20 # Terminal Output}\par
00138         {\cf20 # Use shared terminal frame}\par
00139         self.terminal = TerminalFrame(self.root, row=4, column=0, columnspan=2, height=10, width=80)  {\cf20 # Pass the shared terminal instance}\par
00140         self.scrollable_frame.grid_columnconfigure(0, weight=1)\par
00141         self.create_widgets()\par
00142         self.load_config()\par
00143     {\cf17 def }create_widgets(self):\par
00144         self.create_channel_dropdown(row=1)\par
00145         self.create_file_selector({\cf22 "Select .ffl File:"}, {\cf22 "DATA FFL"},row=2,column=0)\par
00146         self.create_editable_dropdown({\cf22 "Sampling Frequency:"}, {\cf22 "DATA SAMPLEFREQUENCY"}, [{\cf22 "1024"}, {\cf22 "2048"}, {\cf22 "4096"}], row=3, column=0)\par
00147 \par
00148         {\cf20 # Ensure proper column expansion}\par
00149         {\cf19 for} i {\cf19 in} range(4):\par
00150             self.scrollable_frame.grid_columnconfigure(i, weight=1)\par
00151 \par
00152 \par
00153         {\cf20 # Button Frame}\par
00154         button_frame = tk.Frame(self.scrollable_frame,bd=2, relief={\cf22 "groove"}, padx=5, pady=5)\par
00155         button_frame.grid(row=10, column=0, columnspan=4, pady=10, sticky={\cf22 "ew"})\par
00156         self.custom_segs_btn = tk.Button(button_frame, text={\cf22 "Custom Segs"}, command=self.open_custom_segs_dialog)\par
00157         self.custom_segs_btn.pack(side={\cf22 "left"}, padx=20)  {\cf20 # Adjust position as needed}\par
00158         self.save_button = tk.Button(button_frame, text={\cf22 "Save Config"}, command=self.save_config)\par
00159         self.save_button.pack(side={\cf22 "left"}, padx=20)  \par
00160         self.start_button = tk.Button(button_frame, text={\cf22 "Start OMICRON"}, command=self.run_omicron_script)\par
00161         self.start_button.pack(side={\cf22 "left"}, padx=20)  \par
00162        \par
00163         {\cf20 # Parameter Frame}\par
00164         param_frame = tk.Frame(self.scrollable_frame,bd=2, relief={\cf22 "groove"}, padx=5, pady=5)\par
00165         param_frame.grid(row=11, column=0, columnspan=4, pady=10, sticky={\cf22 "ew"})\par
00166         self.create_double_entry({\cf22 "Timing:"}, {\cf22 "PARAMETER TIMING"}, param_frame, 0, 0)\par
00167         self.create_double_entry({\cf22 "Frequency Range:"}, {\cf22 "PARAMETER FREQUENCYRANGE"}, param_frame, 0, 10)\par
00168         self.create_double_entry({\cf22 "Q-Range:"}, {\cf22 "PARAMETER QRANGE"}, param_frame, 1, 0)\par
00169         self.create_entry({\cf22 "Mismatch Max:"}, {\cf22 "PARAMETER MISMATCHMAX"}, param_frame, 1, 10)\par
00170         self.create_entry({\cf22 "SNR Threshold:"}, {\cf22 "PARAMETER SNRTHRESHOLD"}, param_frame, 2, 0)\par
00171         self.create_entry({\cf22 "PSD Length:"}, {\cf22 "PARAMETER PSDLENGTH"}, param_frame, 2, 10)\par
00172         {\cf20 # Output Frame}\par
00173         output_frame = tk.Frame(self.scrollable_frame, bd=2, relief={\cf22 "groove"}, padx=5, pady=5)\par
00174         output_frame.grid(row=12, column=0, columnspan=4, pady=10, sticky={\cf22 "ew"})\par
00175         self.create_folder_selector({\cf22 "Select Output Directory:"}, {\cf22 "OUTPUT DIRECTORY"}, is_directory={\cf17 True}, frame=output_frame,row=13,column=0)\par
00176         self.create_output_products_selection(output_frame, row=14, column=0)\par
00177         self.create_dropdown({\cf22 "Select Format:"}, {\cf22 "OUTPUT FORMAT"}, [{\cf22 "root"}, {\cf22 "hdf5"}, {\cf22 "Format3"}], frame=output_frame,row=15,column=0)\par
00178         self.create_slider({\cf22 "Verbosity (0-3):"}, {\cf22 "OUTPUT VERBOSITY"}, 0, 3, frame=output_frame,row=16,column=0)\par
00179 \par
00180 \par
00181     {\cf20 #Parameters entry }\par
00182     {\cf17 def }create_entry(self, label, key, frame=None, row=0, col=0):\par
00183         target_frame = frame {\cf19 if} frame {\cf19 else} self.scrollable_frame\par
00184         tk.Label(target_frame, text=label).grid(row=row, column=col, sticky={\cf22 "w"}, padx=5, pady=5)\par
00185         var = tk.StringVar(value=self.config_data.get(key, {\cf22 ""}))\par
00186         entry = tk.Entry(target_frame, textvariable=var, width=15)  {\cf20 # Uniform width}\par
00187         entry.grid(row=row, column=col + 1, sticky={\cf22 "ew"}, padx=5, pady=5)\par
00188         self.ui_elements[key] = var\par
00189 \par
00190     {\cf17 def }create_double_entry(self, label, key, frame=None, row=0, col=0):\par
00191         target_frame = frame {\cf19 if} frame {\cf19 else} self.scrollable_frame\par
00192         tk.Label(target_frame, text=label).grid(row=row, column=col, sticky={\cf22 "w"}, padx=5, pady=5)\par
00193         var1 = tk.StringVar()\par
00194         var2 = tk.StringVar()\par
00195         entry_width = 15  {\cf20 # Same width for both fields}\par
00196         entry1 = tk.Entry(target_frame, textvariable=var1, width=entry_width)\par
00197         entry2 = tk.Entry(target_frame, textvariable=var2, width=entry_width)\par
00198         entry1.grid(row=row, column=col + 1, sticky={\cf22 "ew"}, padx=5, pady=5)\par
00199         entry2.grid(row=row, column=col + 2, sticky={\cf22 "ew"}, padx=5, pady=5)\par
00200         self.ui_elements[key] = (var1, var2)\par
00201 \par
00202     {\cf20 #Output fields }\par
00203     {\cf17 def }create_file_selector(self, label, key, is_directory=False, frame=None,row=0,column=0):\par
00204         {\cf22 """Creates a file/directory selector inside the given frame (or default to scrollable_frame)."""}\par
00205         target_frame = frame {\cf19 if} frame {\cf19 else} self.scrollable_frame\par
00206         tk.Label(target_frame, text=label).grid(row=row, column=column, sticky={\cf22 "w"}, padx=5, pady=5)\par
00207         var = tk.StringVar(value=self.config_data.get(key, {\cf22 ""}))  {\cf20 # Preserve previous selection}\par
00208         button = tk.Button(target_frame, text={\cf22 "Select"}, command={\cf17 lambda}: self.select_file(var))\par
00209         button.grid(row=row, column=2,columnspan=5, padx=5, pady=5)\par
00210         entry = tk.Entry(target_frame, textvariable=var, width=40, state={\cf22 "readonly"})\par
00211         entry.grid(row=row, column=1, sticky={\cf22 "ew"}, padx=5, pady=5)\par
00212         self.ui_elements[key] = var\par
00213 \par
00214     {\cf17 def }create_folder_selector(self, label, key, is_directory=False, frame=None, row=0, column=0):\par
00215         {\cf22 """Creates a file/directory selector inside the given frame (or default to scrollable_frame).}\par
00216 {\cf22         Ensures paths are relative to the current working directory and creates the directory if missing.}\par
00217 {\cf22         Returns the selected relative path.}\par
00218 {\cf22         """}\par
00219         target_frame = frame {\cf19 if} frame {\cf19 else} self.scrollable_frame\par
00220         \par
00221         {\cf20 # Label for the field}\par
00222         tk.Label(target_frame, text=label).grid(row=row, column=column, sticky={\cf22 "w"}, padx=5, pady=5)\par
00223 \par
00224         {\cf20 # Get stored path or set a default}\par
00225         var = tk.StringVar(value=self.config_data.get(key, {\cf22 ""}))\par
00226         dir_path = var.get().strip()\par
00227 \par
00228         {\cf19 if} {\cf19 not} dir_path:\par
00229             {\cf20 # Default output directory: "./OmicronOut"}\par
00230             dir_path = os.path.join(os.getcwd(), {\cf22 "OmicronOut"})\par
00231 \par
00232         {\cf20 # Convert to absolute, then to a relative path}\par
00233         abs_path = os.path.abspath(dir_path)\par
00234         rel_path = os.path.relpath(abs_path, os.getcwd())\par
00235 \par
00236         {\cf20 # Ensure the relative path uses Unix-style slashes and starts with "./" or "../"}\par
00237         rel_path = rel_path.replace({\cf22 "\\\\"}, {\cf22 "/"})\par
00238         {\cf19 if} {\cf19 not} rel_path.startswith({\cf22 "."}) {\cf19 and} {\cf19 not} rel_path.startswith({\cf22 ".."}):\par
00239             rel_path = f{\cf22 "./\{rel_path\}"}\par
00240 \par
00241         var.set(rel_path)\par
00242 \par
00243         {\cf20 # Ensure directory exists}\par
00244         {\cf19 if} {\cf19 not} os.path.exists(abs_path):\par
00245             os.makedirs(abs_path, exist_ok={\cf17 True})\par
00246             self.append_output(f{\cf22 "Created missing directory: \{rel_path\}\\n"})\par
00247 \par
00248         {\cf20 # Readonly Entry Field to display selected path}\par
00249         entry = tk.Entry(target_frame, textvariable=var, width=50, state={\cf22 "readonly"})\par
00250         entry.grid(row=row, column=1, sticky={\cf22 "ew"}, padx=5, pady=5)\par
00251 \par
00252         {\cf20 # Select Button for File/Folder}\par
00253         button = tk.Button(target_frame, text={\cf22 "Select"}, command={\cf17 lambda}: self.select_file(var, is_directory))\par
00254         button.grid(row=row, column=2, padx=5, pady=5)\par
00255 \par
00256         {\cf20 # Store the variable reference}\par
00257         self.ui_elements[key] = var\par
00258         \par
00259         {\cf20 # Return the selected relative path}\par
00260         {\cf19 return} rel_path\par
00261 \par
00262     {\cf17 def }create_output_products_selection(self, frame=None, row=0, column=0):\par
00263         {\cf22 """Creates checkboxes for selecting output products inside a given frame."""}\par
00264         target_frame = frame {\cf19 if} frame {\cf19 else} self.scrollable_frame\par
00265         tk.Label(target_frame, text={\cf22 "Select Output Products:"}).grid(row=row,column=column, sticky={\cf22 "w"}, padx=5, pady=5)\par
00266         self.ui_elements[{\cf22 "OUTPUT PRODUCTS"}] = \{\}\par
00267         product_options = [{\cf22 "triggers"}, {\cf22 "html"}]\par
00268         {\cf19 for} idx, product {\cf19 in} enumerate(product_options):\par
00269             var = tk.BooleanVar(value=product {\cf19 in} self.config_data.get({\cf22 "OUTPUT PRODUCTS"}, {\cf22 ""}))\par
00270             chk = tk.Checkbutton(target_frame, text=product, variable=var)\par
00271             chk.grid(row=row, column=idx+1, sticky={\cf22 "w"}, padx=5)\par
00272             self.ui_elements[{\cf22 "OUTPUT PRODUCTS"}][product] = var\par
00273             print(idx)\par
00274 \par
00275     {\cf17 def }create_dropdown(self, label, key, options, frame=None,row=0,column=0):\par
00276         {\cf22 """Creates a dropdown menu inside a given frame."""}\par
00277         target_frame = frame {\cf19 if} frame {\cf19 else} self.scrollable_frame\par
00278         tk.Label(target_frame, text=label).grid(row=row, column=column,columnspan=5, sticky={\cf22 "w"}, padx=5, pady=5)\par
00279         var = tk.StringVar(value=self.config_data.get(key, options[0]))\par
00280         dropdown = ttk.Combobox(target_frame, textvariable=var, values=options)\par
00281         dropdown.grid(row=row, column=column+1, sticky={\cf22 "ew"}, padx=5, pady=5)\par
00282         self.ui_elements[key] = var\par
00283 \par
00284     {\cf17 def }create_editable_dropdown(self, label, key, options, frame=None, row=0, column=0):\par
00285         {\cf22 """Creates an editable dropdown menu inside a given frame."""}\par
00286         target_frame = frame {\cf19 if} frame {\cf19 else} self.scrollable_frame\par
00287         tk.Label(target_frame, text=label).grid(row=row, column=column, columnspan=5, sticky={\cf22 "w"}, padx=5, pady=5)\par
00288 \par
00289         var = tk.StringVar(value=self.config_data.get(key, options[0]))\par
00290         dropdown = ttk.Combobox(target_frame, textvariable=var, values=options, state={\cf22 "normal"})  {\cf20 # Enable text input}\par
00291         dropdown.grid(row=row, column=column+1, sticky={\cf22 "ew"}, padx=5, pady=5)\par
00292 \par
00293         self.ui_elements[key] = var  {\cf20 # Store variable for config access}\par
00294 \par
00295         {\cf19 return} dropdown  {\cf20 # Return the dropdown so it can be modified if needed}\par
00296 \par
00297 \par
00298     {\cf17 def }create_slider(self, label, key, min_val, max_val, frame=None,row=0,column=0):\par
00299         {\cf22 """Creates a slider for selecting a numerical value."""}\par
00300         target_frame = frame {\cf19 if} frame {\cf19 else} self.scrollable_frame\par
00301         tk.Label(target_frame, text=label).grid(row=row, column=column, sticky={\cf22 "w"}, padx=5, pady=5)\par
00302         var = tk.IntVar(value=self.config_data.get(key, min_val))\par
00303         slider = tk.Scale(target_frame, from_=min_val, to=max_val, orient={\cf22 "horizontal"}, variable=var)\par
00304         slider.grid(row=row, column=column+1, sticky={\cf22 "ew"}, padx=5, pady=5)\par
00305         self.ui_elements[key] = var\par
00306 \par
00307     {\cf17 def }create_channel_dropdown(self, row=0):\par
00308         {\cf22 """Creates an editable dropdown for selecting a channel, updating dynamically in the background."""}\par
00309 \par
00310         {\cf20 # Label}\par
00311         tk.Label(self.scrollable_frame, text={\cf22 "Select Channel:"}).grid(row=row, column=0, sticky={\cf22 "w"})\par
00312 \par
00313         {\cf20 # StringVar for dropdown}\par
00314         self.ui_elements[{\cf22 "DATA CHANNELS"}] = tk.StringVar()\par
00315 \par
00316         {\cf20 # Create an editable dropdown}\par
00317         self.channel_dropdown = ttk.Combobox(\par
00318             self.scrollable_frame,\par
00319             textvariable=self.ui_elements[{\cf22 "DATA CHANNELS"}],\par
00320             values=[],  {\cf20 # Start empty, will be populated dynamically}\par
00321             state={\cf22 "normal"}  {\cf20 # Allows manual input}\par
00322         )\par
00323         self.channel_dropdown.grid(row=row, column=1, sticky={\cf22 "ew"})\par
00324 \par
00325         {\cf20 # Function to fetch available channels}\par
00326         {\cf17 def }populate_channels():\par
00327             {\cf22 """Get available channels from the directory and saved history."""}\par
00328             base_path = self.GWFOUT_DIRECTORY\par
00329             history_file = {\cf22 "gravfetch_history.json"}\par
00330             channels = set()\par
00331 \par
00332             default_structure = \{{\cf22 "gwfout_path"}: str(base_path), {\cf22 "channels"}: []\}\par
00333 \par
00334             {\cf19 if} {\cf19 not} os.path.exists(history_file):\par
00335                 {\cf17 with} open(history_file, {\cf22 "w"}) {\cf17 as} file:\par
00336                     json.dump(default_structure, file, indent=4)\par
00337                 print(f{\cf22 "Created missing history file: \{history_file\}"})\par
00338 \par
00339             {\cf19 try}:\par
00340                 {\cf17 with} open(history_file, {\cf22 "r"}) {\cf17 as} file:\par
00341                     history_data = json.load(file)\par
00342 \par
00343                 {\cf19 if} {\cf19 not} isinstance(history_data, dict) {\cf19 or} {\cf22 "channels"} {\cf19 not} {\cf19 in} history_data:\par
00344                     history_data = default_structure\par
00345                     {\cf17 with} open(history_file, {\cf22 "w"}) {\cf17 as} file:\par
00346                         json.dump(history_data, file, indent=4)\par
00347                     print(f{\cf22 "Fixed malformed history file: \{history_file\}"})\par
00348 \par
00349                 channels.update(history_data[{\cf22 "channels"}])\par
00350 \par
00351             {\cf19 except} (json.JSONDecodeError, KeyError, TypeError) {\cf17 as} e:\par
00352                 print(f{\cf22 "Warning: History file corrupted, resetting: \{e\}"})\par
00353                 history_data = default_structure\par
00354                 {\cf17 with} open(history_file, {\cf22 "w"}) {\cf17 as} file:\par
00355                     json.dump(history_data, file, indent=4)\par
00356 \par
00357             {\cf19 if} os.path.exists(base_path) {\cf19 and} os.path.isdir(base_path):\par
00358                 {\cf19 for} d {\cf19 in} os.listdir(base_path):\par
00359                     dir_path = os.path.join(base_path, d)\par
00360                     {\cf19 if} os.path.isdir(dir_path):\par
00361                         {\cf19 if} d.count({\cf22 ":"}) > 1:\par
00362                             d = d[:d.find({\cf22 ":"}, d.find({\cf22 ":"}) + 1)].replace({\cf22 ":"}, {\cf22 "_"}) + d[d.find({\cf22 ":"}, d.find({\cf22 ":"}) + 1):]\par
00363                         channels.add(d)\par
00364 \par
00365             {\cf19 return} sorted(channels) {\cf19 if} channels {\cf19 else} [{\cf22 "No Channels Available"}]\par
00366 \par
00367         {\cf20 # Function to update the channel list in the background}\par
00368         {\cf17 def }update_channel_options():\par
00369             {\cf22 """Update the dropdown values without affecting user input."""}\par
00370             current_input = self.ui_elements[{\cf22 "DATA CHANNELS"}].get()  {\cf20 # Get user input}\par
00371             channel_options = populate_channels()  {\cf20 # Get the latest channel list}\par
00372 \par
00373             {\cf20 # Update only the dropdown values without resetting user input}\par
00374             self.channel_dropdown[{\cf22 'values'}] = channel_options\par
00375 \par
00376             {\cf20 # Do NOT modify the user's input, just update the dropdown options}\par
00377             self.scrollable_frame.after(4000, update_channel_options)  {\cf20 # Refresh every 4 seconds}\par
00378 \par
00379         {\cf20 # Start the update process in the background}\par
00380         update_channel_options()\par
00381 \par
00382         {\cf19 return} self.channel_dropdown\par
00383 \par
00384 \par
00385     {\cf17 def }select_file(self, var, is_directory=False):\par
00386         file_path = filedialog.askdirectory() {\cf19 if} is_directory {\cf19 else} filedialog.askopenfilename()\par
00387         {\cf19 if} file_path:\par
00388             relative_path = os.path.relpath(file_path, os.getcwd())  {\cf20 # Convert to relative path}\par
00389             var.set(relative_path)\par
00390             print(f{\cf22 "FFL file selected: \{relative_path\}"})  {\cf20 # DEBUGGING}\par
00391 \par
00392     {\cf17 def }load_config(self):\par
00393         {\cf19 try}:\par
00394             {\cf17 with} open(self.config_path, {\cf22 'r'}) {\cf17 as} file:\par
00395                 {\cf19 for} line {\cf19 in} file:\par
00396                     parts = line.strip().split({\cf22 "\\t"})\par
00397                     {\cf19 if} len(parts) == 2:\par
00398                         self.config_data[parts[0]] = parts[1]\par
00399         {\cf19 except} FileNotFoundError:\par
00400             self.append_output({\cf22 "Config file not found. Using defaults.\\n"})\par
00401 \par
00402     {\cf17 def }save_config(self):\par
00403         base_path = os.getcwd().replace({\cf22 "\\\\"}, {\cf22 "/"})  {\cf20 # Get current working directory with forward slashes}\par
00404         {\cf17 with} open(self.config_path, {\cf22 'w'}, encoding={\cf22 'utf-8'}) {\cf17 as} file:\par
00405             {\cf19 for} key, var {\cf19 in} self.ui_elements.items():\par
00406                 {\cf19 if} isinstance(var, tuple):  {\cf20 # For double-entry fields}\par
00407                     value = f{\cf22 "\{var[0].get()\} \{var[1].get()\}"}\par
00408                 {\cf19 elif} isinstance(var, dict):  {\cf20 # For multiple selections (checkboxes)}\par
00409                     selected_products = [prod {\cf19 for} prod, v {\cf19 in} var.items() {\cf19 if} v.get()]\par
00410                     value = {\cf22 " "}.join(selected_products)\par
00411                 {\cf19 else}:\par
00412                     value = var.get()\par
00413                 {\cf19 if} key == {\cf22 "DATA CHANNELS"}:\par
00414                     parts = value.split({\cf22 "_"}, 1)  {\cf20 # Split at the first underscore}\par
00415                     {\cf20 #if len(parts) == 2:}\par
00416                         {\cf20 #value = parts[0] + ":" + parts[1]  # Replace only the first underscore with a colon}\par
00417                 {\cf20 # Convert absolute paths to relative paths based on current directory}\par
00418                 {\cf19 if} key {\cf19 in} [{\cf22 "DATA FFL"}, {\cf22 "OUTPUT DIRECTORY"}]:  \par
00419                     print(key)  {\cf20 # Debugging}\par
00420                     {\cf19 if} value:\par
00421                         value = value.replace({\cf22 "\\\\"}, {\cf22 "/"})  \par
00422                         abs_path = os.path.abspath(value).replace({\cf22 "\\\\"}, {\cf22 "/"})  {\cf20 # Ensure absolute path uses `/`}\par
00423                         {\cf19 if} abs_path.startswith(base_path):  \par
00424                             rel_path = os.path.relpath(abs_path, base_path).replace({\cf22 "\\\\"}, {\cf22 "/"})  {\cf20 # Convert to relative path}\par
00425                             {\cf19 if} {\cf19 not} rel_path.startswith({\cf22 "."}) {\cf19 and} {\cf19 not} rel_path.startswith({\cf22 ".."}):\par
00426                                 rel_path = f{\cf22 "./\{rel_path\}"}\par
00427                             value = rel_path  {\cf20 # Assign the corrected relative path}\par
00428                             print({\cf22 "Relative Path:"}, value)  {\cf20 # Debugging}\par
00429                             print({\cf22 "Absolute Path:"}, abs_path)  {\cf20 # Debugging}\par
00430 \par
00431                 {\cf20 # Reconstruct the formatted line}\par
00432                 {\cf19 if} key.startswith({\cf22 "DATA "}):\par
00433                     formatted_line = f{\cf22 "\{key\}\\t\{value\}\\n"}\par
00434                 {\cf19 elif} key.startswith({\cf22 "PARAMETER "}):\par
00435                     formatted_line = f{\cf22 "PARAMETER\\t\{key.split()[1]\}\\t\{value\}\\n"}\par
00436                 {\cf19 elif} key.startswith({\cf22 "OUTPUT "}):  \par
00437                 \par
00438                     formatted_line = f{\cf22 "OUTPUT\\t\{key.split()[1]\}\\t\{value\}\\n"}\par
00439                 {\cf19 else}:\par
00440                     formatted_line = f{\cf22 "\{key\}\\t\{value\}\\n"}\par
00441 \par
00442                 print(f{\cf22 "Saving to config: \{formatted_line.strip()\}"})  {\cf20 # Debugging}\par
00443                 file.write(formatted_line)\par
00444 \par
00445         self.append_output(f{\cf22 "Config file saved at '\{self.config_path\}' with the correct format.\\n"})\par
00446         \par
00447         messagebox.showinfo({\cf22 "Success"}, {\cf22 "Configuration has been saved successfully!"})\par
00448 \par
00449     {\cf17 def }run_omicron_script(self):\par
00450         {\cf22 """Start the OMICRON script in a separate process and update the output in real-time."""}\par
00451         self.append_output({\cf22 "Starting OMICRON script...\\n"})\par
00452         \par
00453         {\cf20 # Start the OMICRON process in a new thread to avoid blocking the GUI}\par
00454         omicron_thread = threading.Thread(target=self.start_omicron_process, daemon={\cf17 True})\par
00455         omicron_thread.start()\par
00456     \par
00457     {\cf17 def }start_omicron_process(self):\par
00458         {\cf22 """Run the OMICRON command dynamically in WSL."""}\par
00459         {\cf19 try}:\par
00460             {\cf20 # Get the selected FFL file from UI}\par
00461             ffl_file = self.ui_elements.get({\cf22 "DATA FFL"}, {\cf22 ""}).get().strip()\par
00462             {\cf19 if} {\cf19 not} ffl_file {\cf19 or} {\cf19 not} os.path.exists(ffl_file):\par
00463                 self.append_output({\cf22 "Error: No valid .ffl file selected.\\n"})\par
00464                 {\cf19 return}\par
00465 \par
00466             {\cf20 # Extract first and last time segment from the .ffl file}\par
00467             {\cf17 with} open(ffl_file, {\cf22 "r"}) {\cf17 as} f:\par
00468                 lines = [line.strip().split() {\cf19 for} line {\cf19 in} f {\cf19 if} line.strip()]\par
00469             \par
00470             {\cf19 if} {\cf19 not} lines {\cf19 or} len(lines[0]) < 2 {\cf19 or} len(lines[-1]) < 2:\par
00471                 self.append_output({\cf22 "Error: Invalid .ffl file format.\\n"})\par
00472                 {\cf19 return}\par
00473 \par
00474             first_time_segment = lines[0][1]\par
00475             last_time_segment = lines[-1][1]\par
00476 \par
00477             {\cf20 # Construct the OMICRON command}\par
00478             omicron_cmd = f{\cf22 "omicron \{first_time_segment\} \{last_time_segment\} ./config.txt > omicron.out 2>&1"}\par
00479 \par
00480             {\cf20 # Full WSL command (fixing conda initialization issue)}\par
00481             wsl_command = {\cf22 'wsl bash -ic "'} + omicron_cmd + {\cf22 '"'}\par
00482             self.append_output(f{\cf22 "Running: \{wsl_command\}\\n"})\par
00483 \par
00484             {\cf20 # Run command asynchronously with real-time output capture}\par
00485             process = subprocess.Popen(\par
00486                 wsl_command, shell={\cf17 True}, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text={\cf17 True}\par
00487             )\par
00488 \par
00489             {\cf20 # Stream output dynamically to the terminal}\par
00490             {\cf19 while} {\cf17 True}:\par
00491                 output = process.stdout.readline()\par
00492                 {\cf19 if} output == {\cf22 ""} {\cf19 and} process.poll() {\cf19 is} {\cf19 not} {\cf18 None}:\par
00493                     {\cf19 break}\par
00494                 {\cf19 if} output:\par
00495                     self.append_output(output)\par
00496 \par
00497             {\cf19 while} {\cf17 True}:\par
00498                 error = process.stderr.readline()\par
00499                 {\cf19 if} error == {\cf22 ""} {\cf19 and} process.poll() {\cf19 is} {\cf19 not} {\cf18 None}:\par
00500                     {\cf19 break}\par
00501                 {\cf19 if} error:\par
00502                     self.append_output(f{\cf22 "ERROR: \{error\}"})\par
00503 \par
00504             process.wait()\par
00505             {\cf19 if} process.returncode != 0:\par
00506                 self.append_output(f{\cf22 "Error: Command failed with return code \{process.returncode\}.\\n"})\par
00507             {\cf19 else}:\par
00508                 self.append_output({\cf22 "OMICRON process completed successfully.\\n"})\par
00509 \par
00510         {\cf19 except} Exception {\cf17 as} e:\par
00511             self.append_output(f{\cf22 "Unexpected error: \{e\}\\n"})\par
00512 \par
00513     {\cf17 def }append_output(self, text):\par
00514         {\cf22 """Append output to the shared terminal frame."""}\par
00515         self.terminal.append_output(text)\par
00516         \par
00517     {\cf17 def }open_custom_segs_dialog(self):\par
00518         {\cf22 """Opens a GUI window to select a channel and time segments with scrolling and dynamic layout."""}\par
00519         channel_dir = filedialog.askdirectory(initialdir={\cf22 "./gwfout"}, title={\cf22 "Select Channel Directory"})\par
00520         {\cf19 if} {\cf19 not} channel_dir:\par
00521             {\cf19 return}\par
00522 \par
00523         segments = [d {\cf19 for} d {\cf19 in} os.listdir(channel_dir) {\cf19 if} os.path.isdir(os.path.join(channel_dir, d))]\par
00524         {\cf19 if} {\cf19 not} segments:\par
00525             messagebox.showerror({\cf22 "Error"}, {\cf22 "No time segments found in selected channel."})\par
00526             {\cf19 return}\par
00527 \par
00528         {\cf20 # Create the selection window}\par
00529         selection_window = tk.Toplevel(self.root)\par
00530         selection_window.title({\cf22 "Select Time Segments"})\par
00531         selection_window.geometry({\cf22 "400x400"})  {\cf20 # Adjustable window size}\par
00532 \par
00533         {\cf20 # Header label}\par
00534         tk.Label(selection_window, text={\cf22 "Select Time Segments:"}, font=({\cf22 "Arial"}, 12)).pack(pady=5)\par
00535 \par
00536         {\cf20 # Create canvas inside a frame with scrollbar}\par
00537         container = tk.Frame(selection_window)\par
00538         container.pack(fill={\cf22 "both"}, expand={\cf17 True})\par
00539 \par
00540         canvas = tk.Canvas(container)\par
00541         scrollbar = tk.Scrollbar(container, orient={\cf22 "vertical"}, command=canvas.yview)\par
00542         scrollable_frame = tk.Frame(canvas)\par
00543 \par
00544         scrollable_frame.bind(\par
00545             {\cf22 "<Configure>"},\par
00546             {\cf17 lambda} e: canvas.configure(scrollregion=canvas.bbox({\cf22 "all"}))\par
00547         )\par
00548 \par
00549         canvas.create_window((0, 0), window=scrollable_frame, anchor={\cf22 "nw"})\par
00550         canvas.configure(yscrollcommand=scrollbar.set)\par
00551 \par
00552         canvas.pack(side={\cf22 "left"}, fill={\cf22 "both"}, expand={\cf17 True})\par
00553         scrollbar.pack(side={\cf22 "right"}, fill={\cf22 "y"})\par
00554 \par
00555         {\cf20 # Checkbox variables and widgets}\par
00556         selected_segments = \{\}\par
00557         {\cf19 for} idx, segment {\cf19 in} enumerate(segments):\par
00558             selected_segments[segment] = tk.BooleanVar()\par
00559             chk = tk.Checkbutton(scrollable_frame, text=segment, variable=selected_segments[segment])\par
00560             chk.grid(row=idx, column=0, sticky={\cf22 "w"}, padx=5, pady=2)\par
00561 \par
00562         {\cf20 # Bottom button frame (always visible)}\par
00563         bottom_frame = tk.Frame(selection_window)\par
00564         bottom_frame.pack(fill={\cf22 "x"}, pady=10)\par
00565 \par
00566         {\cf17 def }confirm_selection():\par
00567             selected = [seg {\cf19 for} seg, var {\cf19 in} selected_segments.items() {\cf19 if} var.get()]\par
00568             {\cf19 if} {\cf19 not} selected:\par
00569                 messagebox.showerror({\cf22 "Error"}, {\cf22 "No segments selected."})\par
00570             {\cf19 else}:\par
00571                 self.generate_fin_ffl(channel_dir, selected)\par
00572                 selection_window.destroy()\par
00573 \par
00574         {\cf17 def }toggle_all():\par
00575             all_selected = all(var.get() {\cf19 for} var {\cf19 in} selected_segments.values())\par
00576             {\cf19 for} var {\cf19 in} selected_segments.values():\par
00577                 var.set({\cf19 not} all_selected)\par
00578 \par
00579         tk.Button(bottom_frame, text={\cf22 "Confirm"}, command=confirm_selection).pack(side={\cf22 "left"}, padx=20)\par
00580         tk.Button(bottom_frame, text={\cf22 "Toggle All"}, command=toggle_all).pack(side={\cf22 "right"}, padx=20)\par
00581 \par
00582     {\cf17 def }generate_fin_ffl(self, channel_dir, selected_segments):\par
00583         {\cf22 """ Generates fin.ffl file with correctly formatted paths and timestamps, then preselects it in the UI. """}\par
00584         fin_ffl_path = os.path.join(channel_dir, {\cf22 "fin.ffl"})\par
00585         \par
00586         {\cf17 with} open(fin_ffl_path, {\cf22 "w"}) {\cf17 as} ffl_file:\par
00587             {\cf19 for} segment {\cf19 in} selected_segments:\par
00588                 segment_path = os.path.join(channel_dir, segment)\par
00589                 gwf_files = [file {\cf19 for} file {\cf19 in} os.listdir(segment_path) {\cf19 if} file.endswith({\cf22 ".gwf"})]\par
00590                 {\cf19 if} {\cf19 not} gwf_files:\par
00591                     {\cf19 continue}  {\cf20 # Skip if no GWF files}\par
00592                 gwf_file_path = os.path.join(segment_path, gwf_files[0])\par
00593                 gwf_file_path = os.path.relpath(gwf_file_path, start={\cf22 "."})  {\cf20 # Truncate path to start from `./`}\par
00594                 gwf_file_path = gwf_file_path.replace({\cf22 "\\\\"}, {\cf22 "/"})  {\cf20 # Convert \\ to /}\par
00595                 segment_parts = segment.split({\cf22 "_"})\par
00596                 start_time = segment_parts[0]  {\cf20 # Use the first timestamp as is}\par
00597                 duration = int(segment_parts[1]) - int(segment_parts[0])  {\cf20 # Calculate duration}\par
00598                 ffl_file.write(f{\cf22 "./\{gwf_file_path\} \{start_time\} \{duration\} 0 0\\n"})\par
00599 \par
00600         {\cf20 # **Automatically select the generated fin.ffl file**}\par
00601         relative_ffl_path = os.path.relpath(fin_ffl_path, os.getcwd()).replace({\cf22 "\\\\"}, {\cf22 "/"})\par
00602         self.ui_elements[{\cf22 "DATA FFL"}].set(relative_ffl_path)\par
00603         messagebox.showinfo({\cf22 "Success"}, f{\cf22 "fin.ffl created and selected: \{relative_ffl_path\}"})\par
00604 \par
00605 {\cf17 class }GravfetchApp:\par
00606     {\cf17 def }__init__(self, root):\par
00607         self.root = root\par
00608         self.time_csv_file = {\cf22 ""}\par
00609         self.channel_csv_file = {\cf22 ""}\par
00610         self.execution_running = {\cf17 False}\par
00611         self.process = {\cf18 None}\par
00612         self.gwfout_path = {\cf22 "./gwfout/"}\par
00613         self.loaded_channels = []  {\cf20 # Store previously used channels}\par
00614 \par
00615         {\cf20 # Load previous selections from JSON if available}\par
00616         {\cf19 if} os.path.exists(HISTORY_FILE):\par
00617             {\cf19 try}:\par
00618                 {\cf17 with} open(HISTORY_FILE, {\cf22 "r"}) {\cf17 as} f:\par
00619                     history_data = json.load(f)\par
00620                     self.gwfout_path = history_data.get({\cf22 "gwfout_path"}, {\cf22 "./gwfout/"})\par
00621                     self.loaded_channels = history_data.get({\cf22 "channels"}, [])\par
00622             {\cf19 except} json.JSONDecodeError:\par
00623                 print({\cf22 "Error reading history file, starting fresh."})\par
00624         {\cf20 # Setup Execution Tab}\par
00625         self.setup_execution_tab()\par
00626 \par
00627         {\cf20 # Create Terminal (Placed in row 4, column 0)}\par
00628         self.terminal = TerminalFrame(self.root, row=5, column=0, columnspan=2, height=20, width=80)\par
00629 \par
00630     {\cf17 def }setup_execution_tab(self):\par
00631         {\cf22 """Sets up the Execution tab with buttons, output terminal, etc."""}\par
00632         {\cf20 # Status bar frame at the top}\par
00633         self.status_bar_frame = tk.Frame(self.root, bg={\cf22 "lightgray"})\par
00634         self.status_bar_frame.grid(row=0, column=0, columnspan=2, sticky={\cf22 "ew"}, padx=10, pady=5)\par
00635         \par
00636         {\cf20 # Label for the status bar}\par
00637         self.status_label = tk.Label(self.status_bar_frame, text={\cf22 "Idle"}, fg={\cf22 "black"}, bg={\cf22 "lightgray"}, anchor={\cf22 "w"})\par
00638         self.status_label.grid(row=0, column=0, sticky={\cf22 "ew"}, padx=5, pady=5)\par
00639 \par
00640         {\cf20 # File selection buttons}\par
00641         self.time_button = tk.Button(self.root, text={\cf22 "Select Time CSV"}, command=self.select_time_csv)\par
00642         self.time_button.grid(row=1, column=0, padx=10, pady=5, sticky={\cf22 "ew"})\par
00643         self.channel_button = tk.Button(self.root, text={\cf22 "Select Channel CSV"}, command=self.select_channel_csv)\par
00644         self.channel_button.grid(row=2, column=0, padx=10, pady=5, sticky={\cf22 "ew"})\par
00645         self.gwf_button = tk.Button(self.root, text={\cf22 "Select Output (GWF) Dir"}, command=self.select_gwfout_dir)\par
00646         self.gwf_button.grid(row=3, column=0, padx=10, pady=5, sticky={\cf22 "ew"})\par
00647         \par
00648         {\cf20 # Start/Stop button}\par
00649         self.start_stop_button = tk.Button(self.root, text={\cf22 "Start Execution"}, command=self.toggle_execution)\par
00650         self.start_stop_button.grid(row=4, column=0, padx=10, pady=10, sticky={\cf22 "ew"})\par
00651 \par
00652         self.root.grid_rowconfigure(5, weight=1)  {\cf20 # Make terminal expandable}\par
00653         self.root.grid_columnconfigure(0, weight=1)  {\cf20 # Ensure alignment}\par
00654 \par
00655     {\cf17 def }select_time_csv(self):\par
00656         {\cf22 """Open file dialog for time CSV file."""}\par
00657         self.time_csv_file = filedialog.askopenfilename(filetypes=[({\cf22 "CSV Files"}, {\cf22 "*.csv"})])\par
00658         self.status_label.config(text=f{\cf22 "Selected Time CSV: \{self.time_csv_file\}"})\par
00659     \par
00660     {\cf17 def }select_channel_csv(self):\par
00661         {\cf22 """Open file dialog for channel CSV file."""}\par
00662         self.channel_csv_file = filedialog.askopenfilename(filetypes=[({\cf22 "CSV Files"}, {\cf22 "*.csv"})])\par
00663         self.status_label.config(text=f{\cf22 "Selected Channel CSV: \{self.channel_csv_file\}"})\par
00664     \par
00665     {\cf17 def }select_gwfout_dir(self):\par
00666         {\cf22 """Open file dialog for output dir (folder) selection."""}\par
00667         self.gwfout_path = filedialog.askdirectory()  {\cf20 # Use askdirectory instead of askopenfilename}\par
00668         {\cf19 if} self.gwfout_path:  {\cf20 # Check if a directory was selected}\par
00669             self.status_label.config(text=f{\cf22 "Selected Output Dir: \{self.gwfout_path\}"})\par
00670             self.gwfout_path = self.gwfout_path\par
00671         {\cf19 else}:\par
00672             self.status_label.config(text={\cf22 "No directory selected"}, fg={\cf22 "red"})\par
00673  \par
00674 \par
00675     {\cf17 def }toggle_execution(self):\par
00676         {\cf22 """Start or stop the execution of the Gravfetch script."""}\par
00677         {\cf19 if} self.execution_running:\par
00678             self.execution_running = {\cf17 False}\par
00679             self.start_stop_button.config(text={\cf22 "Start Execution"})\par
00680             self.status_label.config(text={\cf22 "Execution Stopped"}, fg={\cf22 "red"})\par
00681             self.append_output({\cf22 "Execution stopped.\\n"})\par
00682 \par
00683             {\cf19 if} self.process:\par
00684                 self.process.terminate()\par
00685                 self.process = {\cf18 None}\par
00686         {\cf19 else}:\par
00687             {\cf19 if} {\cf19 not} self.time_csv_file {\cf19 or} {\cf19 not} self.channel_csv_file:\par
00688                 self.append_output({\cf22 "Please select both CSV files.\\n"})\par
00689                 {\cf19 return}\par
00690             \par
00691             self.execution_running = {\cf17 True}\par
00692             self.start_stop_button.config(text={\cf22 "Stop Execution"})\par
00693             self.status_label.config(text={\cf22 "Execution Started"}, fg={\cf22 "green"})\par
00694             self.append_output({\cf22 "Execution started...\\n"})\par
00695 \par
00696             {\cf20 # Start the execution in a separate thread to avoid blocking the GUI}\par
00697             self.execution_thread = threading.Thread(target=self.run_gravfetch_script, daemon={\cf17 True})\par
00698             self.execution_thread.start()\par
00699 \par
00700     {\cf17 def }run_gravfetch_script(self):\par
00701         {\cf22 """Runs the Gravfetch script logic directly within the GUI."""}\par
00702         {\cf19 try}:\par
00703             {\cf20 # Ensure the input path exists}\par
00704             {\cf19 if} {\cf19 not} os.path.exists(self.gwfout_path):\par
00705                 print(f{\cf22 "The path \{self.gwfout_path\} does not exist. Creating the path..."})\par
00706                 os.makedirs(self.gwfout_path)\par
00707 \par
00708             {\cf20 # Load the CSV files (time ranges and channel data)}\par
00709             time_ranges = pd.read_csv(self.time_csv_file, header={\cf18 None}, names=[{\cf22 "start"}, {\cf22 "end"}])\par
00710             channels = pd.read_csv(self.channel_csv_file, header={\cf18 None}, skiprows=1, names=[{\cf22 "Channel"}, {\cf22 "Sample Rate"}])\par
00711 \par
00712             {\cf20 # Debug: Check the loaded data}\par
00713             print({\cf22 "Loaded time ranges:"})\par
00714             print(time_ranges)\par
00715             print({\cf22 "Loaded channels:"})\par
00716             print(channels)\par
00717 \par
00718             {\cf20 # Get the current working directory (dynamic path)}\par
00719             current_dir = os.getcwd()\par
00720 \par
00721             {\cf20 # Process data for each channel}\par
00722             self.loaded_channels = []  {\cf20 # Reset before fetching}\par
00723             {\cf19 for} _, channel_row {\cf19 in} channels.iterrows():\par
00724                 channel_name = channel_row[{\cf22 'Channel'}]\par
00725                 self.loaded_channels.append(channel_name)  {\cf20 # Store the channel name}\par
00726                 sampling_rate = channel_row[{\cf22 'Sample Rate'}]\par
00727                 print(f{\cf22 "Processing channel: \{channel_name\}"})\par
00728 \par
00729                 {\cf20 # Create a directory for the channel within the input path}\par
00730                 channel_dir = os.path.join(self.gwfout_path, channel_name.replace({\cf22 ":"}, {\cf22 "_"}))  {\cf20 # Replace ':' with '_'}\par
00731                 os.makedirs(channel_dir, exist_ok={\cf17 True})\par
00732                 print(f{\cf22 "Created channel directory: \{channel_dir\}"})\par
00733 \par
00734                 {\cf20 # Create a separate fin.ffl file for each channel inside its directory}\par
00735                 fin_file_path = os.path.join(channel_dir, {\cf22 "fin.ffl"})\par
00736 \par
00737                 {\cf20 # Open the channel-specific fin.ffl file for appending}\par
00738                 {\cf17 with} open(fin_file_path, {\cf22 'a'}) {\cf17 as} fin:\par
00739                     {\cf19 for} _, time_row {\cf19 in} time_ranges.iterrows():\par
00740                         start_time = int(time_row[{\cf22 "start"}])\par
00741                         end_time = int(time_row[{\cf22 "end"}])\par
00742 \par
00743                         {\cf20 # Try fetching data, skip if error occurs}\par
00744                         {\cf19 try}:\par
00745                             print(f{\cf22 "Fetching data for channel '\{channel_name\}' from \{start_time\} to \{end_time\}..."})\par
00746                             {\cf20 # Fetch data from GWPy}\par
00747                             data = TimeSeries.fetch(channel_name, start=start_time, end=end_time, host={\cf22 'nds.gwosc.org'})\par
00748 \par
00749                             {\cf20 # Create a subfolder for the time range within the channel folder}\par
00750                             time_dir_path = os.path.join(channel_dir, f{\cf22 "\{start_time\}_\{end_time\}"})\par
00751                             os.makedirs(time_dir_path, exist_ok={\cf17 True})\par
00752                             print(f{\cf22 "Created time directory: \{time_dir_path\}"})\par
00753 \par
00754                             {\cf20 # File path to save the GWF file}\par
00755                             output_file = os.path.join(time_dir_path, f{\cf22 "\{channel_name.replace(':', '_')\}_\{start_time\}_\{end_time\}.gwf"})\par
00756 \par
00757                             {\cf20 # Save the strain data in `gwf` format}\par
00758                             data.write(output_file)\par
00759                             print(f{\cf22 "Aux data for channel '\{channel_name\}' from \{start_time\} to \{end_time\} saved to \{output_file\}"})\par
00760 \par
00761                             {\cf20 # Extract relevant data for fin.ffl}\par
00762                             t0 = data.t0  {\cf20 # Start time (gps_start_time)}\par
00763                             dt = end_time - start_time  {\cf20 # Duration of the data (file_duration)}\par
00764                             print(f{\cf22 "Data start time: \{t0\}, Duration: \{dt\}"})\par
00765 \par
00766                             {\cf20 # Convert backslashes to double forward slashes for fin.ffl}\par
00767                             relative_path = os.path.relpath(output_file, current_dir).replace({\cf22 "\\\\"}, {\cf22 ""})\par
00768 \par
00769                             {\cf20 # Write the information to the channel-specific fin.ffl file}\par
00770                             fin.write(f{\cf22 "./\{relative_path\} \{start_time\} \{dt\} 0 0\\n"})\par
00771                             print(f{\cf22 "Added to \{fin_file_path\}: ./\{relative_path\} \{start_time\} \{dt\} 0 0"})\par
00772 \par
00773                         {\cf19 except} RuntimeError {\cf17 as} e:\par
00774                             {\cf20 # If data fetching fails, log the error and continue with the next time segment}\par
00775                             print(f{\cf22 "Error fetching data for \{channel_name\} from \{start_time\} to \{end_time\}: \{e\}"})\par
00776                             {\cf19 continue}  {\cf20 # Skip to the next time segment}\par
00777 \par
00778             {\cf20 # Notify user of completion}\par
00779             self.append_output({\cf22 "All channel-specific fin.ffl files created.\\n"})\par
00780             self.append_output({\cf22 "Data fetching and file creation completed successfully.\\n"})\par
00781 \par
00782             {\cf20 # Update status}\par
00783             self.execution_running = {\cf17 False}\par
00784             self.start_stop_button.config(text={\cf22 "Start Execution"})\par
00785             self.status_label.config(text={\cf22 "Execution Finished"}, fg={\cf22 "green"})\par
00786             self.save_channel_history()\par
00787             self.append_output({\cf22 "Execution finished.\\n"})\par
00788 \par
00789         {\cf19 except} Exception {\cf17 as} e:\par
00790             {\cf20 # Handle any errors that occur during execution}\par
00791             self.append_output(f{\cf22 "Error running the script: \{e\}"})\par
00792             self.execution_running = {\cf17 False}\par
00793             self.start_stop_button.config(text={\cf22 "Start Execution"})\par
00794             self.status_label.config(text={\cf22 "Execution Failed"}, fg={\cf22 "red"})\par
00795             self.append_output({\cf22 "Execution failed.\\n"})\par
00796         \par
00797     {\cf17 def }append_output(self, text):\par
00798         {\cf22 """Send output to the terminal"""}\par
00799         self.terminal.append_output(text)\par
00800     {\cf17 def }save_channel_history(self):\par
00801         {\cf22 """Save the selected channels to a JSON file for persistence."""}\par
00802         history_data = \{\par
00803             {\cf22 "gwfout_path"}: self.gwfout_path,\par
00804             {\cf22 "channels"}: self.loaded_channels\par
00805         \}\par
00806         {\cf17 with} open(HISTORY_FILE, {\cf22 "w"}) {\cf17 as} f:\par
00807             json.dump(history_data, f, indent=4)\par
00808 \par
00809 \par
00810 {\cf17 class }GWOSCApp:\par
00811     {\cf17 def }__init__(self, master, root):\par
00812         self.master = master\par
00813         self.root = root  {\cf20 # Needed for scheduling CEF events}\par
00814         self.browser = {\cf18 None}\par
00815 \par
00816         {\cf20 # Navigation Bar UI}\par
00817         self.navbar = tk.Frame(master, bg={\cf22 "gray"}, height=40)\par
00818         self.navbar.pack(fill={\cf22 "x"})\par
00819 \par
00820         self.back_btn = Button(self.navbar, text={\cf22 "\'E2\'97\'80"}, command=self.go_back)\par
00821         self.back_btn.pack(side={\cf22 "left"})\par
00822 \par
00823         self.forward_btn = Button(self.navbar, text={\cf22 "\'E2\'96\'B6"}, command=self.go_forward)\par
00824         self.forward_btn.pack(side={\cf22 "left"})\par
00825 \par
00826         self.reload_btn = Button(self.navbar, text={\cf22 "\'F0\'9F\'94\'84"}, command=self.reload_page)\par
00827         self.reload_btn.pack(side={\cf22 "left"})\par
00828 \par
00829         self.url_entry = Entry(self.navbar, width=50)\par
00830         self.url_entry.pack(side={\cf22 "left"}, fill={\cf22 "x"}, expand={\cf17 True})\par
00831         self.url_entry.bind({\cf22 "<Return>"}, self.load_url)\par
00832 \par
00833         {\cf20 # Frame for Browser}\par
00834         self.browser_frame = tk.Frame(master, bg={\cf22 "black"})\par
00835         self.browser_frame.pack(fill={\cf22 "both"}, expand={\cf17 True})\par
00836 \par
00837         {\cf20 # Initialize CEF in the UI thread}\par
00838         self.root.after(100, self.init_cef)\par
00839         self.master.bind({\cf22 "<Configure>"}, self.on_resize)  {\cf20 # Resize handling}\par
00840 \par
00841         \par
00842     {\cf17 def }init_cef(self):\par
00843         {\cf22 """Initializes CEF and creates the browser."""}\par
00844         sys.excepthook = cef.ExceptHook  {\cf20 # Catch CEF exceptions}\par
00845         cef.Initialize()\par
00846 \par
00847         {\cf20 # Create browser after the widget is ready}\par
00848         self.master.after(500, self.create_browser)\par
00849 \par
00850         {\cf20 # Start CEF message loop inside Tkinter's event loop}\par
00851         self.master.after(10, self.cef_loop)\par
00852 \par
00853     {\cf17 def }create_browser(self):\par
00854         {\cf22 """Embeds the browser inside the GWOSCRef tab."""}\par
00855         window_info = cef.WindowInfo()\par
00856         window_info.SetAsChild(self.browser_frame.winfo_id())\par
00857 \par
00858         self.browser = cef.CreateBrowserSync(window_info, url={\cf22 "https://gwosc.org/data/"})\par
00859         self.url_entry.insert(0, {\cf22 "https://gwosc.org/data/"})  {\cf20 # Show URL}\par
00860 \par
00861     {\cf17 def }cef_loop(self):\par
00862         {\cf22 """Runs CEF's message loop inside Tkinter's event loop."""}\par
00863         cef.MessageLoopWork()\par
00864         self.master.after(10, self.cef_loop)\par
00865 \par
00866     {\cf17 def }on_resize(self, event=None):\par
00867         {\cf22 """Handles resizing the browser when the window changes."""}\par
00868         {\cf19 if} self.browser:\par
00869             width = self.browser_frame.winfo_width()\par
00870             height = self.browser_frame.winfo_height()\par
00871             {\cf19 if} width > 0 {\cf19 and} height > 0:\par
00872                 self.browser.SetBounds(0, 0, width, height)\par
00873 \par
00874     {\cf17 def }go_back(self):\par
00875         {\cf19 if} self.browser:\par
00876             self.browser.GoBack()\par
00877 \par
00878     {\cf17 def }go_forward(self):\par
00879         {\cf19 if} self.browser:\par
00880             self.browser.GoForward()\par
00881 \par
00882     {\cf17 def }reload_page(self):\par
00883         {\cf19 if} self.browser:\par
00884             self.browser.Reload()\par
00885 \par
00886     {\cf17 def }load_url(self, event=None):\par
00887         url = self.url_entry.get()\par
00888         {\cf19 if} self.browser {\cf19 and} url:\par
00889             self.browser.LoadUrl(url)\par
00890 \par
00891 \par
00892 {\cf17 class }Omiviz:\par
00893     {\cf17 def }__init__(self, root):\par
00894         self.root = root\par
00895         self.config_data = \{\}\par
00896         self.ui_elements = \{\}\par
00897         self.plot_files = []  {\cf20 # Store generated plots}\par
00898         self.current_plot_index = 0  {\cf20 # Track displayed plot}\par
00899 \par
00900         {\cf20 # Scrollable Frame}\par
00901         self.canvas = tk.Canvas(root)\par
00902         self.scrollbar = ttk.Scrollbar(root, orient={\cf22 "vertical"}, command=self.canvas.yview)\par
00903         self.scrollable_frame = ttk.Frame(self.canvas)\par
00904 \par
00905         self.scrollable_frame.bind(\par
00906             {\cf22 "<Configure>"},\par
00907             {\cf17 lambda} e: self.canvas.configure(scrollregion=self.canvas.bbox({\cf22 "all"}))\par
00908         )\par
00909         \par
00910         self.window_frame = self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor={\cf22 "nw"})\par
00911         self.canvas.configure(yscrollcommand=self.scrollbar.set)\par
00912         self.canvas.grid(row=0, column=0, sticky={\cf22 "nsew"})\par
00913         self.scrollbar.grid(row=0, column=1, sticky={\cf22 "ns"})\par
00914         self.root.grid_rowconfigure(0, weight=1)\par
00915         self.root.grid_columnconfigure(0, weight=1)\par
00916 \par
00917         {\cf20 # Create GUI elements}\par
00918         self.create_widgets()\par
00919 \par
00920     {\cf17 def }start_loading(self):\par
00921         {\cf22 """Start the loading animation."""}\par
00922         self.progress.start()\par
00923 \par
00924     {\cf17 def }stop_loading(self):\par
00925         {\cf22 """Stop the loading animation."""}\par
00926         self.progress.stop()\par
00927 \par
00928     {\cf17 def }update_progress(self, text):\par
00929         {\cf22 """Update progress based on Omicron output."""}\par
00930         {\cf19 if} {\cf22 "Processing"} {\cf19 in} text {\cf19 or} {\cf22 "Generating"} {\cf19 in} text:\par
00931             self.progress.step(10)  {\cf20 # Move progress slightly}\par
00932 \par
00933     {\cf17 def }show_previous_plot(self):\par
00934         {\cf22 """Scrolls backward through the plots."""}\par
00935         {\cf19 if} self.current_plot_index > 0:\par
00936             self.current_plot_index -= 1\par
00937             self.show_plot()\par
00938         self.update_navigation_buttons()\par
00939 \par
00940     {\cf17 def }show_next_plot(self):\par
00941         {\cf22 """Scrolls forward through the plots."""}\par
00942         {\cf19 if} self.current_plot_index < len(self.plot_files) - 1:\par
00943             self.current_plot_index += 1\par
00944             self.show_plot()\par
00945         self.update_navigation_buttons()\par
00946 \par
00947     {\cf17 def }update_navigation_buttons(self):\par
00948         {\cf22 """Updates the state of navigation buttons."""}\par
00949         self.prev_button.config(state=tk.NORMAL {\cf19 if} self.current_plot_index > 0 {\cf19 else} tk.DISABLED)\par
00950         self.next_button.config(state=tk.NORMAL {\cf19 if} self.current_plot_index < len(self.plot_files) - 1 {\cf19 else} tk.DISABLED)\par
00951 \par
00952 \par
00953     {\cf17 def }create_widgets(self):\par
00954         {\cf20 # File/Folder Selector}\par
00955         self.create_file_selector({\cf22 "Select Root File(s) or Folder:"}, {\cf22 "OMICRON FILE"}, row=1, column=0)\par
00956 \par
00957         {\cf20 # Channel Input (Defaults to folder name)}\par
00958         self.valent({\cf22 "Channel Name:"}, {\cf22 "OMICRON CHANNEL"}, row=2, col=0)\par
00959 \par
00960         {\cf20 # GPS Start and End Time (Editable)}\par
00961         self.valent({\cf22 "GPS Start Time:"}, {\cf22 "OMICRON GPS-START"}, row=3, col=0)\par
00962         self.valent({\cf22 "GPS End Time:"}, {\cf22 "OMICRON GPS-END"}, row=4, col=0)\par
00963         self.create_output_path_selector({\cf22 "Select Output Folder:"}, {\cf22 "OMICRON OUTPUT"}, row=5, column=0)\par
00964     \par
00965         {\cf20 # Button Frame}\par
00966         button_frame = tk.Frame(self.scrollable_frame, bd=2, relief={\cf22 "groove"}, padx=5, pady=5)\par
00967         button_frame.grid(row=10, column=0, columnspan=4, pady=10, sticky={\cf22 "ew"})\par
00968         self.run_button = tk.Button(button_frame, text={\cf22 "Run Omicron Plot"}, command=self.run_omicron_plot)\par
00969         self.run_button.pack(side={\cf22 "left"}, padx=20)\par
00970 \par
00971         {\cf20 # Image Display Frame}\par
00972         self.image_frame = tk.Frame(self.scrollable_frame)\par
00973         self.image_frame.grid(row=11, column=0, columnspan=4, pady=10, sticky={\cf22 "ew"})\par
00974 \par
00975         self.image_label = tk.Label(self.image_frame, text={\cf22 "No Plot Available"}, width=50, height=25, bg={\cf22 "gray"})\par
00976         self.image_label.pack()\par
00977 \par
00978         {\cf20 # Navigation Buttons}\par
00979         nav_frame = tk.Frame(self.scrollable_frame)\par
00980         nav_frame.grid(row=12, column=0, columnspan=4, pady=10, sticky={\cf22 "ew"})\par
00981 \par
00982         self.prev_button = tk.Button(nav_frame, text={\cf22 "\'E2\'AC\'85 Previous"}, command=self.show_previous_plot, state=tk.DISABLED)\par
00983         self.prev_button.pack(side={\cf22 "left"}, padx=20)\par
00984 \par
00985         self.next_button = tk.Button(nav_frame, text={\cf22 "Next \'E2\'9E\'A1"}, command=self.show_next_plot, state=tk.DISABLED)\par
00986         self.next_button.pack(side={\cf22 "right"}, padx=20)\par
00987         self.progress = ttk.Progressbar(self.scrollable_frame, orient={\cf22 "horizontal"}, length=300, mode={\cf22 "indeterminate"})\par
00988         self.progress.grid(row=13, column=0, columnspan=4, pady=10, sticky={\cf22 "ew"})\par
00989 \par
00990     {\cf17 def }valent(self, label, key, frame=None, row=0, col=0, editable=True):\par
00991         target_frame = frame {\cf19 if} frame {\cf19 else} self.scrollable_frame\par
00992         tk.Label(target_frame, text=label).grid(row=row, column=col, sticky={\cf22 "w"}, padx=5, pady=5)\par
00993         var = tk.StringVar(value=self.config_data.get(key, {\cf22 ""}))\par
00994         entry = tk.Entry(target_frame, textvariable=var, width=15, state={\cf22 "normal"})  \par
00995         entry.grid(row=row, column=col + 1, sticky={\cf22 "ew"}, padx=5, pady=5)\par
00996         self.ui_elements[key] = var\par
00997 \par
00998     {\cf17 def }create_output_path_selector(self, label, key, frame=None, row=0, column=0):\par
00999         {\cf22 """Allows selecting an output folder."""}\par
01000         target_frame = frame {\cf19 if} frame {\cf19 else} self.scrollable_frame\par
01001         tk.Label(target_frame, text=label).grid(row=row, column=column, sticky={\cf22 "w"}, padx=5, pady=5)\par
01002 \par
01003         var = tk.StringVar(value=self.config_data.get(key, {\cf22 ""}))\par
01004         button = tk.Button(target_frame, text={\cf22 "Browse"}, command={\cf17 lambda}: self.select_output_folder(var))\par
01005         button.grid(row=row, column=2, padx=5, pady=5)\par
01006 \par
01007         entry = tk.Entry(target_frame, textvariable=var, width=40, state={\cf22 "readonly"})\par
01008         entry.grid(row=row, column=1, sticky={\cf22 "ew"}, padx=5, pady=5)\par
01009         self.ui_elements[key] = var\par
01010 \par
01011     {\cf17 def }select_output_folder(self, var):\par
01012         {\cf22 """Allows selecting an output folder."""}\par
01013         folder_path = filedialog.askdirectory()  {\cf20 # Open directory selection dialog}\par
01014         {\cf19 if} folder_path:\par
01015             var.set(folder_path)  {\cf20 # Store the selected folder path}\par
01016 \par
01017     {\cf17 def }create_file_selector(self, label, key, frame=None, row=0, column=0):\par
01018         {\cf22 """Allows selecting either a single file or a folder containing `.root` files."""}\par
01019         target_frame = frame {\cf19 if} frame {\cf19 else} self.scrollable_frame\par
01020         tk.Label(target_frame, text=label).grid(row=row, column=column, sticky={\cf22 "w"}, padx=5, pady=5)\par
01021 \par
01022         var = tk.StringVar(value=self.config_data.get(key, {\cf22 ""}))\par
01023         button = tk.Button(target_frame, text={\cf22 "Browse"}, command={\cf17 lambda}: self.select_file_or_folder(var))\par
01024         button.grid(row=row, column=2, padx=5, pady=5)\par
01025 \par
01026         entry = tk.Entry(target_frame, textvariable=var, width=40, state={\cf22 "readonly"})\par
01027         entry.grid(row=row, column=1, sticky={\cf22 "ew"}, padx=5, pady=5)\par
01028         self.ui_elements[key] = var\par
01029 \par
01030     {\cf17 def }select_file_or_folder(self, var):\par
01031         {\cf22 """Allows selecting a folder (grabs all `.root` files) or an individual file."""}\par
01032         path = filedialog.askdirectory() {\cf19 or} filedialog.askopenfilename(filetypes=[({\cf22 "Root Files"}, {\cf22 "*.root"})])\par
01033 \par
01034         {\cf19 if} os.path.isdir(path):  {\cf20 # If a folder is selected}\par
01035             root_files = [os.path.join(path, f) {\cf19 for} f {\cf19 in} os.listdir(path) {\cf19 if} f.endswith({\cf22 ".root"})]\par
01036             {\cf19 if} {\cf19 not} root_files:\par
01037                 messagebox.showwarning({\cf22 "Warning"}, {\cf22 "No .root files found in selected folder."})\par
01038                 {\cf19 return}\par
01039             var.set(path)  {\cf20 # Store folder path}\par
01040             {\cf20 # Auto-set channel name based on folder name}\par
01041             folder_name = os.path.basename(path).replace({\cf22 "\'EF\'80\'BA"}, {\cf22 ":"})\par
01042             self.ui_elements[{\cf22 "OMICRON CHANNEL"}].set(folder_name)\par
01043             {\cf20 #print("folder name ", folder_name)}\par
01044 \par
01045             {\cf20 # Convert all root file paths to WSL format}\par
01046             root_files_wsl = []\par
01047             {\cf19 for} f {\cf19 in} root_files:\par
01048                 abs_path = os.path.abspath(f)  {\cf20 # Get the absolute path}\par
01049                 norm_path = os.path.normpath(abs_path)  {\cf20 # Normalize path to handle slashes properly}\par
01050                 wsl_path = {\cf22 "/mnt/c/"} + norm_path.replace({\cf22 "\\\\"}, {\cf22 "/"})[2:]  {\cf20 # Convert backslashes to slashes and remove "C:" part}\par
01051                 root_files_wsl.append(wsl_path)\par
01052             {\cf20 #print("Converted root files:", root_files_wsl)}\par
01053 \par
01054         {\cf19 elif} path:  {\cf20 # If a single file is selected}\par
01055             var.set(path)\par
01056             {\cf20 # Auto-set channel name based on file's parent folder}\par
01057             folder_name = os.path.basename(os.path.dirname(path)).replace({\cf22 "_"}, {\cf22 ":"})\par
01058             self.ui_elements[{\cf22 "OMICRON CHANNEL"}].set(folder_name)\par
01059 \par
01060             {\cf20 # Convert the single file path to WSL format}\par
01061             abs_path = os.path.abspath(path)  {\cf20 # Get the absolute path}\par
01062             norm_path = os.path.normpath(abs_path)  {\cf20 # Normalize path to handle slashes properly}\par
01063             path_wsl = {\cf22 "/mnt/c/"} + norm_path.replace({\cf22 "\\\\"}, {\cf22 "/"})[2:]  {\cf20 # Convert backslashes to slashes and remove "C:" part}\par
01064             {\cf20 #print("Converted file path:", path_wsl)}\par
01065 \par
01066             {\cf19 return} path_wsl  {\cf20 # Return the WSL-formatted path for use in further commands}\par
01067 \par
01068     {\cf17 def }run_omicron_plot(self):\par
01069         selected_path = self.ui_elements[{\cf22 "OMICRON FILE"}].get()\par
01070         gps_start = self.ui_elements[{\cf22 "OMICRON GPS-START"}].get()\par
01071         gps_end = self.ui_elements[{\cf22 "OMICRON GPS-END"}].get()\par
01072         channel_name = self.ui_elements[{\cf22 "OMICRON CHANNEL"}].get()\par
01073         output_folder = self.ui_elements[{\cf22 "OMICRON OUTPUT"}].get()  {\cf20 # Get the output folder}\par
01074 \par
01075         {\cf19 if} {\cf19 not} selected_path {\cf19 or} {\cf19 not} gps_start {\cf19 or} {\cf19 not} gps_end {\cf19 or} {\cf19 not} channel_name:\par
01076             messagebox.showerror({\cf22 "Error"}, {\cf22 "Please fill in all fields!"})\par
01077             {\cf19 return}\par
01078 \par
01079         {\cf20 # Convert selected path to WSL format}\par
01080         {\cf19 if} os.path.isdir(selected_path):\par
01081             root_files = []\par
01082             {\cf19 for} f {\cf19 in} os.listdir(selected_path):\par
01083                 {\cf19 if} f.endswith({\cf22 ".root"}):\par
01084                     abs_path = os.path.abspath(os.path.join(selected_path, f))  {\cf20 # Get the absolute path}\par
01085                     norm_path = os.path.normpath(abs_path)  {\cf20 # Normalize path to handle slashes properly}\par
01086                     wsl_path = {\cf22 "/mnt/c/"} + norm_path.replace({\cf22 "\\\\"}, {\cf22 "/"})[2:]  {\cf20 # Convert backslashes to slashes and remove "C:" part}\par
01087                     root_files.append(wsl_path)\par
01088             input_files = {\cf22 " "}.join(root_files)\par
01089 \par
01090             {\cf20 #print("Converted root files:", root_files)}\par
01091             input_files = {\cf22 " "}.join(root_files)\par
01092 \par
01093             {\cf20 #print("Converted root files:", root_files)}\par
01094 \par
01095         {\cf19 else}:\par
01096             {\cf20 # Convert the single file to WSL format}\par
01097             abs_path = os.path.abspath(selected_path)  {\cf20 # Get the absolute path}\par
01098             norm_path = os.path.normpath(abs_path)  {\cf20 # Normalize path to handle slashes properly}\par
01099             input_files = {\cf22 "/mnt/c/"} + norm_path.replace({\cf22 "\\\\"}, {\cf22 "/"})[2:]  {\cf20 # Convert backslashes to slashes and remove "C:" part}\par
01100             {\cf20 #print("Converted file path:", input_files)}\par
01101 \par
01102         {\cf20 # output_folder_name = f"\{channel_name\}_\{gps_start\}_\{gps_end\}".replace(":", "_")}\par
01103         {\cf20 # #print("*****************",channel_name)}\par
01104         {\cf20 # output_folder_path = os.path.join(os.getcwd(), output_folder_name)}\par
01105 \par
01106         {\cf20 # os.makedirs(output_folder_path, exist_ok=True)}\par
01107         {\cf20 # abs_path = os.path.abspath(output_folder_path).replace("\\\\", "/")}\par
01108         {\cf20 # drive_letter = abs_path[0].lower()}\par
01109         {\cf20 # path_without_drive = abs_path[3:]}\par
01110         {\cf20 # self.wsl_project_dir = f"/mnt/\{drive_letter\}/\{path_without_drive\}"}\par
01111 \par
01112         {\cf20 # #print(f"WSL Project Directory: \{self.wsl_project_dir\}")}\par
01113 \par
01114         {\cf20 #print("++++++++++",input_files,"++++++++++++++")}\par
01115         {\cf20 # Construct the command to run omicron-plot4}\par
01116         print(output_folder)\par
01117         self.wsl_project_dir = output_folder\par
01118         output_fil = {\cf22 "/mnt/c/"} + output_folder.replace({\cf22 "\\\\"}, {\cf22 "/"})[2:]  {\cf20 # Convert backslashes to slashes and remove "C:" part}\par
01119         output_fil = output_fil.replace({\cf22 "//"}, {\cf22 "/"})\par
01120         print(output_fil)\par
01121         output_folder = output_fil\par
01122         command = [\par
01123             {\cf22 "export C_INCLUDE_PATH=/usr/include"},\par
01124             {\cf22 "export CPLUS_INCLUDE_PATH=/usr/include"}, \par
01125             f{\cf22 "omicron-plot file=\{input_files\} gps-start=\{gps_start\} gps-end=\{gps_end\} outformat=png outdir=\{output_fil\}"} \par
01126         ]\par
01127         {\cf20 # Use threading to run the command in the background}\par
01128         threading.Thread(target=self.execute_command, args=(command, gps_start, gps_end, self.wsl_project_dir), daemon={\cf17 True}).start()\par
01129 \par
01130     {\cf17 def }execute_command(self, command, gps_start, gps_end, output_folder):\par
01131         {\cf22 """Runs the Omicron plot command inside a full WSL shell session with logging."""}\par
01132         {\cf19 try}:\par
01133             {\cf19 for} cmd {\cf19 in} command:\par
01134                 log_message = f{\cf22 "Executing WSL Command: \{cmd\}"}\par
01135                 logging.info(log_message)\par
01136                 {\cf20 #print(log_message)  # Debug Output}\par
01137 \par
01138                 {\cf20 # Start loading animation}\par
01139                 self.start_loading()\par
01140 \par
01141                 {\cf20 # Run full WSL session and execute command}\par
01142                 wsl_command = f{\cf22 "wsl bash -ic '\{cmd\}'"}\par
01143                 process = subprocess.Popen(wsl_command, shell={\cf17 True}, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text={\cf17 True})\par
01144             \par
01145                 {\cf19 for} line {\cf19 in} process.stdout:\par
01146                     logging.info(line.strip())  {\cf20 # Log output}\par
01147                    {\cf20 # print(line.strip())  # Console output}\par
01148                     self.update_progress(line.strip())  {\cf20 # Update progress bar}\par
01149 \par
01150                 {\cf19 for} line {\cf19 in} process.stderr:\par
01151                     logging.error(line.strip())  {\cf20 # Log errors}\par
01152                    {\cf20 # print("ERROR:", line.strip())}\par
01153 \par
01154                 {\cf20 # Stop loading and load plots}\par
01155                 self.stop_loading()\par
01156                 self.load_plots(output_folder)\par
01157                 logging.info({\cf22 "Omicron plot execution completed successfully."})\par
01158 \par
01159         {\cf19 except} Exception {\cf17 as} e:\par
01160             error_message = f{\cf22 "Execution failed: \{e\}"}\par
01161             logging.error(error_message)\par
01162             {\cf20 #print(error_message)}\par
01163             self.stop_loading()\par
01164 \par
01165 \par
01166     {\cf17 def }show_plot(self):\par
01167         {\cf22 """Displays the current plot in the GUI."""}\par
01168         {\cf19 if} {\cf19 not} self.plot_files:\par
01169             self.image_label.config(text={\cf22 "No plots available"}, image={\cf22 ""}, bg={\cf22 "gray"})\par
01170             {\cf19 return}\par
01171 \par
01172         {\cf19 try}:\par
01173             {\cf20 # Ensure current_plot_index is within bounds}\par
01174             {\cf19 if} 0 <= self.current_plot_index < len(self.plot_files):\par
01175                 image_path = self.plot_files[self.current_plot_index]\par
01176                 logging.info(f{\cf22 "Displaying plot: \{image_path\}"})  {\cf20 # Log the displayed plot}\par
01177 \par
01178                 image = Image.open(image_path)\par
01179 \par
01180                 {\cf20 # Set the size of the image label based on the size of the image}\par
01181                 image_width, image_height = image.size\par
01182 \par
01183                 {\cf20 # Set max width and height based on available space}\par
01184                 max_width = 600  {\cf20 # You can adjust this value}\par
01185                 max_height = 300  {\cf20 # You can adjust this value}\par
01186 \par
01187                 {\cf20 # Resize the image to fit within the available space}\par
01188                 {\cf19 if} image_width > max_width {\cf19 or} image_height > max_height:\par
01189                     image = image.resize((max_width, int(max_width * image_height / image_width)), Image.LANCZOS)\par
01190 \par
01191                 self.photo = ImageTk.PhotoImage(image)  {\cf20 # Store reference to prevent garbage collection}\par
01192 \par
01193                 {\cf20 # Resize the image_label widget to match the image size}\par
01194                 self.image_label.config(image=self.photo, text={\cf22 ""}, bg={\cf22 "white"}, width=max_width, height=max_height)\par
01195                 self.image_label.image = self.photo  {\cf20 # Explicitly store the image reference}\par
01196 \par
01197             {\cf19 else}:\par
01198                 logging.error(f{\cf22 "Invalid plot index: \{self.current_plot_index\}"})\par
01199                 self.image_label.config(text={\cf22 "Invalid plot index"}, bg={\cf22 "red"})\par
01200 \par
01201         {\cf19 except} Exception {\cf17 as} e:\par
01202             logging.error(f{\cf22 "Error displaying plot: \{e\}"})\par
01203             self.image_label.config(text={\cf22 "Error loading plot"}, bg={\cf22 "red"})\par
01204 \par
01205     {\cf17 def }load_plots(self, folder):\par
01206         {\cf22 """Loads the plots from WSL and updates the GUI."""}\par
01207         {\cf19 try}:\par
01208             {\cf19 if} {\cf19 not} os.path.exists(folder):\par
01209                 {\cf19 raise} FileNotFoundError(f{\cf22 "The folder \{folder\} does not exist."})\par
01210             \par
01211             self.plot_files = sorted([os.path.join(folder, f) {\cf19 for} f {\cf19 in} os.listdir(folder) {\cf19 if} f.endswith({\cf22 ".png"})])\par
01212             \par
01213             {\cf19 if} self.plot_files:\par
01214                 self.current_plot_index = 0\par
01215                 self.show_plot()\par
01216                 self.update_navigation_buttons()\par
01217             {\cf19 else}:\par
01218                 logging.warning({\cf22 "No PNG files found in the folder."})\par
01219                 messagebox.showwarning({\cf22 "Warning"}, {\cf22 "No plots found. Check if Omicron-plot executed correctly."})\par
01220                 \par
01221         {\cf19 except} FileNotFoundError {\cf17 as} e:\par
01222             logging.error(f{\cf22 "Folder not found: \{e\}"})\par
01223             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Folder not found: \{e\}"})\par
01224         {\cf19 except} Exception {\cf17 as} e:\par
01225             logging.error(f{\cf22 "Failed to load plots: \{e\}"})\par
01226             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Failed to load plots: \{e\}"})\par
01227 \par
01228 \par
01229 \par
01230 \par
01231 {\cf17 class }TimeSrswaveform:\par
01232     {\cf17 def }__init__(self, root):\par
01233         self.root = root\par
01234         self.root.grid_rowconfigure(0, weight=1)\par
01235         self.root.grid_columnconfigure(0, weight=1)\par
01236 \par
01237         {\cf20 # Canvas for scrolling}\par
01238         self.canvas = tk.Canvas(root)\par
01239         self.scroll_y = ttk.Scrollbar(root, orient={\cf22 "vertical"}, command=self.canvas.yview)\par
01240         self.scroll_x = ttk.Scrollbar(root, orient={\cf22 "horizontal"}, command=self.canvas.xview)\par
01241         self.scroll_y.grid(row=0, column=1, sticky={\cf22 "ns"})\par
01242         self.scroll_x.grid(row=1, column=0, sticky={\cf22 "ew"})\par
01243 \par
01244         self.frame = ttk.Frame(self.canvas)\par
01245         self.frame.bind({\cf22 "<Configure>"}, {\cf17 lambda} e: self.canvas.configure(scrollregion=self.canvas.bbox({\cf22 "all"})))\par
01246 \par
01247         self.canvas.create_window((0, 0), window=self.frame, anchor={\cf22 "nw"})\par
01248         self.canvas.configure(yscrollcommand=self.scroll_y.set, xscrollcommand=self.scroll_x.set)\par
01249         self.canvas.grid(row=0, column=0, sticky={\cf22 "nsew"})  \par
01250 \par
01251 \par
01252         {\cf20 # Main Input Frame}\par
01253         input_frame = ttk.LabelFrame(self.frame, text={\cf22 "Input Parameters"})\par
01254         input_frame.grid(row=0, column=0, padx=5, pady=5, sticky={\cf22 "nsew"})\par
01255 \par
01256         {\cf20 # Catalog Selection}\par
01257         ttk.Label(input_frame, text={\cf22 "Catalog:"}).grid(row=0, column=0, padx=5, pady=5, sticky={\cf22 "w"})\par
01258         self.catalog_dropdown = ttk.Combobox(input_frame, state={\cf22 "readonly"})\par
01259         self.catalog_dropdown.grid(row=0, column=1, padx=5, pady=5, sticky={\cf22 "ew"})\par
01260         self.catalog_dropdown.bind({\cf22 "<<ComboboxSelected>>"}, self.fetch_events)\par
01261 \par
01262         {\cf20 # Event Selection}\par
01263         ttk.Label(input_frame, text={\cf22 "Event:"}).grid(row=1, column=0, padx=5, pady=5, sticky={\cf22 "w"})\par
01264         self.event_dropdown = ttk.Combobox(input_frame, state={\cf22 "readonly"})\par
01265         self.event_dropdown.grid(row=1, column=1, padx=5, pady=5, sticky={\cf22 "ew"})\par
01266         self.event_dropdown.bind({\cf22 "<<ComboboxSelected>>"},self.fetch_event_details)\par
01267 \par
01268         {\cf20 # Run Selection}\par
01269         ttk.Label(input_frame, text={\cf22 "Run:"}).grid(row=2, column=0, padx=5, pady=5, sticky={\cf22 "w"})\par
01270         self.run_dropdown = ttk.Combobox(input_frame, state={\cf22 "readonly"})\par
01271         self.run_dropdown.grid(row=2, column=1, padx=5, pady=5, sticky={\cf22 "ew"})\par
01272 \par
01273         {\cf20 # Detector Selection}\par
01274         ttk.Label(input_frame, text={\cf22 "Detector:"}).grid(row=1, column=2, padx=5, pady=5, sticky={\cf22 "w"})\par
01275         self.detector_dropdown = tk.Listbox(input_frame, selectmode={\cf22 "multiple"}, height=3)\par
01276         {\cf19 for} det {\cf19 in} [{\cf22 "L1"}, {\cf22 "H1"}, {\cf22 "V1"}]:\par
01277             self.detector_dropdown.insert(tk.END, det)\par
01278         self.detector_dropdown.grid(row=1, column=3, padx=5, pady=5, sticky={\cf22 "ew"})\par
01279         self.detector_dropdown.bind({\cf22 "<<ComboboxSelected>>"},self.update_urls)\par
01280 \par
01281         {\cf20 # GPS Time Inputs}\par
01282         ttk.Label(input_frame, text={\cf22 "Start Time:"}).grid(row=0, column=2, padx=5, pady=5, sticky={\cf22 "w"})\par
01283         self.gps_start_entry = ttk.Entry(input_frame, width=20)\par
01284         self.gps_start_entry.grid(row=0, column=3, padx=5, pady=5, sticky={\cf22 "ew"})\par
01285 \par
01286         ttk.Label(input_frame, text={\cf22 "End Time (Optional):"}).grid(row=0, column=4, padx=5, pady=5, sticky={\cf22 "w"})\par
01287         self.gps_end_entry = ttk.Entry(input_frame, width=20)\par
01288         self.gps_end_entry.grid(row=0, column=5, padx=5, pady=5, sticky={\cf22 "ew"})\par
01289 \par
01290         {\cf20 # GPS \'E2\'87\'84 UTC Converter}\par
01291         self.mode = tk.StringVar(value={\cf22 "gps_to_utc"})\par
01292         conversion_frame = ttk.LabelFrame(self.frame, text={\cf22 "GPS \'E2\'87\'84 UTC Converter"})\par
01293         conversion_frame.grid(row=1, column=0, padx=5, pady=5, sticky={\cf22 "nsew"})\par
01294 \par
01295         self.convert_entry = ttk.Entry(conversion_frame, width=20)\par
01296         self.convert_entry.grid(row=0, column=0, padx=5, pady=5)\par
01297 \par
01298         self.convert_button = ttk.Button(conversion_frame, text={\cf22 "Convert"}, command=self.convert_time)\par
01299         self.convert_button.grid(row=0, column=1, padx=5, pady=5)\par
01300 \par
01301         self.result_label = ttk.Label(conversion_frame, text={\cf22 "Result: "})\par
01302         self.result_label.grid(row=0, column=2, padx=5, pady=5)\par
01303 \par
01304         self.toggle_button = ttk.Button(conversion_frame, text={\cf22 "Switch to UTC \'E2\'86\'92 GPS"}, command=self.toggle_mode)\par
01305         self.toggle_button.grid(row=0, column=3, padx=5, pady=5)\par
01306 \par
01307         {\cf20 # Event URLs Frame}\par
01308         url_frame = ttk.LabelFrame(self.frame, text={\cf22 "Event URLs"})\par
01309         url_frame.grid(row=1, column=1, padx=5, pady=5, sticky={\cf22 "nsew"})\par
01310 \par
01311         self.url_dropdown = ttk.Combobox(url_frame, state={\cf22 "readonly"})\par
01312         self.url_dropdown.grid(row=0, column=0, padx=5, pady=5, sticky={\cf22 "ew"})\par
01313 \par
01314         self.copy_button = ttk.Button(url_frame, text={\cf22 "Copy URL"}, command=self.copy_url)\par
01315         self.copy_button.grid(row=0, column=1, padx=5, pady=5, sticky={\cf22 "ew"})\par
01316         \par
01317         {\cf20 # Save Parameters Button}\par
01318         self.save_button = ttk.Button(input_frame, text={\cf22 "Save Parameters"}, command=self.save_params)\par
01319         self.save_button.grid(row=2, column=0, columnspan=2, padx=5, pady=10, sticky={\cf22 "ew"})\par
01320         self.plot_frame = ttk.Frame(self.frame)\par
01321         self.plot_frame.grid(row=3, column=0, padx=5, pady=5, sticky={\cf22 "nsew"})\par
01322 \par
01323         self.prefetch_data()\par
01324         self.plot_button = tk.Button(root, text={\cf22 "Plot TimeSeries"}, command={\cf17 lambda}: self.plot_gw_event(self.catalog_dropdown.get(),[self.detector_dropdown.get(idx) {\cf19 for} idx {\cf19 in} self.detector_dropdown.curselection()],float(self.gps_start_entry.get()),float(self.gps_end_entry.get())))\par
01325         self.plot_button.grid(row=0, column=3, columnspan=2, pady=10)\par
01326 \par
01327 \par
01328     {\cf17 def }copy_url(self):\par
01329         selected_url = self.url_dropdown.get()\par
01330         {\cf19 if} selected_url:\par
01331             self.root.clipboard_clear()\par
01332             self.root.clipboard_append(selected_url)\par
01333             self.root.update()  {\cf20 # Keep clipboard data even after the app closes}\par
01334             messagebox.showinfo({\cf22 "Copied"}, {\cf22 "URL copied to clipboard!"})\par
01335         {\cf19 else}:\par
01336             messagebox.showwarning({\cf22 "Warning"}, {\cf22 "No URL selected!"})\par
01337 \par
01338     {\cf20 # \'F0\'9F\'94\'B9 Prefetch Catalogs & Runs at Startup}\par
01339     {\cf17 def }prefetch_data(self):\par
01340         {\cf19 try}:\par
01341             catalogs = find_datasets(type={\cf22 "catalog"})\par
01342             self.catalog_dropdown[{\cf22 "values"}] = catalogs\par
01343             {\cf19 if} catalogs:\par
01344                 self.catalog_dropdown.current(0)\par
01345 \par
01346             runs = find_datasets(type={\cf22 "run"})\par
01347             self.run_dropdown[{\cf22 "values"}] = runs\par
01348             {\cf19 if} runs:\par
01349                 self.run_dropdown.current(0)\par
01350 \par
01351         {\cf19 except} Exception {\cf17 as} e:\par
01352             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Error fetching catalogs/runs: \{e\}"})\par
01353 \par
01354     {\cf20 # \'F0\'9F\'94\'B9 Fetch Events Based on Selected Catalog}\par
01355     {\cf17 def }fetch_events(self, event=None):\par
01356         selected_catalog = self.catalog_dropdown.get()\par
01357         {\cf19 if} {\cf19 not} selected_catalog:\par
01358             {\cf19 return}\par
01359 \par
01360         {\cf19 try}:\par
01361             events = datasets.find_datasets(type={\cf22 "events"}, catalog=selected_catalog)\par
01362             self.event_dropdown[{\cf22 "values"}] = events\par
01363             {\cf19 if} events:\par
01364                 self.event_dropdown.current(0)\par
01365                 self.fetch_event_details()  {\cf20 # Auto-update details for first event}\par
01366 \par
01367         {\cf19 except} Exception {\cf17 as} e:\par
01368             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Error fetching events: \{e\}"})\par
01369 \par
01370     {\cf20 # \'F0\'9F\'94\'B9 Fetch Event GPS & URLs}\par
01371     {\cf17 def }fetch_event_details(self, event=None):\par
01372         selected_event = self.event_dropdown.get()\par
01373         {\cf19 if} {\cf19 not} selected_event:\par
01374             {\cf19 return}\par
01375         {\cf19 try}:\par
01376             gps_time = event_gps(selected_event)\par
01377             self.gps_start_entry.delete(0, tk.END)\par
01378             self.gps_start_entry.insert(0, str(gps_time))\par
01379 \par
01380             self.update_urls()\par
01381 \par
01382         {\cf19 except} Exception {\cf17 as} e:\par
01383             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Error fetching event details: \{e\}"})\par
01384 \par
01385     {\cf20 # \'F0\'9F\'94\'B9 Update URLs Based on Event & Detector}\par
01386     {\cf17 def }update_urls(self, event=None):\par
01387         selected_event = self.event_dropdown.get()\par
01388         selected_detectors = [self.detector_dropdown.get(idx) {\cf19 for} idx {\cf19 in} self.detector_dropdown.curselection()]\par
01389         {\cf19 if} {\cf19 not} selected_event {\cf19 or} {\cf19 not} selected_detectors:\par
01390             {\cf19 return}\par
01391 \par
01392         {\cf19 try}:\par
01393             urls = get_event_urls(selected_event)\par
01394             filtered_urls = [url {\cf19 for} url {\cf19 in} urls {\cf19 if} any(det {\cf19 in} url {\cf19 for} det {\cf19 in} selected_detectors)]\par
01395             self.url_dropdown[{\cf22 "values"}] = filtered_urls\par
01396             {\cf19 if} filtered_urls:\par
01397                 self.url_dropdown.current(0)\par
01398 \par
01399         {\cf19 except} Exception {\cf17 as} e:\par
01400             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Error fetching event URLs: \{e\}"})\par
01401 \par
01402     {\cf20 # \'F0\'9F\'94\'B9 Toggle GPS \'E2\'87\'84 UTC Mode}\par
01403     {\cf17 def }toggle_mode(self):\par
01404         {\cf19 if} self.mode.get() == {\cf22 "gps_to_utc"}:\par
01405             self.mode.set({\cf22 "utc_to_gps"})\par
01406             self.toggle_button.config(text={\cf22 "Switch to GPS \'E2\'86\'92 UTC"})\par
01407         {\cf19 else}:\par
01408             self.mode.set({\cf22 "gps_to_utc"})\par
01409             self.toggle_button.config(text={\cf22 "Switch to UTC \'E2\'86\'92 GPS"})\par
01410 \par
01411     {\cf20 # \'F0\'9F\'94\'B9 Convert GPS \'E2\'87\'84 UTC}\par
01412     {\cf17 def }convert_time(self):\par
01413         time_input = self.convert_entry.get().strip()\par
01414         {\cf19 if} {\cf19 not} time_input:\par
01415             messagebox.showerror({\cf22 "Error"}, {\cf22 "Please enter a valid time!"})\par
01416             {\cf19 return}\par
01417 \par
01418         {\cf19 try}:\par
01419             {\cf19 if} self.mode.get() == {\cf22 "gps_to_utc"}:\par
01420                 gps_time = float(time_input)\par
01421                 utc_time = gp_time.from_gps(int(gps_time))\par
01422                 self.result_label.config(text=f{\cf22 "UTC Time: \{utc_time\}"})\par
01423             {\cf19 else}:\par
01424                 utc_time = datetime.strptime(time_input, {\cf22 "%Y-%m-%d %H:%M:%S"})\par
01425                 gps_time = gp_time.to_gps(utc_time)\par
01426                 self.result_label.config(text=f{\cf22 "GPS Time: \{gps_time\}"})\par
01427 \par
01428         {\cf19 except} Exception {\cf17 as} e:\par
01429             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Conversion failed: \{e\}"})\par
01430  \par
01431 \par
01432     {\cf17 def }save_params(self):\par
01433         {\cf22 """Overwrite 'gwfparams.csv' with the latest input values, including headers."""}\par
01434         file_path = {\cf22 "gwfparams.csv"}\par
01435 \par
01436         {\cf20 # Define column headers}\par
01437         headers = [{\cf22 "Catalog"}, {\cf22 "Event"}, {\cf22 "Run"}, {\cf22 "Detector(s)"}, {\cf22 "Start Time (GPS)"}, {\cf22 "End Time (GPS)"}, {\cf22 "Event URL"}]\par
01438 \par
01439         {\cf20 # Collect values}\par
01440         selected_detectors = {\cf22 ", "}.join([self.detector_dropdown.get(idx) {\cf19 for} idx {\cf19 in} self.detector_dropdown.curselection()])\par
01441         params = [\par
01442             self.catalog_dropdown.get(),\par
01443             self.event_dropdown.get(),\par
01444             self.run_dropdown.get(),\par
01445             selected_detectors,  {\cf20 # Updated for multiple detectors}\par
01446             self.gps_start_entry.get(),\par
01447             self.gps_end_entry.get(),\par
01448             self.url_dropdown.get(),  {\cf20 # Assuming this holds the event URL}\par
01449         ]\par
01450 \par
01451         {\cf19 try}:\par
01452             {\cf17 with} open(file_path, mode={\cf22 "w"}, newline={\cf22 ""}) {\cf17 as} file:  {\cf20 # "w" mode overwrites the file}\par
01453                 writer = csv.writer(file)\par
01454                 writer.writerow(headers)  {\cf20 # Always write headers}\par
01455                 writer.writerow(params)   {\cf20 # Write only the latest values}\par
01456 \par
01457             messagebox.showinfo({\cf22 "Success"}, f{\cf22 "Parameters saved to \{file_path\}"})\par
01458 \par
01459         {\cf19 except} Exception {\cf17 as} e:\par
01460             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Failed to save parameters: \{e\}"})\par
01461 \par
01462     {\cf17 def }plot_gw_event(self, event_name, detectors, gps_start, gps_end):\par
01463         {\cf22 """Plot gravitational wave event data for multiple detectors."""}\par
01464 \par
01465         {\cf20 # Generate the figure and axes}\par
01466         fig, ax = plt.subplots(figsize=(8, 5))\par
01467         colors = [{\cf22 'b'}, {\cf22 'r'}, {\cf22 'g'}]  {\cf20 # Blue, Red, Green for H1, L1, V1}\par
01468 \par
01469         {\cf19 for} i, det {\cf19 in} enumerate(detectors):\par
01470             {\cf19 try}:\par
01471                 {\cf20 # Fetch GWOSC data for each detector}\par
01472                 data = TimeSeries.fetch_open_data(det, gps_start, gps_end, verbose={\cf17 True})\par
01473 \par
01474                 {\cf20 # Plot with different colors}\par
01475                 ax.plot(data.times, data, label=f{\cf22 "\{det\} - \{event_name\}"}, color=colors[i % len(colors)])\par
01476 \par
01477             {\cf19 except} Exception {\cf17 as} e:\par
01478                 print(f{\cf22 "Error fetching data for \{det\}: \{e\}"})\par
01479 \par
01480         {\cf20 # Labels and grid}\par
01481         ax.set_xlabel({\cf22 "Time (s)"})\par
01482         ax.set_ylabel({\cf22 "Strain"})\par
01483         ax.set_title(f{\cf22 "Gravitational Wave Event: \{event_name\}"})\par
01484         ax.legend()\par
01485         ax.grid({\cf17 True})\par
01486 \par
01487         {\cf20 # Improve layout}\par
01488         plt.tight_layout()\par
01489 \par
01490         {\cf20 # Embed plot in Tkinter}\par
01491         canvas = FigureCanvasTkAgg(fig, master=self.root)\par
01492         canvas_widget = canvas.get_tk_widget()\par
01493         canvas_widget.grid(row=2, column=0, columnspan=4, sticky={\cf22 "nsew"})\par
01494         canvas.draw()\par
01495 \par
01496         {\cf20 # Add Matplotlib toolbar}\par
01497         toolbar_fft = NavigationToolbar2Tk(canvas, self.root)\par
01498         toolbar_fft.grid(row=3, column=0, columnspan=1, pady=5)\par
01499 \par
01500         {\cf20 # Save Button}\par
01501         {\cf17 def }save_plot():\par
01502             file_path = filedialog.asksaveasfilename(defaultextension={\cf22 ".png"}, filetypes=[({\cf22 "PNG files"}, {\cf22 "*.png"}), ({\cf22 "All Files"}, {\cf22 "*.*"})])\par
01503             {\cf19 if} file_path:\par
01504                 fig.savefig(file_path)\par
01505                 print(f{\cf22 "Plot saved as \{file_path\}"})\par
01506 \par
01507         {\cf20 # Configure grid for resizing}\par
01508         self.root.grid_rowconfigure(0, weight=1)\par
01509         self.root.grid_columnconfigure(0, weight=1)\par
01510         self.root.grid_columnconfigure(1, weight=1)\par
01511 \par
01512         \par
01513 \par
01515 {\cf17 class }FFT:\par
01516     {\cf17 def }__init__(self, root):\par
01517         self.root = root\par
01518         self.root.grid_rowconfigure(0, weight=1)\par
01519         self.root.grid_columnconfigure(0, weight=1)\par
01520 \par
01521         {\cf20 # Canvas for scrolling}\par
01522         self.canvas = tk.Canvas(root)\par
01523         self.scroll_y = ttk.Scrollbar(root, orient={\cf22 "vertical"}, command=self.canvas.yview)\par
01524         self.scroll_x = ttk.Scrollbar(root, orient={\cf22 "horizontal"}, command=self.canvas.xview)\par
01525         self.scroll_y.grid(row=0, column=1, sticky={\cf22 "ns"})\par
01526         self.scroll_x.grid(row=1, column=0, sticky={\cf22 "ew"})\par
01527 \par
01528         self.frame = ttk.Frame(self.canvas)\par
01529         self.frame.bind({\cf22 "<Configure>"}, {\cf17 lambda} e: self.canvas.configure(scrollregion=self.canvas.bbox({\cf22 "all"})))\par
01530 \par
01531         self.canvas.create_window((0, 0), window=self.frame, anchor={\cf22 "nw"})\par
01532         self.canvas.configure(yscrollcommand=self.scroll_y.set, xscrollcommand=self.scroll_x.set)\par
01533         self.canvas.grid(row=0, column=0, sticky={\cf22 "nsew"})  \par
01534 \par
01535 \par
01536         {\cf20 # Main Input Frame}\par
01537         input_frame = ttk.LabelFrame(self.frame, text={\cf22 "Input Parameters"})\par
01538         input_frame.grid(row=0, column=0, padx=5, pady=5, sticky={\cf22 "nsew"})\par
01539 \par
01540         {\cf20 # Catalog Selection}\par
01541         ttk.Label(input_frame, text={\cf22 "Catalog:"}).grid(row=0, column=0, padx=5, pady=5, sticky={\cf22 "w"})\par
01542         self.catalog_dropdown = ttk.Combobox(input_frame, state={\cf22 "readonly"})\par
01543         self.catalog_dropdown.grid(row=0, column=1, padx=5, pady=5, sticky={\cf22 "ew"})\par
01544         self.catalog_dropdown.bind({\cf22 "<<ComboboxSelected>>"}, self.fetch_events)\par
01545 \par
01546         {\cf20 # Event Selection}\par
01547         ttk.Label(input_frame, text={\cf22 "Event:"}).grid(row=1, column=0, padx=5, pady=5, sticky={\cf22 "w"})\par
01548         self.event_dropdown = ttk.Combobox(input_frame, state={\cf22 "readonly"})\par
01549         self.event_dropdown.grid(row=1, column=1, padx=5, pady=5, sticky={\cf22 "ew"})\par
01550         self.event_dropdown.bind({\cf22 "<<ComboboxSelected>>"},self.fetch_event_details)\par
01551 \par
01552         {\cf20 # Run Selection}\par
01553         ttk.Label(input_frame, text={\cf22 "Run:"}).grid(row=2, column=0, padx=5, pady=5, sticky={\cf22 "w"})\par
01554         self.run_dropdown = ttk.Combobox(input_frame, state={\cf22 "readonly"})\par
01555         self.run_dropdown.grid(row=2, column=1, padx=5, pady=5, sticky={\cf22 "ew"})\par
01556 \par
01557         {\cf20 # Detector Selection}\par
01558         ttk.Label(input_frame, text={\cf22 "Detector:"}).grid(row=1, column=2, padx=5, pady=5, sticky={\cf22 "w"})\par
01559         self.detector_listbox = tk.Listbox(input_frame, selectmode={\cf22 "multiple"}, exportselection={\cf17 False}, height=3)\par
01560         {\cf19 for} detector {\cf19 in} [{\cf22 "L1"}, {\cf22 "H1"}, {\cf22 "V1"}]:\par
01561             self.detector_listbox.insert(tk.END, detector)\par
01562         self.detector_listbox.grid(row=1, column=3, padx=5, pady=5, sticky={\cf22 "ew"})\par
01563 \par
01564 \par
01565         {\cf20 # GPS Time Inputs}\par
01566         ttk.Label(input_frame, text={\cf22 "Start Time:"}).grid(row=0, column=2, padx=5, pady=5, sticky={\cf22 "w"})\par
01567         self.gps_start_entry = ttk.Entry(input_frame, width=20)\par
01568         self.gps_start_entry.grid(row=0, column=3, padx=5, pady=5, sticky={\cf22 "ew"})\par
01569 \par
01570         ttk.Label(input_frame, text={\cf22 "End Time (Optional):"}).grid(row=0, column=4, padx=5, pady=5, sticky={\cf22 "w"})\par
01571         self.gps_end_entry = ttk.Entry(input_frame, width=20)\par
01572         self.gps_end_entry.grid(row=0, column=5, padx=5, pady=5, sticky={\cf22 "ew"})\par
01573 \par
01574         {\cf20 # GPS \'E2\'87\'84 UTC Converter}\par
01575         self.mode = tk.StringVar(value={\cf22 "gps_to_utc"})\par
01576         conversion_frame = ttk.LabelFrame(self.frame, text={\cf22 "GPS \'E2\'87\'84 UTC Converter"})\par
01577         conversion_frame.grid(row=1, column=0, padx=5, pady=5, sticky={\cf22 "nsew"})\par
01578 \par
01579         self.convert_entry = ttk.Entry(conversion_frame, width=20)\par
01580         self.convert_entry.grid(row=0, column=0, padx=5, pady=5)\par
01581 \par
01582         self.convert_button = ttk.Button(conversion_frame, text={\cf22 "Convert"}, command=self.convert_time)\par
01583         self.convert_button.grid(row=0, column=1, padx=5, pady=5)\par
01584 \par
01585         self.result_label = ttk.Label(conversion_frame, text={\cf22 "Result: "})\par
01586         self.result_label.grid(row=0, column=2, padx=5, pady=5)\par
01587 \par
01588         self.toggle_button = ttk.Button(conversion_frame, text={\cf22 "Switch to UTC \'E2\'86\'92 GPS"}, command=self.toggle_mode)\par
01589         self.toggle_button.grid(row=0, column=3, padx=5, pady=5)\par
01590 \par
01591         {\cf20 # Event URLs Frame}\par
01592         url_frame = ttk.LabelFrame(self.frame, text={\cf22 "Event URLs"})\par
01593         url_frame.grid(row=1, column=1, padx=5, pady=5, sticky={\cf22 "nsew"})\par
01594 \par
01595         self.url_dropdown = ttk.Combobox(url_frame, state={\cf22 "readonly"})\par
01596         self.url_dropdown.grid(row=0, column=0, padx=5, pady=5, sticky={\cf22 "ew"})\par
01597 \par
01598         self.copy_button = ttk.Button(url_frame, text={\cf22 "Copy URL"}, command=self.copy_url)\par
01599         self.copy_button.grid(row=0, column=1, padx=5, pady=5, sticky={\cf22 "ew"})\par
01600         \par
01601         {\cf20 # Save Parameters Button}\par
01602         self.save_button = ttk.Button(input_frame, text={\cf22 "Save Parameters"}, command=self.save_params)\par
01603         self.save_button.grid(row=2, column=0, columnspan=2, padx=5, pady=10, sticky={\cf22 "ew"})\par
01604         self.plot_frame = ttk.Frame(self.frame)\par
01605         self.plot_frame.grid(row=3, column=0, padx=5, pady=5, sticky={\cf22 "nsew"})\par
01606         self.prefetch_data()\par
01607         self.fft_button = tk.Button(root, text={\cf22 "Run FFT"}, command={\cf17 lambda}: self.fft(\par
01608         self.catalog_dropdown.get(),[self.detector_listbox.get(i) {\cf19 for} i {\cf19 in} self.detector_listbox.curselection()],float(self.gps_start_entry.get()),float(self.gps_end_entry.get())))\par
01609         self.fft_button.grid(row=4, column=3, columnspan=2, pady=10)\par
01610 \par
01611     {\cf17 def }copy_url(self):\par
01612         selected_url = self.url_dropdown.get()\par
01613         {\cf19 if} selected_url:\par
01614             self.root.clipboard_clear()\par
01615             self.root.clipboard_append(selected_url)\par
01616             self.root.update()  {\cf20 # Keep clipboard data even after the app closes}\par
01617             messagebox.showinfo({\cf22 "Copied"}, {\cf22 "URL copied to clipboard!"})\par
01618         {\cf19 else}:\par
01619             messagebox.showwarning({\cf22 "Warning"}, {\cf22 "No URL selected!"})\par
01620 \par
01621     {\cf20 # \'F0\'9F\'94\'B9 Prefetch Catalogs & Runs at Startup}\par
01622     {\cf17 def }prefetch_data(self):\par
01623         {\cf19 try}:\par
01624             catalogs = find_datasets(type={\cf22 "catalog"})\par
01625             self.catalog_dropdown[{\cf22 "values"}] = catalogs\par
01626             {\cf19 if} catalogs:\par
01627                 self.catalog_dropdown.current(0)\par
01628 \par
01629             runs = find_datasets(type={\cf22 "run"})\par
01630             self.run_dropdown[{\cf22 "values"}] = runs\par
01631             {\cf19 if} runs:\par
01632                 self.run_dropdown.current(0)\par
01633 \par
01634         {\cf19 except} Exception {\cf17 as} e:\par
01635             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Error fetching catalogs/runs: \{e\}"})\par
01636 \par
01637     {\cf20 # \'F0\'9F\'94\'B9 Fetch Events Based on Selected Catalog}\par
01638     {\cf17 def }fetch_events(self, event=None):\par
01639         selected_catalog = self.catalog_dropdown.get()\par
01640         {\cf19 if} {\cf19 not} selected_catalog:\par
01641             {\cf19 return}\par
01642 \par
01643         {\cf19 try}:\par
01644             events = datasets.find_datasets(type={\cf22 "events"}, catalog=selected_catalog)\par
01645             self.event_dropdown[{\cf22 "values"}] = events\par
01646             {\cf19 if} events:\par
01647                 self.event_dropdown.current(0)\par
01648                 self.fetch_event_details()  {\cf20 # Auto-update details for first event}\par
01649 \par
01650         {\cf19 except} Exception {\cf17 as} e:\par
01651             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Error fetching events: \{e\}"})\par
01652 \par
01653     {\cf20 # \'F0\'9F\'94\'B9 Fetch Event GPS & URLs}\par
01654     {\cf17 def }fetch_event_details(self, event=None):\par
01655         selected_event = self.event_dropdown.get()\par
01656         {\cf19 if} {\cf19 not} selected_event:\par
01657             {\cf19 return}\par
01658         {\cf19 try}:\par
01659             gps_time = event_gps(selected_event)\par
01660             self.gps_start_entry.delete(0, tk.END)\par
01661             self.gps_start_entry.insert(0, str(gps_time))\par
01662 \par
01663             self.update_urls()\par
01664 \par
01665         {\cf19 except} Exception {\cf17 as} e:\par
01666             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Error fetching event details: \{e\}"})\par
01667 \par
01668     {\cf20 # \'F0\'9F\'94\'B9 Update URLs Based on Event & Detector}\par
01669     {\cf17 def }update_urls(self, event=None):\par
01670         selected_event = self.event_dropdown.get()\par
01671         selected_detectors = [self.detector_listbox.get(i) {\cf19 for} i {\cf19 in} self.detector_listbox.curselection()]\par
01672         {\cf19 if} {\cf19 not} selected_event {\cf19 or} {\cf19 not} selected_detectors:\par
01673             {\cf19 return}\par
01674         {\cf19 try}:\par
01675             urls = get_event_urls(selected_event)\par
01676             filtered_urls = [url {\cf19 for} url {\cf19 in} urls {\cf19 if} any(det {\cf19 in} url {\cf19 for} det {\cf19 in} selected_detectors)]\par
01677             self.url_dropdown[{\cf22 "values"}] = filtered_urls\par
01678             {\cf19 if} filtered_urls:\par
01679                 self.url_dropdown.current(0)\par
01680         {\cf19 except} Exception {\cf17 as} e:\par
01681             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Error fetching event URLs: \{e\}"})\par
01682 \par
01683     {\cf20 # \'F0\'9F\'94\'B9 Toggle GPS \'E2\'87\'84 UTC Mode}\par
01684     {\cf17 def }toggle_mode(self):\par
01685         {\cf19 if} self.mode.get() == {\cf22 "gps_to_utc"}:\par
01686             self.mode.set({\cf22 "utc_to_gps"})\par
01687             self.toggle_button.config(text={\cf22 "Switch to GPS \'E2\'86\'92 UTC"})\par
01688         {\cf19 else}:\par
01689             self.mode.set({\cf22 "gps_to_utc"})\par
01690             self.toggle_button.config(text={\cf22 "Switch to UTC \'E2\'86\'92 GPS"})\par
01691 \par
01692     {\cf20 # \'F0\'9F\'94\'B9 Convert GPS \'E2\'87\'84 UTC}\par
01693     {\cf17 def }convert_time(self):\par
01694         time_input = self.convert_entry.get().strip()\par
01695         {\cf19 if} {\cf19 not} time_input:\par
01696             messagebox.showerror({\cf22 "Error"}, {\cf22 "Please enter a valid time!"})\par
01697             {\cf19 return}\par
01698 \par
01699         {\cf19 try}:\par
01700             {\cf19 if} self.mode.get() == {\cf22 "gps_to_utc"}:\par
01701                 gps_time = float(time_input)\par
01702                 utc_time = gp_time.from_gps(int(gps_time))\par
01703                 self.result_label.config(text=f{\cf22 "UTC Time: \{utc_time\}"})\par
01704             {\cf19 else}:\par
01705                 utc_time = datetime.strptime(time_input, {\cf22 "%Y-%m-%d %H:%M:%S"})\par
01706                 gps_time = gp_time.to_gps(utc_time)\par
01707                 self.result_label.config(text=f{\cf22 "GPS Time: \{gps_time\}"})\par
01708 \par
01709         {\cf19 except} Exception {\cf17 as} e:\par
01710             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Conversion failed: \{e\}"})\par
01711  \par
01712 \par
01713     {\cf17 def }save_params(self):\par
01714         {\cf22 """Overwrite 'gwfparams.csv' with the latest input values, including headers."""}\par
01715         file_path = {\cf22 "gwfparams.csv"}\par
01716 \par
01717         {\cf20 # Define column headers}\par
01718         headers = [{\cf22 "Catalog"}, {\cf22 "Event"}, {\cf22 "Run"}, {\cf22 "Detector"}, {\cf22 "Start Time (GPS)"}, {\cf22 "End Time (GPS)"}, {\cf22 "Event URL"}]\par
01719 \par
01720         {\cf20 # Collect values}\par
01721         params = [\par
01722             self.catalog_dropdown.get(),\par
01723             self.event_dropdown.get(),\par
01724             self.run_dropdown.get(),\par
01725             {\cf22 ", "}.join([self.detector_listbox.get(i) {\cf19 for} i {\cf19 in} self.detector_listbox.curselection()]),\par
01726             self.gps_start_entry.get(),\par
01727             self.gps_end_entry.get(),\par
01728             self.url_dropdown.get(),  {\cf20 # Assuming this holds the event URL}\par
01729         ]\par
01730 \par
01731         {\cf19 try}:\par
01732             {\cf17 with} open(file_path, mode={\cf22 "w"}, newline={\cf22 ""}) {\cf17 as} file:  {\cf20 # "w" mode overwrites the file}\par
01733                 writer = csv.writer(file)\par
01734                 writer.writerow(headers)  {\cf20 # Always write headers}\par
01735                 writer.writerow(params)   {\cf20 # Write only the latest values}\par
01736 \par
01737             messagebox.showinfo({\cf22 "Success"}, f{\cf22 "Parameters saved to \{file_path\}"})\par
01738 \par
01739         {\cf19 except} Exception {\cf17 as} e:\par
01740             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Failed to save parameters: \{e\}"})\par
01741 \par
01742 \par
01743     {\cf17 def }fft(self, event_name, detectors, gps_start, gps_end):\par
01744         fig_fft, ax_fft = plt.subplots(figsize=(8, 5))\par
01745         data_dict = \{\}  {\cf20 # Dictionary to store TimeSeries data for each selected detector}\par
01746         {\cf19 for} detector {\cf19 in} detectors:  {\cf20 # Loop through selected detectors}\par
01747             {\cf19 if} detector == {\cf22 "L1"}:\par
01748                 var_name = {\cf22 "ldata"}\par
01749             {\cf19 elif} detector == {\cf22 "H1"}:\par
01750                 var_name = {\cf22 "hdata"}\par
01751             {\cf19 elif} detector == {\cf22 "V1"}:\par
01752                 var_name = {\cf22 "vdata"}\par
01753             {\cf19 else}:\par
01754                 var_name = f{\cf22 "\{detector.lower()\}data"}  {\cf20 # Fallback for unexpected detectors}\par
01755             data_dict[var_name] = TimeSeries.fetch_open_data(detector, gps_start, gps_end, verbose={\cf17 True})\par
01756             window = get_window({\cf22 'hann'}, data_dict[var_name].size)\par
01757             win_data = data_dict[var_name] * window  \par
01758             fftamp = win_data.fft().abs()\par
01759             ax_fft.plot(fftamp.frequencies.value, fftamp, label=f{\cf22 "FFT Amplitude (\{detector\})"})\par
01760         ax_fft.set_xlabel({\cf22 "Frequency (Hz)"})\par
01761         ax_fft.set_ylabel({\cf22 "Amplitude"})\par
01762         ax_fft.set_xscale({\cf22 "log"})\par
01763         ax_fft.set_yscale({\cf22 "log"})\par
01764         ax_fft.set_title(f{\cf22 "FFT of \{event_name\}"})\par
01765         ax_fft.legend()\par
01766         ax_fft.grid({\cf17 True})\par
01767         canvas_fft = FigureCanvasTkAgg(fig_fft, master=self.root)\par
01768         canvas_fft_widget = canvas_fft.get_tk_widget()\par
01769         canvas_fft_widget.grid(row=3, column=0, columnspan=1, sticky={\cf22 "nsew"})\par
01770         canvas_fft.draw()\par
01771         toolbar_fft = NavigationToolbar2Tk(canvas_fft, self.root)\par
01772         toolbar_fft.grid(row=5, column=0, columnspan=1, pady=5)\par
01773 \par
01774         {\cf20 # Save Button}\par
01775         {\cf17 def }save_plot():\par
01776             file_path = filedialog.asksaveasfilename(defaultextension={\cf22 ".png"}, filetypes=[({\cf22 "PNG files"}, {\cf22 "*.png"}), ({\cf22 "All Files"}, {\cf22 "*.*"})])\par
01777             {\cf19 if} file_path:\par
01778                 fig_fft.savefig(file_path)  {\cf20 # Use fig_fft instead of fig}\par
01779                 print(f{\cf22 "Plot saved as \{file_path\}"})\par
01780 \par
01781         save_button = tk.Button(self.root, text={\cf22 "Save FFT Plot"}, command=save_plot)\par
01782         save_button.grid(row=4, column=1, columnspan=2, pady=10)\par
01783 \par
01784         {\cf20 # Configure grid for resizing}\par
01785         self.root.grid_rowconfigure(0, weight=1)\par
01786         self.root.grid_columnconfigure(0, weight=1)\par
01787         self.root.grid_columnconfigure(1, weight=1)\par
01788 \par
01790 \par
01791 {\cf17 class }PSDs:\par
01792     {\cf17 def }__init__(self, root):\par
01793         self.root = root\par
01794         self.root.grid_rowconfigure(0, weight=1)\par
01795         self.root.grid_columnconfigure(0, weight=1)\par
01796 \par
01797         {\cf20 # Canvas for scrolling}\par
01798         self.canvas = tk.Canvas(root)\par
01799         self.scroll_y = ttk.Scrollbar(root, orient={\cf22 "vertical"}, command=self.canvas.yview)\par
01800         self.scroll_x = ttk.Scrollbar(root, orient={\cf22 "horizontal"}, command=self.canvas.xview)\par
01801         self.scroll_y.grid(row=0, column=1, sticky={\cf22 "ns"})\par
01802         self.scroll_x.grid(row=1, column=0, sticky={\cf22 "ew"})\par
01803 \par
01804         self.frame = ttk.Frame(self.canvas)\par
01805         self.frame.bind({\cf22 "<Configure>"}, {\cf17 lambda} e: self.canvas.configure(scrollregion=self.canvas.bbox({\cf22 "all"})))\par
01806 \par
01807         self.canvas.create_window((0, 0), window=self.frame, anchor={\cf22 "nw"})\par
01808         self.canvas.configure(yscrollcommand=self.scroll_y.set, xscrollcommand=self.scroll_x.set)\par
01809         self.canvas.grid(row=0, column=0, sticky={\cf22 "nsew"})  \par
01810 \par
01811 \par
01812         {\cf20 # Main Input Frame}\par
01813         input_frame = ttk.LabelFrame(self.frame, text={\cf22 "Input Parameters"})\par
01814         input_frame.grid(row=0, column=0, padx=5, pady=5, sticky={\cf22 "nsew"})\par
01815 \par
01816         {\cf20 # Catalog Selection}\par
01817         ttk.Label(input_frame, text={\cf22 "Catalog:"}).grid(row=0, column=0, padx=5, pady=5, sticky={\cf22 "w"})\par
01818         self.catalog_dropdown = ttk.Combobox(input_frame, state={\cf22 "readonly"})\par
01819         self.catalog_dropdown.grid(row=0, column=1, padx=5, pady=5, sticky={\cf22 "ew"})\par
01820         self.catalog_dropdown.bind({\cf22 "<<ComboboxSelected>>"}, self.fetch_events)\par
01821 \par
01822         {\cf20 # Event Selection}\par
01823         ttk.Label(input_frame, text={\cf22 "Event:"}).grid(row=1, column=0, padx=5, pady=5, sticky={\cf22 "w"})\par
01824         self.event_dropdown = ttk.Combobox(input_frame, state={\cf22 "readonly"})\par
01825         self.event_dropdown.grid(row=1, column=1, padx=5, pady=5, sticky={\cf22 "ew"})\par
01826         self.event_dropdown.bind({\cf22 "<<ComboboxSelected>>"},self.fetch_event_details)\par
01827 \par
01828         {\cf20 # Run Selection}\par
01829         ttk.Label(input_frame, text={\cf22 "Run:"}).grid(row=2, column=0, padx=5, pady=5, sticky={\cf22 "w"})\par
01830         self.run_dropdown = ttk.Combobox(input_frame, state={\cf22 "readonly"})\par
01831         self.run_dropdown.grid(row=2, column=1, padx=5, pady=5, sticky={\cf22 "ew"})\par
01832 \par
01833         {\cf20 # Detector Selection}\par
01834         ttk.Label(input_frame, text={\cf22 "Detector:"}).grid(row=1, column=2, padx=5, pady=5, sticky={\cf22 "w"})\par
01835         self.detector_dropdown = tk.Listbox(input_frame, selectmode={\cf22 "multiple"}, height=3)\par
01836         {\cf19 for} det {\cf19 in} [{\cf22 "L1"}, {\cf22 "H1"}, {\cf22 "V1"}]:\par
01837             self.detector_dropdown.insert(tk.END, det)\par
01838         self.detector_dropdown.grid(row=1, column=3, padx=5, pady=5, sticky={\cf22 "ew"})\par
01839         self.detector_dropdown.bind({\cf22 "<<ComboboxSelected>>"},self.update_urls)\par
01840 \par
01841         {\cf20 # GPS Time Inputs}\par
01842         ttk.Label(input_frame, text={\cf22 "Start Time:"}).grid(row=0, column=2, padx=5, pady=5, sticky={\cf22 "w"})\par
01843         self.gps_start_entry = ttk.Entry(input_frame, width=20)\par
01844         self.gps_start_entry.grid(row=0, column=3, padx=5, pady=5, sticky={\cf22 "ew"})\par
01845 \par
01846         ttk.Label(input_frame, text={\cf22 "End Time (Optional):"}).grid(row=0, column=4, padx=5, pady=5, sticky={\cf22 "w"})\par
01847         self.gps_end_entry = ttk.Entry(input_frame, width=20)\par
01848         self.gps_end_entry.grid(row=0, column=5, padx=5, pady=5, sticky={\cf22 "ew"})\par
01849         {\cf20 # FFT & Method Inputs}\par
01850         ttk.Label(input_frame, text={\cf22 "FFT Length:"}).grid(row=1, column=4, padx=5, pady=5, sticky={\cf22 "w"})\par
01851         self.fft_length_entry = ttk.Entry(input_frame, width=10)\par
01852         self.fft_length_entry.grid(row=1, column=5, padx=5, pady=5, sticky={\cf22 "ew"})\par
01853 \par
01854         ttk.Label(input_frame, text={\cf22 "Method:"}).grid(row=1, column=6, padx=5, pady=5, sticky={\cf22 "w"})\par
01855         self.method_entry = ttk.Combobox(input_frame, width=10, values=[{\cf22 "median"}, {\cf22 "welch"}], state={\cf22 "readonly"})\par
01856         self.method_entry.grid(row=1, column=7, padx=5, pady=5, sticky={\cf22 "ew"})\par
01857         self.method_entry.current(0)  {\cf20 # Default selection to "median"}\par
01858         {\cf20 # GPS \'E2\'87\'84 UTC Converter}\par
01859         self.mode = tk.StringVar(value={\cf22 "gps_to_utc"})\par
01860         conversion_frame = ttk.LabelFrame(self.frame, text={\cf22 "GPS \'E2\'87\'84 UTC Converter"})\par
01861         conversion_frame.grid(row=1, column=0, padx=5, pady=5, sticky={\cf22 "nsew"})\par
01862 \par
01863         self.convert_entry = ttk.Entry(conversion_frame, width=20)\par
01864         self.convert_entry.grid(row=0, column=0, padx=5, pady=5)\par
01865 \par
01866         self.convert_button = ttk.Button(conversion_frame, text={\cf22 "Convert"}, command=self.convert_time)\par
01867         self.convert_button.grid(row=0, column=1, padx=5, pady=5)\par
01868 \par
01869         self.result_label = ttk.Label(conversion_frame, text={\cf22 "Result: "})\par
01870         self.result_label.grid(row=0, column=2, padx=5, pady=5)\par
01871 \par
01872         self.toggle_button = ttk.Button(conversion_frame, text={\cf22 "Switch to UTC \'E2\'86\'92 GPS"}, command=self.toggle_mode)\par
01873         self.toggle_button.grid(row=0, column=3, padx=5, pady=5)\par
01874 \par
01875         {\cf20 # Event URLs Frame}\par
01876         url_frame = ttk.LabelFrame(self.frame, text={\cf22 "Event URLs"})\par
01877         url_frame.grid(row=1, column=1, padx=5, pady=5, sticky={\cf22 "nsew"})\par
01878 \par
01879         self.url_dropdown = ttk.Combobox(url_frame, state={\cf22 "readonly"})\par
01880         self.url_dropdown.grid(row=0, column=0, padx=5, pady=5, sticky={\cf22 "ew"})\par
01881 \par
01882         self.copy_button = ttk.Button(url_frame, text={\cf22 "Copy URL"}, command=self.copy_url)\par
01883         self.copy_button.grid(row=0, column=1, padx=5, pady=5, sticky={\cf22 "ew"})\par
01884         \par
01885         {\cf20 # Save Parameters Button}\par
01886         self.save_button = ttk.Button(input_frame, text={\cf22 "Save Parameters"}, command=self.save_params)\par
01887         self.save_button.grid(row=2, column=0, columnspan=2, padx=5, pady=10, sticky={\cf22 "ew"})\par
01888         self.plot_frame = ttk.Frame(self.frame)\par
01889         self.plot_frame.grid(row=3, column=0, padx=5, pady=5, sticky={\cf22 "nsew"})\par
01890 \par
01891         self.prefetch_data()\par
01892         self.plot_button = tk.Button(root, text={\cf22 "Plot TimeSeries"}, command={\cf17 lambda}: self.psds(self.catalog_dropdown.get(),[self.detector_dropdown.get(idx) {\cf19 for} idx {\cf19 in} self.detector_dropdown.curselection()],float(self.gps_start_entry.get()),float(self.gps_end_entry.get()),int(self.fft_length_entry.get()),self.method_entry.get()))\par
01893         self.plot_button.grid(row=0, column=3, columnspan=2, pady=10)\par
01894 \par
01895 \par
01896     {\cf17 def }copy_url(self):\par
01897         selected_url = self.url_dropdown.get()\par
01898         {\cf19 if} selected_url:\par
01899             self.root.clipboard_clear()\par
01900             self.root.clipboard_append(selected_url)\par
01901             self.root.update()  {\cf20 # Keep clipboard data even after the app closes}\par
01902             messagebox.showinfo({\cf22 "Copied"}, {\cf22 "URL copied to clipboard!"})\par
01903         {\cf19 else}:\par
01904             messagebox.showwarning({\cf22 "Warning"}, {\cf22 "No URL selected!"})\par
01905 \par
01906     {\cf20 # \'F0\'9F\'94\'B9 Prefetch Catalogs & Runs at Startup}\par
01907     {\cf17 def }prefetch_data(self):\par
01908         {\cf19 try}:\par
01909             catalogs = find_datasets(type={\cf22 "catalog"})\par
01910             self.catalog_dropdown[{\cf22 "values"}] = catalogs\par
01911             {\cf19 if} catalogs:\par
01912                 self.catalog_dropdown.current(0)\par
01913 \par
01914             runs = find_datasets(type={\cf22 "run"})\par
01915             self.run_dropdown[{\cf22 "values"}] = runs\par
01916             {\cf19 if} runs:\par
01917                 self.run_dropdown.current(0)\par
01918 \par
01919         {\cf19 except} Exception {\cf17 as} e:\par
01920             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Error fetching catalogs/runs: \{e\}"})\par
01921 \par
01922     {\cf20 # \'F0\'9F\'94\'B9 Fetch Events Based on Selected Catalog}\par
01923     {\cf17 def }fetch_events(self, event=None):\par
01924         selected_catalog = self.catalog_dropdown.get()\par
01925         {\cf19 if} {\cf19 not} selected_catalog:\par
01926             {\cf19 return}\par
01927 \par
01928         {\cf19 try}:\par
01929             events = datasets.find_datasets(type={\cf22 "events"}, catalog=selected_catalog)\par
01930             self.event_dropdown[{\cf22 "values"}] = events\par
01931             {\cf19 if} events:\par
01932                 self.event_dropdown.current(0)\par
01933                 self.fetch_event_details()  {\cf20 # Auto-update details for first event}\par
01934 \par
01935         {\cf19 except} Exception {\cf17 as} e:\par
01936             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Error fetching events: \{e\}"})\par
01937 \par
01938     {\cf20 # \'F0\'9F\'94\'B9 Fetch Event GPS & URLs}\par
01939     {\cf17 def }fetch_event_details(self, event=None):\par
01940         selected_event = self.event_dropdown.get()\par
01941         {\cf19 if} {\cf19 not} selected_event:\par
01942             {\cf19 return}\par
01943         {\cf19 try}:\par
01944             gps_time = event_gps(selected_event)\par
01945             self.gps_start_entry.delete(0, tk.END)\par
01946             self.gps_start_entry.insert(0, str(gps_time))\par
01947 \par
01948             self.update_urls()\par
01949 \par
01950         {\cf19 except} Exception {\cf17 as} e:\par
01951             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Error fetching event details: \{e\}"})\par
01952 \par
01953     {\cf20 # \'F0\'9F\'94\'B9 Update URLs Based on Event & Detector}\par
01954     {\cf17 def }update_urls(self, event=None):\par
01955         selected_event = self.event_dropdown.get()\par
01956         selected_detectors = [self.detector_dropdown.get(idx) {\cf19 for} idx {\cf19 in} self.detector_dropdown.curselection()]\par
01957         {\cf19 if} {\cf19 not} selected_event {\cf19 or} {\cf19 not} selected_detectors:\par
01958             {\cf19 return}\par
01959 \par
01960         {\cf19 try}:\par
01961             urls = get_event_urls(selected_event)\par
01962             filtered_urls = [url {\cf19 for} url {\cf19 in} urls {\cf19 if} any(det {\cf19 in} url {\cf19 for} det {\cf19 in} selected_detectors)]\par
01963             self.url_dropdown[{\cf22 "values"}] = filtered_urls\par
01964             {\cf19 if} filtered_urls:\par
01965                 self.url_dropdown.current(0)\par
01966 \par
01967         {\cf19 except} Exception {\cf17 as} e:\par
01968             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Error fetching event URLs: \{e\}"})\par
01969 \par
01970     {\cf20 # \'F0\'9F\'94\'B9 Toggle GPS \'E2\'87\'84 UTC Mode}\par
01971     {\cf17 def }toggle_mode(self):\par
01972         {\cf19 if} self.mode.get() == {\cf22 "gps_to_utc"}:\par
01973             self.mode.set({\cf22 "utc_to_gps"})\par
01974             self.toggle_button.config(text={\cf22 "Switch to GPS \'E2\'86\'92 UTC"})\par
01975         {\cf19 else}:\par
01976             self.mode.set({\cf22 "gps_to_utc"})\par
01977             self.toggle_button.config(text={\cf22 "Switch to UTC \'E2\'86\'92 GPS"})\par
01978 \par
01979     {\cf20 # \'F0\'9F\'94\'B9 Convert GPS \'E2\'87\'84 UTC}\par
01980     {\cf17 def }convert_time(self):\par
01981         time_input = self.convert_entry.get().strip()\par
01982         {\cf19 if} {\cf19 not} time_input:\par
01983             messagebox.showerror({\cf22 "Error"}, {\cf22 "Please enter a valid time!"})\par
01984             {\cf19 return}\par
01985 \par
01986         {\cf19 try}:\par
01987             {\cf19 if} self.mode.get() == {\cf22 "gps_to_utc"}:\par
01988                 gps_time = float(time_input)\par
01989                 utc_time = gp_time.from_gps(int(gps_time))\par
01990                 self.result_label.config(text=f{\cf22 "UTC Time: \{utc_time\}"})\par
01991             {\cf19 else}:\par
01992                 utc_time = datetime.strptime(time_input, {\cf22 "%Y-%m-%d %H:%M:%S"})\par
01993                 gps_time = gp_time.to_gps(utc_time)\par
01994                 self.result_label.config(text=f{\cf22 "GPS Time: \{gps_time\}"})\par
01995 \par
01996         {\cf19 except} Exception {\cf17 as} e:\par
01997             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Conversion failed: \{e\}"})\par
01998  \par
01999 \par
02000     {\cf17 def }save_params(self):\par
02001         {\cf22 """Overwrite 'gwfparams.csv' with the latest input values, including headers."""}\par
02002         file_path = {\cf22 "gwfparams.csv"}\par
02003 \par
02004         {\cf20 # Define column headers}\par
02005         headers = [{\cf22 "Catalog"}, {\cf22 "Event"}, {\cf22 "Run"}, {\cf22 "Detector(s)"}, {\cf22 "Start Time (GPS)"}, {\cf22 "End Time (GPS)"}, {\cf22 "Event URL"}]\par
02006 \par
02007         {\cf20 # Collect values}\par
02008         selected_detectors = {\cf22 ", "}.join([self.detector_dropdown.get(idx) {\cf19 for} idx {\cf19 in} self.detector_dropdown.curselection()])\par
02009         params = [\par
02010             self.catalog_dropdown.get(),\par
02011             self.event_dropdown.get(),\par
02012             self.run_dropdown.get(),\par
02013             selected_detectors,  {\cf20 # Updated for multiple detectors}\par
02014             self.gps_start_entry.get(),\par
02015             self.gps_end_entry.get(),\par
02016             self.url_dropdown.get(),  {\cf20 # Assuming this holds the event URL}\par
02017         ]\par
02018 \par
02019         {\cf19 try}:\par
02020             {\cf17 with} open(file_path, mode={\cf22 "w"}, newline={\cf22 ""}) {\cf17 as} file:  {\cf20 # "w" mode overwrites the file}\par
02021                 writer = csv.writer(file)\par
02022                 writer.writerow(headers)  {\cf20 # Always write headers}\par
02023                 writer.writerow(params)   {\cf20 # Write only the latest values}\par
02024 \par
02025             messagebox.showinfo({\cf22 "Success"}, f{\cf22 "Parameters saved to \{file_path\}"})\par
02026 \par
02027         {\cf19 except} Exception {\cf17 as} e:\par
02028             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Failed to save parameters: \{e\}"})\par
02029 \par
02030     {\cf17 def }psds(self, event_name, detectors, gps_start, gps_end, fftlengths, methods):\par
02031         {\cf22 """}\par
02032 {\cf22         Plot Power Spectral Densities (PSDs) for multiple detectors in Tkinter.}\par
02033 {\cf22 }\par
02034 {\cf22         Parameters:}\par
02035 {\cf22         - event_name: Name of the gravitational wave event}\par
02036 {\cf22         - detectors: List of detector names (e.g., ['H1', 'L1', 'V1'])}\par
02037 {\cf22         - gps_start: GPS start time}\par
02038 {\cf22         - gps_end: GPS end time}\par
02039 {\cf22         - fftlengths: List of FFT lengths (same length as detectors)}\par
02040 {\cf22         - methods: List of ASD computation methods (same length as detectors)}\par
02041 {\cf22         """}\par
02042 \par
02043         fig, ax = plt.subplots(figsize=(8, 5))\par
02044         colors = [{\cf22 'b'}, {\cf22 'r'}, {\cf22 'g'}, {\cf22 'm'}, {\cf22 'c'}, {\cf22 'y'}]  {\cf20 # More colors for multiple detectors}\par
02045 \par
02046         {\cf19 for} i, det {\cf19 in} enumerate(detectors):\par
02047             {\cf19 try}:\par
02048                 {\cf20 # Fetch GWOSC data}\par
02049                 print(i,det)\par
02050                 data = TimeSeries.fetch_open_data(det, gps_start, gps_end, verbose={\cf17 True})\par
02051                 print(data)\par
02052                 {\cf20 # Get user-specified FFT length and method}\par
02053                 fft_len = fftlengths\par
02054                 method = methods\par
02055                 {\cf20 # Compute ASD}\par
02056                 asd = data.asd(fftlength=fft_len, method=method)\par
02057                 print(asd)\par
02058                 freqs = asd.frequencies.value\par
02059                 asd_values = asd.value\par
02060 \par
02061                 {\cf20 # Plot ASD manually using `ax.plot()`}\par
02062                 ax.plot(freqs, asd_values, color=colors[i % len(colors)], \par
02063                     label=f{\cf22 "\{det\} - \{method.capitalize()\} FFT=\{fft_len\}"})\par
02064             {\cf19 except} Exception {\cf17 as} e:\par
02065                 print(f{\cf22 "Error fetching data for \{det\}: \{e\}"})\par
02066 \par
02067         {\cf20 # Set plot labels and limits}\par
02068         ax.set_xlabel({\cf22 "Frequency [Hz]"})\par
02069         ax.set_ylabel({\cf22 "ASD [strain/$\\sqrt\{Hz\}$]"})\par
02070         ax.set_xscale({\cf22 "log"})\par
02071         ax.set_yscale({\cf22 "log"})\par
02072         ax.set_xlim(10, 1400)\par
02073         ax.set_ylim(1e-24, 1e-20)\par
02074         ax.grid({\cf17 True}, which={\cf22 "both"}, linestyle={\cf22 "--"}, alpha=0.5)\par
02075         ax.legend()\par
02076 \par
02077         plt.title(f{\cf22 "ASD for \{event_name\}"})\par
02078         \par
02079         {\cf20 # Embed plot in Tkinter}\par
02080         canvas = FigureCanvasTkAgg(fig, master=self.root)\par
02081         canvas_widget = canvas.get_tk_widget()\par
02082         canvas_widget.grid(row=2, column=0, columnspan=4, sticky={\cf22 "nsew"})\par
02083         canvas.draw()\par
02084 \par
02085         {\cf20 # Add Matplotlib toolbar}\par
02086         toolbar_fft = NavigationToolbar2Tk(canvas, self.root)\par
02087         toolbar_fft.grid(row=3, column=0, columnspan=1, pady=5)\par
02088 \par
02089         {\cf20 # Save Button}\par
02090         {\cf17 def }save_plot():\par
02091             file_path = filedialog.asksaveasfilename(defaultextension={\cf22 ".png"}, filetypes=[({\cf22 "PNG files"}, {\cf22 "*.png"}), ({\cf22 "All Files"}, {\cf22 "*.*"})])\par
02092             {\cf19 if} file_path:\par
02093                 fig.savefig(file_path)\par
02094                 print(f{\cf22 "Plot saved as \{file_path\}"})\par
02095 \par
02096         save_button = tk.Button(self.root, text={\cf22 "Save Plot"}, command=save_plot)\par
02097         save_button.grid(row=3, column=1, pady=5)\par
02098 \par
02099         {\cf20 # Configure grid for resizing}\par
02100         self.root.grid_rowconfigure(0, weight=1)\par
02101         self.root.grid_columnconfigure(0, weight=1)\par
02102         self.root.grid_columnconfigure(1, weight=1)\par
02103 \par
02104 \par
02106 \par
02107 {\cf17 class }Spectrogram:\par
02108     {\cf17 def }__init__(self, root):\par
02109         self.root = root\par
02110         self.root.grid_rowconfigure(0, weight=1)\par
02111         self.root.grid_columnconfigure(0, weight=1)\par
02112 \par
02113         {\cf20 # Canvas for scrolling}\par
02114         self.canvas = tk.Canvas(root)\par
02115         self.scroll_y = ttk.Scrollbar(root, orient={\cf22 "vertical"}, command=self.canvas.yview)\par
02116         self.scroll_x = ttk.Scrollbar(root, orient={\cf22 "horizontal"}, command=self.canvas.xview)\par
02117         self.scroll_y.grid(row=0, column=1, sticky={\cf22 "ns"})\par
02118         self.scroll_x.grid(row=1, column=0, sticky={\cf22 "ew"})\par
02119 \par
02120         self.frame = ttk.Frame(self.canvas)\par
02121         self.frame.bind({\cf22 "<Configure>"}, {\cf17 lambda} e: self.canvas.configure(scrollregion=self.canvas.bbox({\cf22 "all"})))\par
02122 \par
02123         self.canvas.create_window((0, 0), window=self.frame, anchor={\cf22 "nw"})\par
02124         self.canvas.configure(yscrollcommand=self.scroll_y.set, xscrollcommand=self.scroll_x.set)\par
02125         self.canvas.grid(row=0, column=0, sticky={\cf22 "nsew"})  \par
02126 \par
02127 \par
02128         {\cf20 # Main Input Frame}\par
02129         input_frame = ttk.LabelFrame(self.frame, text={\cf22 "Input Parameters"})\par
02130         input_frame.grid(row=0, column=0, padx=5, pady=5, sticky={\cf22 "nsew"})\par
02131 \par
02132         {\cf20 # Catalog Selection}\par
02133         ttk.Label(input_frame, text={\cf22 "Catalog:"}).grid(row=0, column=0, padx=5, pady=5, sticky={\cf22 "w"})\par
02134         self.catalog_dropdown = ttk.Combobox(input_frame, state={\cf22 "readonly"})\par
02135         self.catalog_dropdown.grid(row=0, column=1, padx=5, pady=5, sticky={\cf22 "ew"})\par
02136         self.catalog_dropdown.bind({\cf22 "<<ComboboxSelected>>"}, self.fetch_events)\par
02137 \par
02138         {\cf20 # Event Selection}\par
02139         ttk.Label(input_frame, text={\cf22 "Event:"}).grid(row=1, column=0, padx=5, pady=5, sticky={\cf22 "w"})\par
02140         self.event_dropdown = ttk.Combobox(input_frame, state={\cf22 "readonly"})\par
02141         self.event_dropdown.grid(row=1, column=1, padx=5, pady=5, sticky={\cf22 "ew"})\par
02142         self.event_dropdown.bind({\cf22 "<<ComboboxSelected>>"},self.fetch_event_details)\par
02143 \par
02144         {\cf20 # Detector Selection}\par
02145         ttk.Label(input_frame, text={\cf22 "Detector:"}).grid(row=1, column=2, padx=5, pady=5, sticky={\cf22 "w"})\par
02146         self.detector_dropdown = tk.Listbox(input_frame, selectmode={\cf22 "multiple"}, height=3)\par
02147         {\cf19 for} det {\cf19 in} [{\cf22 "L1"}, {\cf22 "H1"}, {\cf22 "V1"}]:\par
02148             self.detector_dropdown.insert(tk.END, det)\par
02149         self.detector_dropdown.grid(row=1, column=3, padx=5, pady=5, sticky={\cf22 "ew"})\par
02150         \par
02151 \par
02152         {\cf20 # GPS Time Inputs}\par
02153         ttk.Label(input_frame, text={\cf22 "Start Time:"}).grid(row=0, column=2, padx=5, pady=5, sticky={\cf22 "w"})\par
02154         self.gps_start_entry = ttk.Entry(input_frame, width=20)\par
02155         self.gps_start_entry.grid(row=0, column=3, padx=5, pady=5, sticky={\cf22 "ew"})\par
02156 \par
02157         ttk.Label(input_frame, text={\cf22 "End Time (Optional):"}).grid(row=0, column=4, padx=5, pady=5, sticky={\cf22 "w"})\par
02158         self.gps_end_entry = ttk.Entry(input_frame, width=20)\par
02159         self.gps_end_entry.grid(row=0, column=5, padx=5, pady=5, sticky={\cf22 "ew"})\par
02160 \par
02161         {\cf20 # FFT & Method Inputs}\par
02162         ttk.Label(input_frame, text={\cf22 "FFT Length:"}).grid(row=1, column=4, padx=5, pady=5, sticky={\cf22 "w"})\par
02163         self.fft_length_entry = ttk.Entry(input_frame, width=10)\par
02164         self.fft_length_entry.grid(row=1, column=5, padx=5, pady=5, sticky={\cf22 "ew"})\par
02165 \par
02166         ttk.Label(input_frame, text={\cf22 "Window:"}).grid(row=1, column=6, padx=5, pady=5, sticky={\cf22 "w"})\par
02167         self.window_entry = ttk.Combobox(input_frame, width=10, values=[{\cf22 "hann"}, {\cf22 "option2"}], state={\cf22 "readonly"})\par
02168         self.window_entry.grid(row=1, column=7, padx=5, pady=5, sticky={\cf22 "ew"})\par
02169         self.window_entry.current(0)\par
02170         \par
02171         ttk.Label(input_frame, text={\cf22 "Overlap duration"}).grid(row=2, column=4, padx=5, pady=5, sticky={\cf22 "w"})\par
02172         self.overlap_entry = ttk.Entry(input_frame, width=20)\par
02173         self.overlap_entry.grid(row=2, column=7, padx=5, pady=5, sticky={\cf22 "ew"})\par
02174 \par
02175         {\cf20 # GPS \'E2\'87\'84 UTC Converter}\par
02176         self.mode = tk.StringVar(value={\cf22 "gps_to_utc"})\par
02177         conversion_frame = ttk.LabelFrame(self.frame, text={\cf22 "GPS \'E2\'87\'84 UTC Converter"})\par
02178         conversion_frame.grid(row=1, column=0, padx=5, pady=5, sticky={\cf22 "nsew"})\par
02179 \par
02180         self.convert_entry = ttk.Entry(conversion_frame, width=20)\par
02181         self.convert_entry.grid(row=0, column=0, padx=5, pady=5)\par
02182 \par
02183         self.convert_button = ttk.Button(conversion_frame, text={\cf22 "Convert"}, command=self.convert_time)\par
02184         self.convert_button.grid(row=0, column=1, padx=5, pady=5)\par
02185 \par
02186         self.result_label = ttk.Label(conversion_frame, text={\cf22 "Result: "})\par
02187         self.result_label.grid(row=0, column=2, padx=5, pady=5)\par
02188 \par
02189         self.toggle_button = ttk.Button(conversion_frame, text={\cf22 "Switch to UTC \'E2\'86\'92 GPS"}, command=self.toggle_mode)\par
02190         self.toggle_button.grid(row=0, column=3, padx=5, pady=5)\par
02191         \par
02192 \par
02193         self.prefetch_data()\par
02194         self.plot_button = tk.Button(root, text={\cf22 "Plot TimeSeries"}, command={\cf17 lambda}: self.specgrams([self.detector_dropdown.get(idx) {\cf19 for} idx {\cf19 in} self.detector_dropdown.curselection()],gps_start=float(self.gps_start_entry.get()),gps_end = float(self.gps_end_entry.get()),fftlengths=int(self.fft_length_entry.get()),window=self.window_entry.get(),overlap=self.overlap_entry.get()))\par
02195         self.plot_button.grid(row=0, column=3, columnspan=2, pady=10)\par
02196 \par
02197     {\cf20 # \'F0\'9F\'94\'B9 Prefetch Catalogs & Runs at Startup}\par
02198     {\cf17 def }prefetch_data(self):\par
02199         {\cf19 try}:\par
02200             catalogs = find_datasets(type={\cf22 "catalog"})\par
02201             self.catalog_dropdown[{\cf22 "values"}] = catalogs\par
02202             {\cf19 if} catalogs:\par
02203                 self.catalog_dropdown.current(0)\par
02204 \par
02205         {\cf19 except} Exception {\cf17 as} e:\par
02206             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Error fetching catalogs: \{e\}"})\par
02207 \par
02208     {\cf20 # \'F0\'9F\'94\'B9 Fetch Events Based on Selected Catalog}\par
02209     {\cf17 def }fetch_events(self, event=None):\par
02210         selected_catalog = self.catalog_dropdown.get()\par
02211         {\cf19 if} {\cf19 not} selected_catalog:\par
02212             {\cf19 return}\par
02213         {\cf19 try}:\par
02214             events = datasets.find_datasets(type={\cf22 "events"}, catalog=selected_catalog)\par
02215             self.event_dropdown[{\cf22 "values"}] = events\par
02216             {\cf19 if} events:\par
02217                 self.event_dropdown.current(0)\par
02218                 self.fetch_event_details()  {\cf20 # Auto-update details for first event}\par
02219 \par
02220         {\cf19 except} Exception {\cf17 as} e:\par
02221             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Error fetching events: \{e\}"})\par
02222 \par
02223     {\cf20 # \'F0\'9F\'94\'B9 Fetch Event GPS & URLs}\par
02224     {\cf17 def }fetch_event_details(self, event=None):\par
02225         selected_event = self.event_dropdown.get()\par
02226         {\cf19 if} {\cf19 not} selected_event:\par
02227             {\cf19 return}\par
02228         {\cf19 try}:\par
02229             gps_time = event_gps(selected_event)\par
02230             self.gps_start_entry.delete(0, tk.END)\par
02231             self.gps_start_entry.insert(0, str(gps_time))\par
02232 \par
02233             \par
02234 \par
02235         {\cf19 except} Exception {\cf17 as} e:\par
02236             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Error fetching event details: \{e\}"})\par
02237 \par
02238     {\cf20 # \'F0\'9F\'94\'B9 Toggle GPS \'E2\'87\'84 UTC Mode}\par
02239     {\cf17 def }toggle_mode(self):\par
02240         {\cf19 if} self.mode.get() == {\cf22 "gps_to_utc"}:\par
02241             self.mode.set({\cf22 "utc_to_gps"})\par
02242             self.toggle_button.config(text={\cf22 "Switch to GPS \'E2\'86\'92 UTC"})\par
02243         {\cf19 else}:\par
02244             self.mode.set({\cf22 "gps_to_utc"})\par
02245             self.toggle_button.config(text={\cf22 "Switch to UTC \'E2\'86\'92 GPS"})\par
02246 \par
02247     {\cf20 # \'F0\'9F\'94\'B9 Convert GPS \'E2\'87\'84 UTC}\par
02248     {\cf17 def }convert_time(self):\par
02249         time_input = self.convert_entry.get().strip()\par
02250         {\cf19 if} {\cf19 not} time_input:\par
02251             messagebox.showerror({\cf22 "Error"}, {\cf22 "Please enter a valid time!"})\par
02252             {\cf19 return}\par
02253         {\cf19 try}:\par
02254             {\cf19 if} self.mode.get() == {\cf22 "gps_to_utc"}:\par
02255                 gps_time = float(time_input)\par
02256                 utc_time = gp_time.from_gps(int(gps_time))\par
02257                 self.result_label.config(text=f{\cf22 "UTC Time: \{utc_time\}"})\par
02258             {\cf19 else}:\par
02259                 utc_time = datetime.strptime(time_input, {\cf22 "%Y-%m-%d %H:%M:%S"})\par
02260                 gps_time = gp_time.to_gps(utc_time)\par
02261                 self.result_label.config(text=f{\cf22 "GPS Time: \{gps_time\}"})\par
02262 \par
02263         {\cf19 except} Exception {\cf17 as} e:\par
02264             messagebox.showerror({\cf22 "Error"}, f{\cf22 "Conversion failed: \{e\}"})\par
02265  \par
02266 \par
02267     {\cf17 def }specgrams(self, detectors, gps_start, gps_end, fftlengths, window,overlap):\par
02268 \par
02269         fig, ax = plt.subplots(figsize=(8, 5))\par
02270         {\cf19 for} i, det {\cf19 in} enumerate(detectors):\par
02271             {\cf19 try}:\par
02272                 {\cf20 # Fetch GWOSC data}\par
02273                 print(i,det)\par
02274                 data = TimeSeries.fetch_open_data(det, gps_start, gps_end,cache={\cf17 True})\par
02275                 print(data)\par
02276                 specgram = data.spectrogram2(fftlength=fftlengths, overlap=overlap, window=window) ** (1/2.)\par
02277                 plot = specgram.plot()\par
02278                 ax = plot.gca()\par
02279                 ax.set_yscale({\cf22 'log'})\par
02280                 ax.set_ylim(10, 1400)\par
02281                 ax.colorbar(\par
02282                     clim=(1e-24, 1e-20),\par
02283                     norm={\cf22 "log"},\par
02284                     label={\cf22 r"Strain noise [$1/\\sqrt\{\\mathrm\{Hz\}\}$]"},\par
02285                 )\par
02286             {\cf19 except} Exception {\cf17 as} e:\par
02287                 print(f{\cf22 "Error fetching data for \{det\}: \{e\}"})\par
02288 \par
02289         canvas = FigureCanvasTkAgg(plot, master=self.root)\par
02290         canvas_widget = canvas.get_tk_widget()\par
02291         canvas_widget.grid(row=2, column=0, columnspan=4, sticky={\cf22 "nsew"})\par
02292         canvas.draw()\par
02293 \par
02294         {\cf20 # Add Matplotlib toolbar}\par
02295         toolbar_fft = NavigationToolbar2Tk(canvas, self.root)\par
02296         toolbar_fft.grid(row=3, column=0, columnspan=1, pady=5)\par
02297 \par
02298         {\cf20 # Save Button}\par
02299         {\cf17 def }save_plot():\par
02300             file_path = filedialog.asksaveasfilename(defaultextension={\cf22 ".png"}, filetypes=[({\cf22 "PNG files"}, {\cf22 "*.png"}), ({\cf22 "All Files"}, {\cf22 "*.*"})])\par
02301             {\cf19 if} file_path:\par
02302                 fig.savefig(file_path)\par
02303                 print(f{\cf22 "Plot saved as \{file_path\}"})\par
02304 \par
02305         save_button = tk.Button(self.root, text={\cf22 "Save Plot"}, command=save_plot)\par
02306         save_button.grid(row=3, column=1, pady=5)\par
02307 \par
02308         {\cf20 # Configure grid for resizing}\par
02309         self.root.grid_rowconfigure(0, weight=1)\par
02310         self.root.grid_columnconfigure(0, weight=1)\par
02311         self.root.grid_columnconfigure(1, weight=1)\par
02312 \par
02313 \par
02314 {\cf19 if} __name__ == {\cf22 "__main__"}:\par
02315     root = tk.Tk()\par
02316     app = Application(root)\par
02317     root.mainloop()\par
02318     cef.Shutdown()  {\cf20 # Ensure CEF shuts down properly}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/HP/Desktop/docs/GWeasy/README.md File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/HP/Desktop/docs/GWeasy/README.md}
{\xe \v C:/Users/HP/Desktop/docs/GWeasy/README.md}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/HP/Desktop/docs/GWeasy/tests/readme.md File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/HP/Desktop/docs/GWeasy/tests/readme.md}
{\xe \v C:/Users/HP/Desktop/docs/GWeasy/tests/readme.md}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
